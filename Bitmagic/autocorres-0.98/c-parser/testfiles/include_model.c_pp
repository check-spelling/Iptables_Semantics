# 1 "include_model.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "include_model.c"
# 1 "../../c-kernel/include/model/statedata.h" 1



# 1 "../../c-kernel/include/types.h" 1



# 1 "../../c-kernel/include/stdint.h" 1



# 1 "../../c-kernel/include/arch/arm/arch/stdint.h" 1



typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned long uint32_t;


typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int32_t;
# 5 "../../c-kernel/include/stdint.h" 2
# 5 "../../c-kernel/include/types.h" 2

# 1 "../../c-kernel/include/api/types.h" 1







typedef int32_t prio_t;
typedef uint32_t cptr_t;
typedef uint32_t asid_t;

enum priorityConstants {
    prioInvalid = -1,
    minPrio = 0,
    maxPrio = 255
};

enum asidConstants {
    asidInvalid = 0
};



# 1 "./api/types_gen.h" 1

# 1 "../../c-kernel/include/assert.h" 1



# 1 "../../c-kernel/include/util.h" 1
# 19 "../../c-kernel/include/util.h"
enum _bool {
    false = 0,
    true = 1
};
typedef enum _bool bool_t;

void halt(void) __attribute__((__noreturn__));
void *memset(void *s, unsigned int c, unsigned int n);
void *memcpy(void* ptr_dst, const void* ptr_src, unsigned int n);
# 5 "../../c-kernel/include/assert.h" 2
# 1 "../../c-kernel/include/machine/io.h" 1



# 1 "../../c-kernel/include/plat/imx31/plat/machine/io.h" 1



# 1 "../../c-kernel/include/machine/types.h" 1



# 1 "../../c-kernel/include/arch/arm/arch/types.h" 1





typedef uint32_t word_t;
typedef uint32_t vptr_t;
typedef uint8_t hw_asid_t;

enum hwASIDConstants {
    hwASIDMax = 255,
    hwASIDBits = 8
};
# 5 "../../c-kernel/include/machine/types.h" 2

typedef uint32_t paddr_t;

struct region {
    paddr_t base;
    unsigned int size_bits;
};
typedef struct region region_t;

struct region_list {
    unsigned int count;
    const region_t *entries;
};
typedef struct region_list region_list_t;

struct device {
    paddr_t base;
    unsigned int size_bits;
    unsigned int ncaps;
};
typedef struct device device_t;

struct device_list {
    unsigned int count;
    const device_t *entries;
};
typedef struct device_list device_list_t;

struct kernel_device {
    paddr_t phys;
    volatile word_t* ptr;
    unsigned int size_bits;
};
typedef struct kernel_device kernel_device_t;

struct kernel_devices {
    unsigned int count;
    const kernel_device_t *entries;
};
typedef struct kernel_devices kernel_devices_t;
# 5 "../../c-kernel/include/plat/imx31/plat/machine/io.h" 2
# 5 "../../c-kernel/include/machine/io.h" 2
# 6 "../../c-kernel/include/assert.h" 2
# 3 "./api/types_gen.h" 2


struct message_info{
    uint32_t words[1];
};
typedef struct message_info message_info_t;

static inline message_info_t __attribute__((__const__)) message_info_new(uint32_t msgLabel, uint32_t msgBlockingSend, uint32_t msgExtraCaps, uint32_t msgLength) {
    message_info_t message_info;

    message_info.words[0] = 0;

    message_info.words[0] |= (msgLabel & 0x3fffff) << 10;
    message_info.words[0] |= (msgBlockingSend & 0x1) << 9;
    message_info.words[0] |= (msgExtraCaps & 0x3) << 7;
    message_info.words[0] |= (msgLength & 0x7f) << 0;

    return message_info;
}


static inline uint32_t __attribute__((__const__))
message_info_get_msgLabel(message_info_t message_info) {
    return (message_info.words[0] & 0xfffffc00) >> 10;
}

static inline message_info_t __attribute__((__const__))
message_info_set_msgLabel(message_info_t message_info, uint32_t v) {
    message_info.words[0] &= ~0xfffffc00;
    message_info.words[0] |= (v << 10) & 0xfffffc00;
    return message_info;
}

static inline uint32_t __attribute__((__pure__))
message_info_ptr_get_msgLabel(message_info_t *message_info_ptr) {
    return (message_info_ptr->words[0] & 0xfffffc00) >> 10;
}

static inline void
message_info_ptr_set_msgLabel(message_info_t *message_info_ptr, uint32_t v) {
    message_info_ptr->words[0] &= ~0xfffffc00;
    message_info_ptr->words[0] |= (v << 10) & 0xfffffc00;
}

static inline uint32_t __attribute__((__const__))
message_info_get_msgBlockingSend(message_info_t message_info) {
    return (message_info.words[0] & 0x200) >> 9;
}

static inline message_info_t __attribute__((__const__))
message_info_set_msgBlockingSend(message_info_t message_info, uint32_t v) {
    message_info.words[0] &= ~0x200;
    message_info.words[0] |= (v << 9) & 0x200;
    return message_info;
}

static inline uint32_t __attribute__((__pure__))
message_info_ptr_get_msgBlockingSend(message_info_t *message_info_ptr) {
    return (message_info_ptr->words[0] & 0x200) >> 9;
}

static inline void
message_info_ptr_set_msgBlockingSend(message_info_t *message_info_ptr, uint32_t v) {
    message_info_ptr->words[0] &= ~0x200;
    message_info_ptr->words[0] |= (v << 9) & 0x200;
}

static inline uint32_t __attribute__((__const__))
message_info_get_msgExtraCaps(message_info_t message_info) {
    return (message_info.words[0] & 0x180) >> 7;
}

static inline message_info_t __attribute__((__const__))
message_info_set_msgExtraCaps(message_info_t message_info, uint32_t v) {
    message_info.words[0] &= ~0x180;
    message_info.words[0] |= (v << 7) & 0x180;
    return message_info;
}

static inline uint32_t __attribute__((__pure__))
message_info_ptr_get_msgExtraCaps(message_info_t *message_info_ptr) {
    return (message_info_ptr->words[0] & 0x180) >> 7;
}

static inline void
message_info_ptr_set_msgExtraCaps(message_info_t *message_info_ptr, uint32_t v) {
    message_info_ptr->words[0] &= ~0x180;
    message_info_ptr->words[0] |= (v << 7) & 0x180;
}

static inline uint32_t __attribute__((__const__))
message_info_get_msgLength(message_info_t message_info) {
    return (message_info.words[0] & 0x7f) >> 0;
}

static inline message_info_t __attribute__((__const__))
message_info_set_msgLength(message_info_t message_info, uint32_t v) {
    message_info.words[0] &= ~0x7f;
    message_info.words[0] |= (v << 0) & 0x7f;
    return message_info;
}

static inline uint32_t __attribute__((__pure__))
message_info_ptr_get_msgLength(message_info_t *message_info_ptr) {
    return (message_info_ptr->words[0] & 0x7f) >> 0;
}

static inline void
message_info_ptr_set_msgLength(message_info_t *message_info_ptr, uint32_t v) {
    message_info_ptr->words[0] &= ~0x7f;
    message_info_ptr->words[0] |= (v << 0) & 0x7f;
}

struct cap_rights{
    uint32_t words[1];
};
typedef struct cap_rights cap_rights_t;

static inline cap_rights_t __attribute__((__const__)) cap_rights_new(uint32_t capAllowGrant, uint32_t capAllowRead, uint32_t capAllowWrite) {
    cap_rights_t cap_rights;

    cap_rights.words[0] = 0;

    cap_rights.words[0] |= (capAllowGrant & 0x1) << 2;
    cap_rights.words[0] |= (capAllowRead & 0x1) << 1;
    cap_rights.words[0] |= (capAllowWrite & 0x1) << 0;

    return cap_rights;
}


static inline uint32_t __attribute__((__const__))
cap_rights_get_capAllowGrant(cap_rights_t cap_rights) {
    return (cap_rights.words[0] & 0x4) >> 2;
}

static inline cap_rights_t __attribute__((__const__))
cap_rights_set_capAllowGrant(cap_rights_t cap_rights, uint32_t v) {
    cap_rights.words[0] &= ~0x4;
    cap_rights.words[0] |= (v << 2) & 0x4;
    return cap_rights;
}

static inline uint32_t __attribute__((__pure__))
cap_rights_ptr_get_capAllowGrant(cap_rights_t *cap_rights_ptr) {
    return (cap_rights_ptr->words[0] & 0x4) >> 2;
}

static inline void
cap_rights_ptr_set_capAllowGrant(cap_rights_t *cap_rights_ptr, uint32_t v) {
    cap_rights_ptr->words[0] &= ~0x4;
    cap_rights_ptr->words[0] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
cap_rights_get_capAllowRead(cap_rights_t cap_rights) {
    return (cap_rights.words[0] & 0x2) >> 1;
}

static inline cap_rights_t __attribute__((__const__))
cap_rights_set_capAllowRead(cap_rights_t cap_rights, uint32_t v) {
    cap_rights.words[0] &= ~0x2;
    cap_rights.words[0] |= (v << 1) & 0x2;
    return cap_rights;
}

static inline uint32_t __attribute__((__pure__))
cap_rights_ptr_get_capAllowRead(cap_rights_t *cap_rights_ptr) {
    return (cap_rights_ptr->words[0] & 0x2) >> 1;
}

static inline void
cap_rights_ptr_set_capAllowRead(cap_rights_t *cap_rights_ptr, uint32_t v) {
    cap_rights_ptr->words[0] &= ~0x2;
    cap_rights_ptr->words[0] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
cap_rights_get_capAllowWrite(cap_rights_t cap_rights) {
    return (cap_rights.words[0] & 0x1) >> 0;
}

static inline cap_rights_t __attribute__((__const__))
cap_rights_set_capAllowWrite(cap_rights_t cap_rights, uint32_t v) {
    cap_rights.words[0] &= ~0x1;
    cap_rights.words[0] |= (v << 0) & 0x1;
    return cap_rights;
}

static inline uint32_t __attribute__((__pure__))
cap_rights_ptr_get_capAllowWrite(cap_rights_t *cap_rights_ptr) {
    return (cap_rights_ptr->words[0] & 0x1) >> 0;
}

static inline void
cap_rights_ptr_set_capAllowWrite(cap_rights_t *cap_rights_ptr, uint32_t v) {
    cap_rights_ptr->words[0] &= ~0x1;
    cap_rights_ptr->words[0] |= (v << 0) & 0x1;
}
# 25 "../../c-kernel/include/api/types.h" 2
# 1 "../../c-kernel/include/arch/arm/arch/api/types.h" 1



# 1 "../../c-kernel/include/api/objecttype.h" 1



enum api_object {
    Untyped,
    TCBObject,
    EndpointObject,
    AsyncEndpointObject,
    CapTableObject,
    nAPIObjects
};
typedef enum api_object api_object_t;
# 5 "../../c-kernel/include/arch/arm/arch/api/types.h" 2

enum _object {
    SmallPageObject = nAPIObjects,
    LargePageObject = nAPIObjects + 1,
    SectionObject = nAPIObjects + 2,
    SuperSectionObject = nAPIObjects + 3,
    PageTableObject = nAPIObjects + 4,
    PageDirectoryObject = nAPIObjects + 5,
    nObjects = nAPIObjects + 6
};
typedef enum _object object_t;
# 26 "../../c-kernel/include/api/types.h" 2





enum msgLimits {
    msgLengthBits = 7,
    msgExtraCapBits = 2
};





struct cap_transfer {
    cptr_t ctReceiveRoot;
    cptr_t ctReceiveIndex;
    unsigned int ctReceiveDepth;
};
typedef struct cap_transfer cap_transfer_t;

enum ctLimits {
    capTransferDataSize = 3
};

enum boot_region_type {
    BREmpty,
    BRRootTask,
    BRCapsOnly,
    BRL1Node,
    BRL2Node,
    BRFreeSlots,
    BRInitCaps,
    BRSmallBlocks,
    BRLargeBlocks,
    BRDeviceCaps
};
typedef enum boot_region_type boot_region_type_t;

struct boot_region {
    cptr_t brBase;
    cptr_t brEnd;
    boot_region_type_t brType;
    word_t brData;
};
typedef struct boot_region boot_region_t;

enum APICapLimit {
    nAPICaps = 10
};

static inline cap_rights_t
rightsFromWord(word_t w) {
    cap_rights_t cap_rights;

    cap_rights.words[0] = w;
    return cap_rights;
}

static inline word_t
wordFromRights(cap_rights_t cap_rights) {
    return cap_rights.words[0];
}

static inline cap_transfer_t
capTransferFromWords(word_t *wptr) {
    cap_transfer_t transfer;

    transfer.ctReceiveRoot = (cptr_t)wptr[0];
    transfer.ctReceiveIndex = (cptr_t)wptr[1];
    transfer.ctReceiveDepth = (unsigned int)wptr[2];
    return transfer;
}

static inline message_info_t
messageInfoFromWord(word_t w) {
    message_info_t mi;

    mi.words[0] = w;
    return mi;
}

static inline word_t
wordFromMessageInfo(message_info_t mi) {
    return mi.words[0];
}
# 7 "../../c-kernel/include/types.h" 2

# 1 "../../c-kernel/include/plat/imx31/plat/types.h" 1





typedef uint8_t interrupt_t;
# 9 "../../c-kernel/include/types.h" 2
# 1 "../../c-kernel/include/new_types.h" 1



# 1 "../../c-kernel/include/machine.h" 1



# 1 "../../c-kernel/include/arch/arm/arch/machine.h" 1
# 11 "../../c-kernel/include/arch/arm/arch/machine.h"
# 1 "../../c-kernel/include/arch/arm/arch/object/structures.h" 1
# 9 "../../c-kernel/include/arch/arm/arch/object/structures.h"
# 1 "./arch/object/structures_gen.h" 1




struct user_exception{
    uint32_t words[2];
};
typedef struct user_exception user_exception_t;

static inline user_exception_t __attribute__((__const__)) user_exception_new(uint32_t number, uint32_t code, uint32_t faultType) {
    user_exception_t user_exception;

    user_exception.words[0] = 0;
    user_exception.words[1] = 0;

    user_exception.words[1] |= number << 0;
    user_exception.words[0] |= (code & 0x1fffffff) << 3;
    user_exception.words[0] |= (faultType & 0x7) << 0;

    return user_exception;
}


static inline uint32_t __attribute__((__const__))
user_exception_get_number(user_exception_t user_exception) {
    return (user_exception.words[1] & 0xffffffff) >> 0;
}

static inline user_exception_t __attribute__((__const__))
user_exception_set_number(user_exception_t user_exception, uint32_t v) {
    user_exception.words[1] &= ~0xffffffff;
    user_exception.words[1] |= (v << 0) & 0xffffffff;
    return user_exception;
}

static inline uint32_t __attribute__((__pure__))
user_exception_ptr_get_number(user_exception_t *user_exception_ptr) {
    return (user_exception_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
user_exception_ptr_set_number(user_exception_t *user_exception_ptr, uint32_t v) {
    user_exception_ptr->words[1] &= ~0xffffffff;
    user_exception_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
user_exception_get_code(user_exception_t user_exception) {
    return (user_exception.words[0] & 0xfffffff8) >> 3;
}

static inline user_exception_t __attribute__((__const__))
user_exception_set_code(user_exception_t user_exception, uint32_t v) {
    user_exception.words[0] &= ~0xfffffff8;
    user_exception.words[0] |= (v << 3) & 0xfffffff8;
    return user_exception;
}

static inline uint32_t __attribute__((__pure__))
user_exception_ptr_get_code(user_exception_t *user_exception_ptr) {
    return (user_exception_ptr->words[0] & 0xfffffff8) >> 3;
}

static inline void
user_exception_ptr_set_code(user_exception_t *user_exception_ptr, uint32_t v) {
    user_exception_ptr->words[0] &= ~0xfffffff8;
    user_exception_ptr->words[0] |= (v << 3) & 0xfffffff8;
}

static inline uint32_t __attribute__((__const__))
user_exception_get_faultType(user_exception_t user_exception) {
    return (user_exception.words[0] & 0x7) >> 0;
}

static inline user_exception_t __attribute__((__const__))
user_exception_set_faultType(user_exception_t user_exception, uint32_t v) {
    user_exception.words[0] &= ~0x7;
    user_exception.words[0] |= (v << 0) & 0x7;
    return user_exception;
}

static inline uint32_t __attribute__((__pure__))
user_exception_ptr_get_faultType(user_exception_t *user_exception_ptr) {
    return (user_exception_ptr->words[0] & 0x7) >> 0;
}

static inline void
user_exception_ptr_set_faultType(user_exception_t *user_exception_ptr, uint32_t v) {
    user_exception_ptr->words[0] &= ~0x7;
    user_exception_ptr->words[0] |= (v << 0) & 0x7;
}

struct frame_cap{
    uint32_t words[2];
};
typedef struct frame_cap frame_cap_t;

static inline frame_cap_t __attribute__((__const__)) frame_cap_new(uint32_t capFMappedAddress, uint32_t capFSize, uint32_t capFMappedASIDLow, uint32_t capFVMRights, uint32_t capType, uint32_t capFMappedASIDHigh, uint32_t capFBasePtr) {
    frame_cap_t frame_cap;

    frame_cap.words[0] = 0;
    frame_cap.words[1] = 0;

    frame_cap.words[1] |= (capFMappedAddress & 0x3ffff) << 14;
    frame_cap.words[1] |= (capFSize & 0x3) << 12;
    frame_cap.words[1] |= (capFMappedASIDLow & 0x3ff) << 2;
    frame_cap.words[1] |= (capFVMRights & 0x3) << 0;
    frame_cap.words[0] |= (capType & 0xf) << 28;
    frame_cap.words[0] |= (capFMappedASIDHigh & 0xff) << 18;
    frame_cap.words[0] |= (capFBasePtr & 0xffffc000) >> 14;

    return frame_cap;
}


static inline uint32_t __attribute__((__const__))
frame_cap_get_capFMappedAddress(frame_cap_t frame_cap) {
    return (frame_cap.words[1] & 0xffffc000) >> 14;
}

static inline frame_cap_t __attribute__((__const__))
frame_cap_set_capFMappedAddress(frame_cap_t frame_cap, uint32_t v) {
    frame_cap.words[1] &= ~0xffffc000;
    frame_cap.words[1] |= (v << 14) & 0xffffc000;
    return frame_cap;
}

static inline uint32_t __attribute__((__pure__))
frame_cap_ptr_get_capFMappedAddress(frame_cap_t *frame_cap_ptr) {
    return (frame_cap_ptr->words[1] & 0xffffc000) >> 14;
}

static inline void
frame_cap_ptr_set_capFMappedAddress(frame_cap_t *frame_cap_ptr, uint32_t v) {
    frame_cap_ptr->words[1] &= ~0xffffc000;
    frame_cap_ptr->words[1] |= (v << 14) & 0xffffc000;
}

static inline uint32_t __attribute__((__const__))
frame_cap_get_capFSize(frame_cap_t frame_cap) {
    return (frame_cap.words[1] & 0x3000) >> 12;
}

static inline frame_cap_t __attribute__((__const__))
frame_cap_set_capFSize(frame_cap_t frame_cap, uint32_t v) {
    frame_cap.words[1] &= ~0x3000;
    frame_cap.words[1] |= (v << 12) & 0x3000;
    return frame_cap;
}

static inline uint32_t __attribute__((__pure__))
frame_cap_ptr_get_capFSize(frame_cap_t *frame_cap_ptr) {
    return (frame_cap_ptr->words[1] & 0x3000) >> 12;
}

static inline void
frame_cap_ptr_set_capFSize(frame_cap_t *frame_cap_ptr, uint32_t v) {
    frame_cap_ptr->words[1] &= ~0x3000;
    frame_cap_ptr->words[1] |= (v << 12) & 0x3000;
}

static inline uint32_t __attribute__((__const__))
frame_cap_get_capFMappedASIDLow(frame_cap_t frame_cap) {
    return (frame_cap.words[1] & 0xffc) >> 2;
}

static inline frame_cap_t __attribute__((__const__))
frame_cap_set_capFMappedASIDLow(frame_cap_t frame_cap, uint32_t v) {
    frame_cap.words[1] &= ~0xffc;
    frame_cap.words[1] |= (v << 2) & 0xffc;
    return frame_cap;
}

static inline uint32_t __attribute__((__pure__))
frame_cap_ptr_get_capFMappedASIDLow(frame_cap_t *frame_cap_ptr) {
    return (frame_cap_ptr->words[1] & 0xffc) >> 2;
}

static inline void
frame_cap_ptr_set_capFMappedASIDLow(frame_cap_t *frame_cap_ptr, uint32_t v) {
    frame_cap_ptr->words[1] &= ~0xffc;
    frame_cap_ptr->words[1] |= (v << 2) & 0xffc;
}

static inline uint32_t __attribute__((__const__))
frame_cap_get_capFVMRights(frame_cap_t frame_cap) {
    return (frame_cap.words[1] & 0x3) >> 0;
}

static inline frame_cap_t __attribute__((__const__))
frame_cap_set_capFVMRights(frame_cap_t frame_cap, uint32_t v) {
    frame_cap.words[1] &= ~0x3;
    frame_cap.words[1] |= (v << 0) & 0x3;
    return frame_cap;
}

static inline uint32_t __attribute__((__pure__))
frame_cap_ptr_get_capFVMRights(frame_cap_t *frame_cap_ptr) {
    return (frame_cap_ptr->words[1] & 0x3) >> 0;
}

static inline void
frame_cap_ptr_set_capFVMRights(frame_cap_t *frame_cap_ptr, uint32_t v) {
    frame_cap_ptr->words[1] &= ~0x3;
    frame_cap_ptr->words[1] |= (v << 0) & 0x3;
}

static inline uint32_t __attribute__((__const__))
frame_cap_get_capType(frame_cap_t frame_cap) {
    return (frame_cap.words[0] & 0xf0000000) >> 28;
}

static inline frame_cap_t __attribute__((__const__))
frame_cap_set_capType(frame_cap_t frame_cap, uint32_t v) {
    frame_cap.words[0] &= ~0xf0000000;
    frame_cap.words[0] |= (v << 28) & 0xf0000000;
    return frame_cap;
}

static inline uint32_t __attribute__((__pure__))
frame_cap_ptr_get_capType(frame_cap_t *frame_cap_ptr) {
    return (frame_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
frame_cap_ptr_set_capType(frame_cap_t *frame_cap_ptr, uint32_t v) {
    frame_cap_ptr->words[0] &= ~0xf0000000;
    frame_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
frame_cap_get_capFMappedASIDHigh(frame_cap_t frame_cap) {
    return (frame_cap.words[0] & 0x3fc0000) >> 18;
}

static inline frame_cap_t __attribute__((__const__))
frame_cap_set_capFMappedASIDHigh(frame_cap_t frame_cap, uint32_t v) {
    frame_cap.words[0] &= ~0x3fc0000;
    frame_cap.words[0] |= (v << 18) & 0x3fc0000;
    return frame_cap;
}

static inline uint32_t __attribute__((__pure__))
frame_cap_ptr_get_capFMappedASIDHigh(frame_cap_t *frame_cap_ptr) {
    return (frame_cap_ptr->words[0] & 0x3fc0000) >> 18;
}

static inline void
frame_cap_ptr_set_capFMappedASIDHigh(frame_cap_t *frame_cap_ptr, uint32_t v) {
    frame_cap_ptr->words[0] &= ~0x3fc0000;
    frame_cap_ptr->words[0] |= (v << 18) & 0x3fc0000;
}

static inline uint32_t __attribute__((__const__))
frame_cap_get_capFBasePtr(frame_cap_t frame_cap) {
    return (frame_cap.words[0] & 0x3ffff) << 14;
}

static inline frame_cap_t __attribute__((__const__))
frame_cap_set_capFBasePtr(frame_cap_t frame_cap, uint32_t v) {
    frame_cap.words[0] &= ~0x3ffff;
    frame_cap.words[0] |= (v >> 14) & 0x3ffff;
    return frame_cap;
}

static inline uint32_t __attribute__((__pure__))
frame_cap_ptr_get_capFBasePtr(frame_cap_t *frame_cap_ptr) {
    return (frame_cap_ptr->words[0] & 0x3ffff) << 14;
}

static inline void
frame_cap_ptr_set_capFBasePtr(frame_cap_t *frame_cap_ptr, uint32_t v) {
    frame_cap_ptr->words[0] &= ~0x3ffff;
    frame_cap_ptr->words[0] |= (v >> 14) & 0x3ffff;
}

struct cap_fault{
    uint32_t words[2];
};
typedef struct cap_fault cap_fault_t;

static inline cap_fault_t __attribute__((__const__)) cap_fault_new(uint32_t address, uint32_t inReceivePhase, uint32_t faultType) {
    cap_fault_t cap_fault;

    cap_fault.words[0] = 0;
    cap_fault.words[1] = 0;

    cap_fault.words[1] |= address << 0;
    cap_fault.words[0] |= (inReceivePhase & 0x1) << 31;
    cap_fault.words[0] |= (faultType & 0x7) << 0;

    return cap_fault;
}


static inline uint32_t __attribute__((__const__))
cap_fault_get_address(cap_fault_t cap_fault) {
    return (cap_fault.words[1] & 0xffffffff) >> 0;
}

static inline cap_fault_t __attribute__((__const__))
cap_fault_set_address(cap_fault_t cap_fault, uint32_t v) {
    cap_fault.words[1] &= ~0xffffffff;
    cap_fault.words[1] |= (v << 0) & 0xffffffff;
    return cap_fault;
}

static inline uint32_t __attribute__((__pure__))
cap_fault_ptr_get_address(cap_fault_t *cap_fault_ptr) {
    return (cap_fault_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
cap_fault_ptr_set_address(cap_fault_t *cap_fault_ptr, uint32_t v) {
    cap_fault_ptr->words[1] &= ~0xffffffff;
    cap_fault_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
cap_fault_get_inReceivePhase(cap_fault_t cap_fault) {
    return (cap_fault.words[0] & 0x80000000) >> 31;
}

static inline cap_fault_t __attribute__((__const__))
cap_fault_set_inReceivePhase(cap_fault_t cap_fault, uint32_t v) {
    cap_fault.words[0] &= ~0x80000000;
    cap_fault.words[0] |= (v << 31) & 0x80000000;
    return cap_fault;
}

static inline uint32_t __attribute__((__pure__))
cap_fault_ptr_get_inReceivePhase(cap_fault_t *cap_fault_ptr) {
    return (cap_fault_ptr->words[0] & 0x80000000) >> 31;
}

static inline void
cap_fault_ptr_set_inReceivePhase(cap_fault_t *cap_fault_ptr, uint32_t v) {
    cap_fault_ptr->words[0] &= ~0x80000000;
    cap_fault_ptr->words[0] |= (v << 31) & 0x80000000;
}

static inline uint32_t __attribute__((__const__))
cap_fault_get_faultType(cap_fault_t cap_fault) {
    return (cap_fault.words[0] & 0x7) >> 0;
}

static inline cap_fault_t __attribute__((__const__))
cap_fault_set_faultType(cap_fault_t cap_fault, uint32_t v) {
    cap_fault.words[0] &= ~0x7;
    cap_fault.words[0] |= (v << 0) & 0x7;
    return cap_fault;
}

static inline uint32_t __attribute__((__pure__))
cap_fault_ptr_get_faultType(cap_fault_t *cap_fault_ptr) {
    return (cap_fault_ptr->words[0] & 0x7) >> 0;
}

static inline void
cap_fault_ptr_set_faultType(cap_fault_t *cap_fault_ptr, uint32_t v) {
    cap_fault_ptr->words[0] &= ~0x7;
    cap_fault_ptr->words[0] |= (v << 0) & 0x7;
}

struct stored_hw_asid{
    uint32_t words[1];
};
typedef struct stored_hw_asid stored_hw_asid_t;

static inline stored_hw_asid_t __attribute__((__const__)) stored_hw_asid_new(uint32_t asid, uint32_t valid, uint32_t pdeType) {
    stored_hw_asid_t stored_hw_asid;

    stored_hw_asid.words[0] = 0;

    stored_hw_asid.words[0] |= (asid & 0xff) << 24;
    stored_hw_asid.words[0] |= (valid & 0x1) << 23;
    stored_hw_asid.words[0] |= (pdeType & 0x3) << 0;

    return stored_hw_asid;
}


static inline uint32_t __attribute__((__const__))
stored_hw_asid_get_asid(stored_hw_asid_t stored_hw_asid) {
    return (stored_hw_asid.words[0] & 0xff000000) >> 24;
}

static inline stored_hw_asid_t __attribute__((__const__))
stored_hw_asid_set_asid(stored_hw_asid_t stored_hw_asid, uint32_t v) {
    stored_hw_asid.words[0] &= ~0xff000000;
    stored_hw_asid.words[0] |= (v << 24) & 0xff000000;
    return stored_hw_asid;
}

static inline uint32_t __attribute__((__pure__))
stored_hw_asid_ptr_get_asid(stored_hw_asid_t *stored_hw_asid_ptr) {
    return (stored_hw_asid_ptr->words[0] & 0xff000000) >> 24;
}

static inline void
stored_hw_asid_ptr_set_asid(stored_hw_asid_t *stored_hw_asid_ptr, uint32_t v) {
    stored_hw_asid_ptr->words[0] &= ~0xff000000;
    stored_hw_asid_ptr->words[0] |= (v << 24) & 0xff000000;
}

static inline uint32_t __attribute__((__const__))
stored_hw_asid_get_valid(stored_hw_asid_t stored_hw_asid) {
    return (stored_hw_asid.words[0] & 0x800000) >> 23;
}

static inline stored_hw_asid_t __attribute__((__const__))
stored_hw_asid_set_valid(stored_hw_asid_t stored_hw_asid, uint32_t v) {
    stored_hw_asid.words[0] &= ~0x800000;
    stored_hw_asid.words[0] |= (v << 23) & 0x800000;
    return stored_hw_asid;
}

static inline uint32_t __attribute__((__pure__))
stored_hw_asid_ptr_get_valid(stored_hw_asid_t *stored_hw_asid_ptr) {
    return (stored_hw_asid_ptr->words[0] & 0x800000) >> 23;
}

static inline void
stored_hw_asid_ptr_set_valid(stored_hw_asid_t *stored_hw_asid_ptr, uint32_t v) {
    stored_hw_asid_ptr->words[0] &= ~0x800000;
    stored_hw_asid_ptr->words[0] |= (v << 23) & 0x800000;
}

static inline uint32_t __attribute__((__const__))
stored_hw_asid_get_pdeType(stored_hw_asid_t stored_hw_asid) {
    return (stored_hw_asid.words[0] & 0x3) >> 0;
}

static inline stored_hw_asid_t __attribute__((__const__))
stored_hw_asid_set_pdeType(stored_hw_asid_t stored_hw_asid, uint32_t v) {
    stored_hw_asid.words[0] &= ~0x3;
    stored_hw_asid.words[0] |= (v << 0) & 0x3;
    return stored_hw_asid;
}

static inline uint32_t __attribute__((__pure__))
stored_hw_asid_ptr_get_pdeType(stored_hw_asid_t *stored_hw_asid_ptr) {
    return (stored_hw_asid_ptr->words[0] & 0x3) >> 0;
}

static inline void
stored_hw_asid_ptr_set_pdeType(stored_hw_asid_t *stored_hw_asid_ptr, uint32_t v) {
    stored_hw_asid_ptr->words[0] &= ~0x3;
    stored_hw_asid_ptr->words[0] |= (v << 0) & 0x3;
}

struct null_cap{
    uint32_t words[2];
};
typedef struct null_cap null_cap_t;

static inline null_cap_t __attribute__((__const__)) null_cap_new(uint32_t capType) {
    null_cap_t null_cap;

    null_cap.words[0] = 0;
    null_cap.words[1] = 0;

    null_cap.words[0] |= (capType & 0xf) << 28;

    return null_cap;
}


static inline uint32_t __attribute__((__const__))
null_cap_get_capType(null_cap_t null_cap) {
    return (null_cap.words[0] & 0xf0000000) >> 28;
}

static inline null_cap_t __attribute__((__const__))
null_cap_set_capType(null_cap_t null_cap, uint32_t v) {
    null_cap.words[0] &= ~0xf0000000;
    null_cap.words[0] |= (v << 28) & 0xf0000000;
    return null_cap;
}

static inline uint32_t __attribute__((__pure__))
null_cap_ptr_get_capType(null_cap_t *null_cap_ptr) {
    return (null_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
null_cap_ptr_set_capType(null_cap_t *null_cap_ptr, uint32_t v) {
    null_cap_ptr->words[0] &= ~0xf0000000;
    null_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

struct null_fault{
    uint32_t words[2];
};
typedef struct null_fault null_fault_t;

static inline null_fault_t __attribute__((__const__)) null_fault_new(uint32_t faultType) {
    null_fault_t null_fault;

    null_fault.words[0] = 0;
    null_fault.words[1] = 0;

    null_fault.words[0] |= (faultType & 0x7) << 0;

    return null_fault;
}


static inline uint32_t __attribute__((__const__))
null_fault_get_faultType(null_fault_t null_fault) {
    return (null_fault.words[0] & 0x7) >> 0;
}

static inline null_fault_t __attribute__((__const__))
null_fault_set_faultType(null_fault_t null_fault, uint32_t v) {
    null_fault.words[0] &= ~0x7;
    null_fault.words[0] |= (v << 0) & 0x7;
    return null_fault;
}

static inline uint32_t __attribute__((__pure__))
null_fault_ptr_get_faultType(null_fault_t *null_fault_ptr) {
    return (null_fault_ptr->words[0] & 0x7) >> 0;
}

static inline void
null_fault_ptr_set_faultType(null_fault_t *null_fault_ptr, uint32_t v) {
    null_fault_ptr->words[0] &= ~0x7;
    null_fault_ptr->words[0] |= (v << 0) & 0x7;
}

struct async_endpoint{
    uint32_t words[4];
};
typedef struct async_endpoint async_endpoint_t;

static inline async_endpoint_t __attribute__((__const__)) async_endpoint_new(uint32_t aepData, uint32_t aepMsgIdentifier, uint32_t aepQueue_head, uint32_t aepQueue_tail, uint32_t state) {
    async_endpoint_t async_endpoint;

    async_endpoint.words[0] = 0;
    async_endpoint.words[1] = 0;
    async_endpoint.words[2] = 0;
    async_endpoint.words[3] = 0;

    async_endpoint.words[3] |= aepData << 0;
    async_endpoint.words[2] |= aepMsgIdentifier << 0;
    async_endpoint.words[1] |= (aepQueue_head & 0xfffffff0) >> 0;
    async_endpoint.words[0] |= (aepQueue_tail & 0xfffffff0) >> 0;
    async_endpoint.words[0] |= (state & 0x3) << 0;

    return async_endpoint;
}


static inline uint32_t __attribute__((__const__))
async_endpoint_get_aepData(async_endpoint_t async_endpoint) {
    return (async_endpoint.words[3] & 0xffffffff) >> 0;
}

static inline async_endpoint_t __attribute__((__const__))
async_endpoint_set_aepData(async_endpoint_t async_endpoint, uint32_t v) {
    async_endpoint.words[3] &= ~0xffffffff;
    async_endpoint.words[3] |= (v << 0) & 0xffffffff;
    return async_endpoint;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_ptr_get_aepData(async_endpoint_t *async_endpoint_ptr) {
    return (async_endpoint_ptr->words[3] & 0xffffffff) >> 0;
}

static inline void
async_endpoint_ptr_set_aepData(async_endpoint_t *async_endpoint_ptr, uint32_t v) {
    async_endpoint_ptr->words[3] &= ~0xffffffff;
    async_endpoint_ptr->words[3] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
async_endpoint_get_aepMsgIdentifier(async_endpoint_t async_endpoint) {
    return (async_endpoint.words[2] & 0xffffffff) >> 0;
}

static inline async_endpoint_t __attribute__((__const__))
async_endpoint_set_aepMsgIdentifier(async_endpoint_t async_endpoint, uint32_t v) {
    async_endpoint.words[2] &= ~0xffffffff;
    async_endpoint.words[2] |= (v << 0) & 0xffffffff;
    return async_endpoint;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_ptr_get_aepMsgIdentifier(async_endpoint_t *async_endpoint_ptr) {
    return (async_endpoint_ptr->words[2] & 0xffffffff) >> 0;
}

static inline void
async_endpoint_ptr_set_aepMsgIdentifier(async_endpoint_t *async_endpoint_ptr, uint32_t v) {
    async_endpoint_ptr->words[2] &= ~0xffffffff;
    async_endpoint_ptr->words[2] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
async_endpoint_get_aepQueue_head(async_endpoint_t async_endpoint) {
    return (async_endpoint.words[1] & 0xfffffff0) << 0;
}

static inline async_endpoint_t __attribute__((__const__))
async_endpoint_set_aepQueue_head(async_endpoint_t async_endpoint, uint32_t v) {
    async_endpoint.words[1] &= ~0xfffffff0;
    async_endpoint.words[1] |= (v >> 0) & 0xfffffff0;
    return async_endpoint;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_ptr_get_aepQueue_head(async_endpoint_t *async_endpoint_ptr) {
    return (async_endpoint_ptr->words[1] & 0xfffffff0) << 0;
}

static inline void
async_endpoint_ptr_set_aepQueue_head(async_endpoint_t *async_endpoint_ptr, uint32_t v) {
    async_endpoint_ptr->words[1] &= ~0xfffffff0;
    async_endpoint_ptr->words[1] |= (v >> 0) & 0xfffffff0;
}

static inline uint32_t __attribute__((__const__))
async_endpoint_get_aepQueue_tail(async_endpoint_t async_endpoint) {
    return (async_endpoint.words[0] & 0xfffffff0) << 0;
}

static inline async_endpoint_t __attribute__((__const__))
async_endpoint_set_aepQueue_tail(async_endpoint_t async_endpoint, uint32_t v) {
    async_endpoint.words[0] &= ~0xfffffff0;
    async_endpoint.words[0] |= (v >> 0) & 0xfffffff0;
    return async_endpoint;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_ptr_get_aepQueue_tail(async_endpoint_t *async_endpoint_ptr) {
    return (async_endpoint_ptr->words[0] & 0xfffffff0) << 0;
}

static inline void
async_endpoint_ptr_set_aepQueue_tail(async_endpoint_t *async_endpoint_ptr, uint32_t v) {
    async_endpoint_ptr->words[0] &= ~0xfffffff0;
    async_endpoint_ptr->words[0] |= (v >> 0) & 0xfffffff0;
}

static inline uint32_t __attribute__((__const__))
async_endpoint_get_state(async_endpoint_t async_endpoint) {
    return (async_endpoint.words[0] & 0x3) >> 0;
}

static inline async_endpoint_t __attribute__((__const__))
async_endpoint_set_state(async_endpoint_t async_endpoint, uint32_t v) {
    async_endpoint.words[0] &= ~0x3;
    async_endpoint.words[0] |= (v << 0) & 0x3;
    return async_endpoint;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_ptr_get_state(async_endpoint_t *async_endpoint_ptr) {
    return (async_endpoint_ptr->words[0] & 0x3) >> 0;
}

static inline void
async_endpoint_ptr_set_state(async_endpoint_t *async_endpoint_ptr, uint32_t v) {
    async_endpoint_ptr->words[0] &= ~0x3;
    async_endpoint_ptr->words[0] |= (v << 0) & 0x3;
}

struct guard_mismatch{
    uint32_t words[2];
};
typedef struct guard_mismatch guard_mismatch_t;

static inline guard_mismatch_t __attribute__((__const__)) guard_mismatch_new(uint32_t guardFound, uint32_t bitsLeft, uint32_t bitsFound, uint32_t lufType) {
    guard_mismatch_t guard_mismatch;

    guard_mismatch.words[0] = 0;
    guard_mismatch.words[1] = 0;

    guard_mismatch.words[1] |= guardFound << 0;
    guard_mismatch.words[0] |= (bitsLeft & 0x1f) << 7;
    guard_mismatch.words[0] |= (bitsFound & 0x1f) << 2;
    guard_mismatch.words[0] |= (lufType & 0x3) << 0;

    return guard_mismatch;
}


static inline uint32_t __attribute__((__const__))
guard_mismatch_get_guardFound(guard_mismatch_t guard_mismatch) {
    return (guard_mismatch.words[1] & 0xffffffff) >> 0;
}

static inline guard_mismatch_t __attribute__((__const__))
guard_mismatch_set_guardFound(guard_mismatch_t guard_mismatch, uint32_t v) {
    guard_mismatch.words[1] &= ~0xffffffff;
    guard_mismatch.words[1] |= (v << 0) & 0xffffffff;
    return guard_mismatch;
}

static inline uint32_t __attribute__((__pure__))
guard_mismatch_ptr_get_guardFound(guard_mismatch_t *guard_mismatch_ptr) {
    return (guard_mismatch_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
guard_mismatch_ptr_set_guardFound(guard_mismatch_t *guard_mismatch_ptr, uint32_t v) {
    guard_mismatch_ptr->words[1] &= ~0xffffffff;
    guard_mismatch_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
guard_mismatch_get_bitsLeft(guard_mismatch_t guard_mismatch) {
    return (guard_mismatch.words[0] & 0xf80) >> 7;
}

static inline guard_mismatch_t __attribute__((__const__))
guard_mismatch_set_bitsLeft(guard_mismatch_t guard_mismatch, uint32_t v) {
    guard_mismatch.words[0] &= ~0xf80;
    guard_mismatch.words[0] |= (v << 7) & 0xf80;
    return guard_mismatch;
}

static inline uint32_t __attribute__((__pure__))
guard_mismatch_ptr_get_bitsLeft(guard_mismatch_t *guard_mismatch_ptr) {
    return (guard_mismatch_ptr->words[0] & 0xf80) >> 7;
}

static inline void
guard_mismatch_ptr_set_bitsLeft(guard_mismatch_t *guard_mismatch_ptr, uint32_t v) {
    guard_mismatch_ptr->words[0] &= ~0xf80;
    guard_mismatch_ptr->words[0] |= (v << 7) & 0xf80;
}

static inline uint32_t __attribute__((__const__))
guard_mismatch_get_bitsFound(guard_mismatch_t guard_mismatch) {
    return (guard_mismatch.words[0] & 0x7c) >> 2;
}

static inline guard_mismatch_t __attribute__((__const__))
guard_mismatch_set_bitsFound(guard_mismatch_t guard_mismatch, uint32_t v) {
    guard_mismatch.words[0] &= ~0x7c;
    guard_mismatch.words[0] |= (v << 2) & 0x7c;
    return guard_mismatch;
}

static inline uint32_t __attribute__((__pure__))
guard_mismatch_ptr_get_bitsFound(guard_mismatch_t *guard_mismatch_ptr) {
    return (guard_mismatch_ptr->words[0] & 0x7c) >> 2;
}

static inline void
guard_mismatch_ptr_set_bitsFound(guard_mismatch_t *guard_mismatch_ptr, uint32_t v) {
    guard_mismatch_ptr->words[0] &= ~0x7c;
    guard_mismatch_ptr->words[0] |= (v << 2) & 0x7c;
}

static inline uint32_t __attribute__((__const__))
guard_mismatch_get_lufType(guard_mismatch_t guard_mismatch) {
    return (guard_mismatch.words[0] & 0x3) >> 0;
}

static inline guard_mismatch_t __attribute__((__const__))
guard_mismatch_set_lufType(guard_mismatch_t guard_mismatch, uint32_t v) {
    guard_mismatch.words[0] &= ~0x3;
    guard_mismatch.words[0] |= (v << 0) & 0x3;
    return guard_mismatch;
}

static inline uint32_t __attribute__((__pure__))
guard_mismatch_ptr_get_lufType(guard_mismatch_t *guard_mismatch_ptr) {
    return (guard_mismatch_ptr->words[0] & 0x3) >> 0;
}

static inline void
guard_mismatch_ptr_set_lufType(guard_mismatch_t *guard_mismatch_ptr, uint32_t v) {
    guard_mismatch_ptr->words[0] &= ~0x3;
    guard_mismatch_ptr->words[0] |= (v << 0) & 0x3;
}

struct untyped_cap{
    uint32_t words[2];
};
typedef struct untyped_cap untyped_cap_t;

static inline untyped_cap_t __attribute__((__const__)) untyped_cap_new(uint32_t capBlockSize, uint32_t capType, uint32_t capPtr) {
    untyped_cap_t untyped_cap;

    untyped_cap.words[0] = 0;
    untyped_cap.words[1] = 0;

    untyped_cap.words[1] |= (capBlockSize & 0x1f) << 0;
    untyped_cap.words[0] |= (capType & 0xf) << 28;
    untyped_cap.words[0] |= (capPtr & 0xfffffff0) >> 4;

    return untyped_cap;
}


static inline uint32_t __attribute__((__const__))
untyped_cap_get_capBlockSize(untyped_cap_t untyped_cap) {
    return (untyped_cap.words[1] & 0x1f) >> 0;
}

static inline untyped_cap_t __attribute__((__const__))
untyped_cap_set_capBlockSize(untyped_cap_t untyped_cap, uint32_t v) {
    untyped_cap.words[1] &= ~0x1f;
    untyped_cap.words[1] |= (v << 0) & 0x1f;
    return untyped_cap;
}

static inline uint32_t __attribute__((__pure__))
untyped_cap_ptr_get_capBlockSize(untyped_cap_t *untyped_cap_ptr) {
    return (untyped_cap_ptr->words[1] & 0x1f) >> 0;
}

static inline void
untyped_cap_ptr_set_capBlockSize(untyped_cap_t *untyped_cap_ptr, uint32_t v) {
    untyped_cap_ptr->words[1] &= ~0x1f;
    untyped_cap_ptr->words[1] |= (v << 0) & 0x1f;
}

static inline uint32_t __attribute__((__const__))
untyped_cap_get_capType(untyped_cap_t untyped_cap) {
    return (untyped_cap.words[0] & 0xf0000000) >> 28;
}

static inline untyped_cap_t __attribute__((__const__))
untyped_cap_set_capType(untyped_cap_t untyped_cap, uint32_t v) {
    untyped_cap.words[0] &= ~0xf0000000;
    untyped_cap.words[0] |= (v << 28) & 0xf0000000;
    return untyped_cap;
}

static inline uint32_t __attribute__((__pure__))
untyped_cap_ptr_get_capType(untyped_cap_t *untyped_cap_ptr) {
    return (untyped_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
untyped_cap_ptr_set_capType(untyped_cap_t *untyped_cap_ptr, uint32_t v) {
    untyped_cap_ptr->words[0] &= ~0xf0000000;
    untyped_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
untyped_cap_get_capPtr(untyped_cap_t untyped_cap) {
    return (untyped_cap.words[0] & 0xfffffff) << 4;
}

static inline untyped_cap_t __attribute__((__const__))
untyped_cap_set_capPtr(untyped_cap_t untyped_cap, uint32_t v) {
    untyped_cap.words[0] &= ~0xfffffff;
    untyped_cap.words[0] |= (v >> 4) & 0xfffffff;
    return untyped_cap;
}

static inline uint32_t __attribute__((__pure__))
untyped_cap_ptr_get_capPtr(untyped_cap_t *untyped_cap_ptr) {
    return (untyped_cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
untyped_cap_ptr_set_capPtr(untyped_cap_t *untyped_cap_ptr, uint32_t v) {
    untyped_cap_ptr->words[0] &= ~0xfffffff;
    untyped_cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

struct endpoint_cap{
    uint32_t words[2];
};
typedef struct endpoint_cap endpoint_cap_t;

static inline endpoint_cap_t __attribute__((__const__)) endpoint_cap_new(uint32_t capEPBadge, uint32_t capCanGrant, uint32_t capCanSend, uint32_t capCanReceive, uint32_t capType, uint32_t capEPPtr) {
    endpoint_cap_t endpoint_cap;

    endpoint_cap.words[0] = 0;
    endpoint_cap.words[1] = 0;

    endpoint_cap.words[1] |= (capEPBadge & 0x1fffffff) << 3;
    endpoint_cap.words[1] |= (capCanGrant & 0x1) << 2;
    endpoint_cap.words[1] |= (capCanSend & 0x1) << 1;
    endpoint_cap.words[1] |= (capCanReceive & 0x1) << 0;
    endpoint_cap.words[0] |= (capType & 0xf) << 28;
    endpoint_cap.words[0] |= (capEPPtr & 0xfffffff0) >> 4;

    return endpoint_cap;
}


static inline uint32_t __attribute__((__const__))
endpoint_cap_get_capEPBadge(endpoint_cap_t endpoint_cap) {
    return (endpoint_cap.words[1] & 0xfffffff8) >> 3;
}

static inline endpoint_cap_t __attribute__((__const__))
endpoint_cap_set_capEPBadge(endpoint_cap_t endpoint_cap, uint32_t v) {
    endpoint_cap.words[1] &= ~0xfffffff8;
    endpoint_cap.words[1] |= (v << 3) & 0xfffffff8;
    return endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
endpoint_cap_ptr_get_capEPBadge(endpoint_cap_t *endpoint_cap_ptr) {
    return (endpoint_cap_ptr->words[1] & 0xfffffff8) >> 3;
}

static inline void
endpoint_cap_ptr_set_capEPBadge(endpoint_cap_t *endpoint_cap_ptr, uint32_t v) {
    endpoint_cap_ptr->words[1] &= ~0xfffffff8;
    endpoint_cap_ptr->words[1] |= (v << 3) & 0xfffffff8;
}

static inline uint32_t __attribute__((__const__))
endpoint_cap_get_capCanGrant(endpoint_cap_t endpoint_cap) {
    return (endpoint_cap.words[1] & 0x4) >> 2;
}

static inline endpoint_cap_t __attribute__((__const__))
endpoint_cap_set_capCanGrant(endpoint_cap_t endpoint_cap, uint32_t v) {
    endpoint_cap.words[1] &= ~0x4;
    endpoint_cap.words[1] |= (v << 2) & 0x4;
    return endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
endpoint_cap_ptr_get_capCanGrant(endpoint_cap_t *endpoint_cap_ptr) {
    return (endpoint_cap_ptr->words[1] & 0x4) >> 2;
}

static inline void
endpoint_cap_ptr_set_capCanGrant(endpoint_cap_t *endpoint_cap_ptr, uint32_t v) {
    endpoint_cap_ptr->words[1] &= ~0x4;
    endpoint_cap_ptr->words[1] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
endpoint_cap_get_capCanSend(endpoint_cap_t endpoint_cap) {
    return (endpoint_cap.words[1] & 0x2) >> 1;
}

static inline endpoint_cap_t __attribute__((__const__))
endpoint_cap_set_capCanSend(endpoint_cap_t endpoint_cap, uint32_t v) {
    endpoint_cap.words[1] &= ~0x2;
    endpoint_cap.words[1] |= (v << 1) & 0x2;
    return endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
endpoint_cap_ptr_get_capCanSend(endpoint_cap_t *endpoint_cap_ptr) {
    return (endpoint_cap_ptr->words[1] & 0x2) >> 1;
}

static inline void
endpoint_cap_ptr_set_capCanSend(endpoint_cap_t *endpoint_cap_ptr, uint32_t v) {
    endpoint_cap_ptr->words[1] &= ~0x2;
    endpoint_cap_ptr->words[1] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
endpoint_cap_get_capCanReceive(endpoint_cap_t endpoint_cap) {
    return (endpoint_cap.words[1] & 0x1) >> 0;
}

static inline endpoint_cap_t __attribute__((__const__))
endpoint_cap_set_capCanReceive(endpoint_cap_t endpoint_cap, uint32_t v) {
    endpoint_cap.words[1] &= ~0x1;
    endpoint_cap.words[1] |= (v << 0) & 0x1;
    return endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
endpoint_cap_ptr_get_capCanReceive(endpoint_cap_t *endpoint_cap_ptr) {
    return (endpoint_cap_ptr->words[1] & 0x1) >> 0;
}

static inline void
endpoint_cap_ptr_set_capCanReceive(endpoint_cap_t *endpoint_cap_ptr, uint32_t v) {
    endpoint_cap_ptr->words[1] &= ~0x1;
    endpoint_cap_ptr->words[1] |= (v << 0) & 0x1;
}

static inline uint32_t __attribute__((__const__))
endpoint_cap_get_capType(endpoint_cap_t endpoint_cap) {
    return (endpoint_cap.words[0] & 0xf0000000) >> 28;
}

static inline endpoint_cap_t __attribute__((__const__))
endpoint_cap_set_capType(endpoint_cap_t endpoint_cap, uint32_t v) {
    endpoint_cap.words[0] &= ~0xf0000000;
    endpoint_cap.words[0] |= (v << 28) & 0xf0000000;
    return endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
endpoint_cap_ptr_get_capType(endpoint_cap_t *endpoint_cap_ptr) {
    return (endpoint_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
endpoint_cap_ptr_set_capType(endpoint_cap_t *endpoint_cap_ptr, uint32_t v) {
    endpoint_cap_ptr->words[0] &= ~0xf0000000;
    endpoint_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
endpoint_cap_get_capEPPtr(endpoint_cap_t endpoint_cap) {
    return (endpoint_cap.words[0] & 0xfffffff) << 4;
}

static inline endpoint_cap_t __attribute__((__const__))
endpoint_cap_set_capEPPtr(endpoint_cap_t endpoint_cap, uint32_t v) {
    endpoint_cap.words[0] &= ~0xfffffff;
    endpoint_cap.words[0] |= (v >> 4) & 0xfffffff;
    return endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
endpoint_cap_ptr_get_capEPPtr(endpoint_cap_t *endpoint_cap_ptr) {
    return (endpoint_cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
endpoint_cap_ptr_set_capEPPtr(endpoint_cap_t *endpoint_cap_ptr, uint32_t v) {
    endpoint_cap_ptr->words[0] &= ~0xfffffff;
    endpoint_cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

struct vm_fault{
    uint32_t words[2];
};
typedef struct vm_fault vm_fault_t;

static inline vm_fault_t __attribute__((__const__)) vm_fault_new(uint32_t address, uint32_t FSR, uint32_t instructionFault, uint32_t faultType) {
    vm_fault_t vm_fault;

    vm_fault.words[0] = 0;
    vm_fault.words[1] = 0;

    vm_fault.words[1] |= address << 0;
    vm_fault.words[0] |= (FSR & 0xfff) << 20;
    vm_fault.words[0] |= (instructionFault & 0x1) << 19;
    vm_fault.words[0] |= (faultType & 0x7) << 0;

    return vm_fault;
}


static inline uint32_t __attribute__((__const__))
vm_fault_get_address(vm_fault_t vm_fault) {
    return (vm_fault.words[1] & 0xffffffff) >> 0;
}

static inline vm_fault_t __attribute__((__const__))
vm_fault_set_address(vm_fault_t vm_fault, uint32_t v) {
    vm_fault.words[1] &= ~0xffffffff;
    vm_fault.words[1] |= (v << 0) & 0xffffffff;
    return vm_fault;
}

static inline uint32_t __attribute__((__pure__))
vm_fault_ptr_get_address(vm_fault_t *vm_fault_ptr) {
    return (vm_fault_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
vm_fault_ptr_set_address(vm_fault_t *vm_fault_ptr, uint32_t v) {
    vm_fault_ptr->words[1] &= ~0xffffffff;
    vm_fault_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
vm_fault_get_FSR(vm_fault_t vm_fault) {
    return (vm_fault.words[0] & 0xfff00000) >> 20;
}

static inline vm_fault_t __attribute__((__const__))
vm_fault_set_FSR(vm_fault_t vm_fault, uint32_t v) {
    vm_fault.words[0] &= ~0xfff00000;
    vm_fault.words[0] |= (v << 20) & 0xfff00000;
    return vm_fault;
}

static inline uint32_t __attribute__((__pure__))
vm_fault_ptr_get_FSR(vm_fault_t *vm_fault_ptr) {
    return (vm_fault_ptr->words[0] & 0xfff00000) >> 20;
}

static inline void
vm_fault_ptr_set_FSR(vm_fault_t *vm_fault_ptr, uint32_t v) {
    vm_fault_ptr->words[0] &= ~0xfff00000;
    vm_fault_ptr->words[0] |= (v << 20) & 0xfff00000;
}

static inline uint32_t __attribute__((__const__))
vm_fault_get_instructionFault(vm_fault_t vm_fault) {
    return (vm_fault.words[0] & 0x80000) >> 19;
}

static inline vm_fault_t __attribute__((__const__))
vm_fault_set_instructionFault(vm_fault_t vm_fault, uint32_t v) {
    vm_fault.words[0] &= ~0x80000;
    vm_fault.words[0] |= (v << 19) & 0x80000;
    return vm_fault;
}

static inline uint32_t __attribute__((__pure__))
vm_fault_ptr_get_instructionFault(vm_fault_t *vm_fault_ptr) {
    return (vm_fault_ptr->words[0] & 0x80000) >> 19;
}

static inline void
vm_fault_ptr_set_instructionFault(vm_fault_t *vm_fault_ptr, uint32_t v) {
    vm_fault_ptr->words[0] &= ~0x80000;
    vm_fault_ptr->words[0] |= (v << 19) & 0x80000;
}

static inline uint32_t __attribute__((__const__))
vm_fault_get_faultType(vm_fault_t vm_fault) {
    return (vm_fault.words[0] & 0x7) >> 0;
}

static inline vm_fault_t __attribute__((__const__))
vm_fault_set_faultType(vm_fault_t vm_fault, uint32_t v) {
    vm_fault.words[0] &= ~0x7;
    vm_fault.words[0] |= (v << 0) & 0x7;
    return vm_fault;
}

static inline uint32_t __attribute__((__pure__))
vm_fault_ptr_get_faultType(vm_fault_t *vm_fault_ptr) {
    return (vm_fault_ptr->words[0] & 0x7) >> 0;
}

static inline void
vm_fault_ptr_set_faultType(vm_fault_t *vm_fault_ptr, uint32_t v) {
    vm_fault_ptr->words[0] &= ~0x7;
    vm_fault_ptr->words[0] |= (v << 0) & 0x7;
}

struct invalid_root{
    uint32_t words[2];
};
typedef struct invalid_root invalid_root_t;

static inline invalid_root_t __attribute__((__const__)) invalid_root_new(uint32_t lufType) {
    invalid_root_t invalid_root;

    invalid_root.words[0] = 0;
    invalid_root.words[1] = 0;

    invalid_root.words[0] |= (lufType & 0x3) << 0;

    return invalid_root;
}


static inline uint32_t __attribute__((__const__))
invalid_root_get_lufType(invalid_root_t invalid_root) {
    return (invalid_root.words[0] & 0x3) >> 0;
}

static inline invalid_root_t __attribute__((__const__))
invalid_root_set_lufType(invalid_root_t invalid_root, uint32_t v) {
    invalid_root.words[0] &= ~0x3;
    invalid_root.words[0] |= (v << 0) & 0x3;
    return invalid_root;
}

static inline uint32_t __attribute__((__pure__))
invalid_root_ptr_get_lufType(invalid_root_t *invalid_root_ptr) {
    return (invalid_root_ptr->words[0] & 0x3) >> 0;
}

static inline void
invalid_root_ptr_set_lufType(invalid_root_t *invalid_root_ptr, uint32_t v) {
    invalid_root_ptr->words[0] &= ~0x3;
    invalid_root_ptr->words[0] |= (v << 0) & 0x3;
}

struct pde_coarse{
    uint32_t words[1];
};
typedef struct pde_coarse pde_coarse_t;

static inline pde_coarse_t __attribute__((__const__)) pde_coarse_new(uint32_t address, uint32_t P, uint32_t Domain, uint32_t pdeType) {
    pde_coarse_t pde_coarse;

    pde_coarse.words[0] = 0;

    pde_coarse.words[0] |= (address & 0xfffffc00) >> 0;
    pde_coarse.words[0] |= (P & 0x1) << 9;
    pde_coarse.words[0] |= (Domain & 0xf) << 5;
    pde_coarse.words[0] |= (pdeType & 0x3) << 0;

    return pde_coarse;
}


static inline uint32_t __attribute__((__const__))
pde_coarse_get_address(pde_coarse_t pde_coarse) {
    return (pde_coarse.words[0] & 0xfffffc00) << 0;
}

static inline pde_coarse_t __attribute__((__const__))
pde_coarse_set_address(pde_coarse_t pde_coarse, uint32_t v) {
    pde_coarse.words[0] &= ~0xfffffc00;
    pde_coarse.words[0] |= (v >> 0) & 0xfffffc00;
    return pde_coarse;
}

static inline uint32_t __attribute__((__pure__))
pde_coarse_ptr_get_address(pde_coarse_t *pde_coarse_ptr) {
    return (pde_coarse_ptr->words[0] & 0xfffffc00) << 0;
}

static inline void
pde_coarse_ptr_set_address(pde_coarse_t *pde_coarse_ptr, uint32_t v) {
    pde_coarse_ptr->words[0] &= ~0xfffffc00;
    pde_coarse_ptr->words[0] |= (v >> 0) & 0xfffffc00;
}

static inline uint32_t __attribute__((__const__))
pde_coarse_get_P(pde_coarse_t pde_coarse) {
    return (pde_coarse.words[0] & 0x200) >> 9;
}

static inline pde_coarse_t __attribute__((__const__))
pde_coarse_set_P(pde_coarse_t pde_coarse, uint32_t v) {
    pde_coarse.words[0] &= ~0x200;
    pde_coarse.words[0] |= (v << 9) & 0x200;
    return pde_coarse;
}

static inline uint32_t __attribute__((__pure__))
pde_coarse_ptr_get_P(pde_coarse_t *pde_coarse_ptr) {
    return (pde_coarse_ptr->words[0] & 0x200) >> 9;
}

static inline void
pde_coarse_ptr_set_P(pde_coarse_t *pde_coarse_ptr, uint32_t v) {
    pde_coarse_ptr->words[0] &= ~0x200;
    pde_coarse_ptr->words[0] |= (v << 9) & 0x200;
}

static inline uint32_t __attribute__((__const__))
pde_coarse_get_Domain(pde_coarse_t pde_coarse) {
    return (pde_coarse.words[0] & 0x1e0) >> 5;
}

static inline pde_coarse_t __attribute__((__const__))
pde_coarse_set_Domain(pde_coarse_t pde_coarse, uint32_t v) {
    pde_coarse.words[0] &= ~0x1e0;
    pde_coarse.words[0] |= (v << 5) & 0x1e0;
    return pde_coarse;
}

static inline uint32_t __attribute__((__pure__))
pde_coarse_ptr_get_Domain(pde_coarse_t *pde_coarse_ptr) {
    return (pde_coarse_ptr->words[0] & 0x1e0) >> 5;
}

static inline void
pde_coarse_ptr_set_Domain(pde_coarse_t *pde_coarse_ptr, uint32_t v) {
    pde_coarse_ptr->words[0] &= ~0x1e0;
    pde_coarse_ptr->words[0] |= (v << 5) & 0x1e0;
}

static inline uint32_t __attribute__((__const__))
pde_coarse_get_pdeType(pde_coarse_t pde_coarse) {
    return (pde_coarse.words[0] & 0x3) >> 0;
}

static inline pde_coarse_t __attribute__((__const__))
pde_coarse_set_pdeType(pde_coarse_t pde_coarse, uint32_t v) {
    pde_coarse.words[0] &= ~0x3;
    pde_coarse.words[0] |= (v << 0) & 0x3;
    return pde_coarse;
}

static inline uint32_t __attribute__((__pure__))
pde_coarse_ptr_get_pdeType(pde_coarse_t *pde_coarse_ptr) {
    return (pde_coarse_ptr->words[0] & 0x3) >> 0;
}

static inline void
pde_coarse_ptr_set_pdeType(pde_coarse_t *pde_coarse_ptr, uint32_t v) {
    pde_coarse_ptr->words[0] &= ~0x3;
    pde_coarse_ptr->words[0] |= (v << 0) & 0x3;
}

struct pte_large{
    uint32_t words[1];
};
typedef struct pte_large pte_large_t;

static inline pte_large_t __attribute__((__const__)) pte_large_new(uint32_t address, uint32_t XN, uint32_t TEX, uint32_t nG, uint32_t S, uint32_t APX, uint32_t AP, uint32_t C, uint32_t B, uint32_t pteType) {
    pte_large_t pte_large;

    pte_large.words[0] = 0;

    pte_large.words[0] |= (address & 0xffff0000) >> 0;
    pte_large.words[0] |= (XN & 0x1) << 15;
    pte_large.words[0] |= (TEX & 0x7) << 12;
    pte_large.words[0] |= (nG & 0x1) << 11;
    pte_large.words[0] |= (S & 0x1) << 10;
    pte_large.words[0] |= (APX & 0x1) << 9;
    pte_large.words[0] |= (AP & 0x3) << 4;
    pte_large.words[0] |= (C & 0x1) << 3;
    pte_large.words[0] |= (B & 0x1) << 2;
    pte_large.words[0] |= (pteType & 0x3) << 0;

    return pte_large;
}


static inline uint32_t __attribute__((__const__))
pte_large_get_address(pte_large_t pte_large) {
    return (pte_large.words[0] & 0xffff0000) << 0;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_address(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0xffff0000;
    pte_large.words[0] |= (v >> 0) & 0xffff0000;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_address(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0xffff0000) << 0;
}

static inline void
pte_large_ptr_set_address(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0xffff0000;
    pte_large_ptr->words[0] |= (v >> 0) & 0xffff0000;
}

static inline uint32_t __attribute__((__const__))
pte_large_get_XN(pte_large_t pte_large) {
    return (pte_large.words[0] & 0x8000) >> 15;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_XN(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0x8000;
    pte_large.words[0] |= (v << 15) & 0x8000;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_XN(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0x8000) >> 15;
}

static inline void
pte_large_ptr_set_XN(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0x8000;
    pte_large_ptr->words[0] |= (v << 15) & 0x8000;
}

static inline uint32_t __attribute__((__const__))
pte_large_get_TEX(pte_large_t pte_large) {
    return (pte_large.words[0] & 0x7000) >> 12;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_TEX(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0x7000;
    pte_large.words[0] |= (v << 12) & 0x7000;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_TEX(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0x7000) >> 12;
}

static inline void
pte_large_ptr_set_TEX(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0x7000;
    pte_large_ptr->words[0] |= (v << 12) & 0x7000;
}

static inline uint32_t __attribute__((__const__))
pte_large_get_nG(pte_large_t pte_large) {
    return (pte_large.words[0] & 0x800) >> 11;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_nG(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0x800;
    pte_large.words[0] |= (v << 11) & 0x800;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_nG(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0x800) >> 11;
}

static inline void
pte_large_ptr_set_nG(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0x800;
    pte_large_ptr->words[0] |= (v << 11) & 0x800;
}

static inline uint32_t __attribute__((__const__))
pte_large_get_S(pte_large_t pte_large) {
    return (pte_large.words[0] & 0x400) >> 10;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_S(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0x400;
    pte_large.words[0] |= (v << 10) & 0x400;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_S(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0x400) >> 10;
}

static inline void
pte_large_ptr_set_S(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0x400;
    pte_large_ptr->words[0] |= (v << 10) & 0x400;
}

static inline uint32_t __attribute__((__const__))
pte_large_get_APX(pte_large_t pte_large) {
    return (pte_large.words[0] & 0x200) >> 9;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_APX(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0x200;
    pte_large.words[0] |= (v << 9) & 0x200;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_APX(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0x200) >> 9;
}

static inline void
pte_large_ptr_set_APX(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0x200;
    pte_large_ptr->words[0] |= (v << 9) & 0x200;
}

static inline uint32_t __attribute__((__const__))
pte_large_get_AP(pte_large_t pte_large) {
    return (pte_large.words[0] & 0x30) >> 4;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_AP(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0x30;
    pte_large.words[0] |= (v << 4) & 0x30;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_AP(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0x30) >> 4;
}

static inline void
pte_large_ptr_set_AP(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0x30;
    pte_large_ptr->words[0] |= (v << 4) & 0x30;
}

static inline uint32_t __attribute__((__const__))
pte_large_get_C(pte_large_t pte_large) {
    return (pte_large.words[0] & 0x8) >> 3;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_C(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0x8;
    pte_large.words[0] |= (v << 3) & 0x8;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_C(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0x8) >> 3;
}

static inline void
pte_large_ptr_set_C(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0x8;
    pte_large_ptr->words[0] |= (v << 3) & 0x8;
}

static inline uint32_t __attribute__((__const__))
pte_large_get_B(pte_large_t pte_large) {
    return (pte_large.words[0] & 0x4) >> 2;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_B(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0x4;
    pte_large.words[0] |= (v << 2) & 0x4;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_B(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0x4) >> 2;
}

static inline void
pte_large_ptr_set_B(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0x4;
    pte_large_ptr->words[0] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
pte_large_get_pteType(pte_large_t pte_large) {
    return (pte_large.words[0] & 0x3) >> 0;
}

static inline pte_large_t __attribute__((__const__))
pte_large_set_pteType(pte_large_t pte_large, uint32_t v) {
    pte_large.words[0] &= ~0x3;
    pte_large.words[0] |= (v << 0) & 0x3;
    return pte_large;
}

static inline uint32_t __attribute__((__pure__))
pte_large_ptr_get_pteType(pte_large_t *pte_large_ptr) {
    return (pte_large_ptr->words[0] & 0x3) >> 0;
}

static inline void
pte_large_ptr_set_pteType(pte_large_t *pte_large_ptr, uint32_t v) {
    pte_large_ptr->words[0] &= ~0x3;
    pte_large_ptr->words[0] |= (v << 0) & 0x3;
}

struct page_directory_cap{
    uint32_t words[2];
};
typedef struct page_directory_cap page_directory_cap_t;

static inline page_directory_cap_t __attribute__((__const__)) page_directory_cap_new(uint32_t capPDIsMapped, uint32_t capPDMappedASID, uint32_t capType, uint32_t capPDBasePtr) {
    page_directory_cap_t page_directory_cap;

    page_directory_cap.words[0] = 0;
    page_directory_cap.words[1] = 0;

    page_directory_cap.words[1] |= (capPDIsMapped & 0x1) << 18;
    page_directory_cap.words[1] |= (capPDMappedASID & 0x3ffff) << 0;
    page_directory_cap.words[0] |= (capType & 0xf) << 28;
    page_directory_cap.words[0] |= (capPDBasePtr & 0xffffc000) >> 14;

    return page_directory_cap;
}


static inline uint32_t __attribute__((__const__))
page_directory_cap_get_capPDIsMapped(page_directory_cap_t page_directory_cap) {
    return (page_directory_cap.words[1] & 0x40000) >> 18;
}

static inline page_directory_cap_t __attribute__((__const__))
page_directory_cap_set_capPDIsMapped(page_directory_cap_t page_directory_cap, uint32_t v) {
    page_directory_cap.words[1] &= ~0x40000;
    page_directory_cap.words[1] |= (v << 18) & 0x40000;
    return page_directory_cap;
}

static inline uint32_t __attribute__((__pure__))
page_directory_cap_ptr_get_capPDIsMapped(page_directory_cap_t *page_directory_cap_ptr) {
    return (page_directory_cap_ptr->words[1] & 0x40000) >> 18;
}

static inline void
page_directory_cap_ptr_set_capPDIsMapped(page_directory_cap_t *page_directory_cap_ptr, uint32_t v) {
    page_directory_cap_ptr->words[1] &= ~0x40000;
    page_directory_cap_ptr->words[1] |= (v << 18) & 0x40000;
}

static inline uint32_t __attribute__((__const__))
page_directory_cap_get_capPDMappedASID(page_directory_cap_t page_directory_cap) {
    return (page_directory_cap.words[1] & 0x3ffff) >> 0;
}

static inline page_directory_cap_t __attribute__((__const__))
page_directory_cap_set_capPDMappedASID(page_directory_cap_t page_directory_cap, uint32_t v) {
    page_directory_cap.words[1] &= ~0x3ffff;
    page_directory_cap.words[1] |= (v << 0) & 0x3ffff;
    return page_directory_cap;
}

static inline uint32_t __attribute__((__pure__))
page_directory_cap_ptr_get_capPDMappedASID(page_directory_cap_t *page_directory_cap_ptr) {
    return (page_directory_cap_ptr->words[1] & 0x3ffff) >> 0;
}

static inline void
page_directory_cap_ptr_set_capPDMappedASID(page_directory_cap_t *page_directory_cap_ptr, uint32_t v) {
    page_directory_cap_ptr->words[1] &= ~0x3ffff;
    page_directory_cap_ptr->words[1] |= (v << 0) & 0x3ffff;
}

static inline uint32_t __attribute__((__const__))
page_directory_cap_get_capType(page_directory_cap_t page_directory_cap) {
    return (page_directory_cap.words[0] & 0xf0000000) >> 28;
}

static inline page_directory_cap_t __attribute__((__const__))
page_directory_cap_set_capType(page_directory_cap_t page_directory_cap, uint32_t v) {
    page_directory_cap.words[0] &= ~0xf0000000;
    page_directory_cap.words[0] |= (v << 28) & 0xf0000000;
    return page_directory_cap;
}

static inline uint32_t __attribute__((__pure__))
page_directory_cap_ptr_get_capType(page_directory_cap_t *page_directory_cap_ptr) {
    return (page_directory_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
page_directory_cap_ptr_set_capType(page_directory_cap_t *page_directory_cap_ptr, uint32_t v) {
    page_directory_cap_ptr->words[0] &= ~0xf0000000;
    page_directory_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
page_directory_cap_get_capPDBasePtr(page_directory_cap_t page_directory_cap) {
    return (page_directory_cap.words[0] & 0x3ffff) << 14;
}

static inline page_directory_cap_t __attribute__((__const__))
page_directory_cap_set_capPDBasePtr(page_directory_cap_t page_directory_cap, uint32_t v) {
    page_directory_cap.words[0] &= ~0x3ffff;
    page_directory_cap.words[0] |= (v >> 14) & 0x3ffff;
    return page_directory_cap;
}

static inline uint32_t __attribute__((__pure__))
page_directory_cap_ptr_get_capPDBasePtr(page_directory_cap_t *page_directory_cap_ptr) {
    return (page_directory_cap_ptr->words[0] & 0x3ffff) << 14;
}

static inline void
page_directory_cap_ptr_set_capPDBasePtr(page_directory_cap_t *page_directory_cap_ptr, uint32_t v) {
    page_directory_cap_ptr->words[0] &= ~0x3ffff;
    page_directory_cap_ptr->words[0] |= (v >> 14) & 0x3ffff;
}

struct small_frame_cap{
    uint32_t words[2];
};
typedef struct small_frame_cap small_frame_cap_t;

static inline small_frame_cap_t __attribute__((__const__)) small_frame_cap_new(uint32_t capFMappedAddress, uint32_t capFMappedASIDLow, uint32_t capFVMRights, uint32_t capType, uint32_t capFMappedASIDHigh, uint32_t capFBasePtr) {
    small_frame_cap_t small_frame_cap;

    small_frame_cap.words[0] = 0;
    small_frame_cap.words[1] = 0;

    small_frame_cap.words[1] |= (capFMappedAddress & 0xfffff) << 12;
    small_frame_cap.words[1] |= (capFMappedASIDLow & 0x3ff) << 2;
    small_frame_cap.words[1] |= (capFVMRights & 0x3) << 0;
    small_frame_cap.words[0] |= (capType & 0xf) << 28;
    small_frame_cap.words[0] |= (capFMappedASIDHigh & 0xff) << 20;
    small_frame_cap.words[0] |= (capFBasePtr & 0xfffff000) >> 12;

    return small_frame_cap;
}


static inline uint32_t __attribute__((__const__))
small_frame_cap_get_capFMappedAddress(small_frame_cap_t small_frame_cap) {
    return (small_frame_cap.words[1] & 0xfffff000) >> 12;
}

static inline small_frame_cap_t __attribute__((__const__))
small_frame_cap_set_capFMappedAddress(small_frame_cap_t small_frame_cap, uint32_t v) {
    small_frame_cap.words[1] &= ~0xfffff000;
    small_frame_cap.words[1] |= (v << 12) & 0xfffff000;
    return small_frame_cap;
}

static inline uint32_t __attribute__((__pure__))
small_frame_cap_ptr_get_capFMappedAddress(small_frame_cap_t *small_frame_cap_ptr) {
    return (small_frame_cap_ptr->words[1] & 0xfffff000) >> 12;
}

static inline void
small_frame_cap_ptr_set_capFMappedAddress(small_frame_cap_t *small_frame_cap_ptr, uint32_t v) {
    small_frame_cap_ptr->words[1] &= ~0xfffff000;
    small_frame_cap_ptr->words[1] |= (v << 12) & 0xfffff000;
}

static inline uint32_t __attribute__((__const__))
small_frame_cap_get_capFMappedASIDLow(small_frame_cap_t small_frame_cap) {
    return (small_frame_cap.words[1] & 0xffc) >> 2;
}

static inline small_frame_cap_t __attribute__((__const__))
small_frame_cap_set_capFMappedASIDLow(small_frame_cap_t small_frame_cap, uint32_t v) {
    small_frame_cap.words[1] &= ~0xffc;
    small_frame_cap.words[1] |= (v << 2) & 0xffc;
    return small_frame_cap;
}

static inline uint32_t __attribute__((__pure__))
small_frame_cap_ptr_get_capFMappedASIDLow(small_frame_cap_t *small_frame_cap_ptr) {
    return (small_frame_cap_ptr->words[1] & 0xffc) >> 2;
}

static inline void
small_frame_cap_ptr_set_capFMappedASIDLow(small_frame_cap_t *small_frame_cap_ptr, uint32_t v) {
    small_frame_cap_ptr->words[1] &= ~0xffc;
    small_frame_cap_ptr->words[1] |= (v << 2) & 0xffc;
}

static inline uint32_t __attribute__((__const__))
small_frame_cap_get_capFVMRights(small_frame_cap_t small_frame_cap) {
    return (small_frame_cap.words[1] & 0x3) >> 0;
}

static inline small_frame_cap_t __attribute__((__const__))
small_frame_cap_set_capFVMRights(small_frame_cap_t small_frame_cap, uint32_t v) {
    small_frame_cap.words[1] &= ~0x3;
    small_frame_cap.words[1] |= (v << 0) & 0x3;
    return small_frame_cap;
}

static inline uint32_t __attribute__((__pure__))
small_frame_cap_ptr_get_capFVMRights(small_frame_cap_t *small_frame_cap_ptr) {
    return (small_frame_cap_ptr->words[1] & 0x3) >> 0;
}

static inline void
small_frame_cap_ptr_set_capFVMRights(small_frame_cap_t *small_frame_cap_ptr, uint32_t v) {
    small_frame_cap_ptr->words[1] &= ~0x3;
    small_frame_cap_ptr->words[1] |= (v << 0) & 0x3;
}

static inline uint32_t __attribute__((__const__))
small_frame_cap_get_capType(small_frame_cap_t small_frame_cap) {
    return (small_frame_cap.words[0] & 0xf0000000) >> 28;
}

static inline small_frame_cap_t __attribute__((__const__))
small_frame_cap_set_capType(small_frame_cap_t small_frame_cap, uint32_t v) {
    small_frame_cap.words[0] &= ~0xf0000000;
    small_frame_cap.words[0] |= (v << 28) & 0xf0000000;
    return small_frame_cap;
}

static inline uint32_t __attribute__((__pure__))
small_frame_cap_ptr_get_capType(small_frame_cap_t *small_frame_cap_ptr) {
    return (small_frame_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
small_frame_cap_ptr_set_capType(small_frame_cap_t *small_frame_cap_ptr, uint32_t v) {
    small_frame_cap_ptr->words[0] &= ~0xf0000000;
    small_frame_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
small_frame_cap_get_capFMappedASIDHigh(small_frame_cap_t small_frame_cap) {
    return (small_frame_cap.words[0] & 0xff00000) >> 20;
}

static inline small_frame_cap_t __attribute__((__const__))
small_frame_cap_set_capFMappedASIDHigh(small_frame_cap_t small_frame_cap, uint32_t v) {
    small_frame_cap.words[0] &= ~0xff00000;
    small_frame_cap.words[0] |= (v << 20) & 0xff00000;
    return small_frame_cap;
}

static inline uint32_t __attribute__((__pure__))
small_frame_cap_ptr_get_capFMappedASIDHigh(small_frame_cap_t *small_frame_cap_ptr) {
    return (small_frame_cap_ptr->words[0] & 0xff00000) >> 20;
}

static inline void
small_frame_cap_ptr_set_capFMappedASIDHigh(small_frame_cap_t *small_frame_cap_ptr, uint32_t v) {
    small_frame_cap_ptr->words[0] &= ~0xff00000;
    small_frame_cap_ptr->words[0] |= (v << 20) & 0xff00000;
}

static inline uint32_t __attribute__((__const__))
small_frame_cap_get_capFBasePtr(small_frame_cap_t small_frame_cap) {
    return (small_frame_cap.words[0] & 0xfffff) << 12;
}

static inline small_frame_cap_t __attribute__((__const__))
small_frame_cap_set_capFBasePtr(small_frame_cap_t small_frame_cap, uint32_t v) {
    small_frame_cap.words[0] &= ~0xfffff;
    small_frame_cap.words[0] |= (v >> 12) & 0xfffff;
    return small_frame_cap;
}

static inline uint32_t __attribute__((__pure__))
small_frame_cap_ptr_get_capFBasePtr(small_frame_cap_t *small_frame_cap_ptr) {
    return (small_frame_cap_ptr->words[0] & 0xfffff) << 12;
}

static inline void
small_frame_cap_ptr_set_capFBasePtr(small_frame_cap_t *small_frame_cap_ptr, uint32_t v) {
    small_frame_cap_ptr->words[0] &= ~0xfffff;
    small_frame_cap_ptr->words[0] |= (v >> 12) & 0xfffff;
}

struct cnode_cap{
    uint32_t words[2];
};
typedef struct cnode_cap cnode_cap_t;

static inline cnode_cap_t __attribute__((__const__)) cnode_cap_new(uint32_t capRightsMask, uint32_t capCNodeCanRead, uint32_t capCNode32MinusGuardSize, uint32_t capCNode32MinusRadixGuardSize, uint32_t capCNodeGuard, uint32_t capType, uint32_t capCNodeCanModify, uint32_t capCNodePtr) {
    cnode_cap_t cnode_cap;

    cnode_cap.words[0] = 0;
    cnode_cap.words[1] = 0;

    cnode_cap.words[1] |= (capRightsMask & 0x7) << 29;
    cnode_cap.words[1] |= (capCNodeCanRead & 0x1) << 28;
    cnode_cap.words[1] |= (capCNode32MinusGuardSize & 0x1f) << 23;
    cnode_cap.words[1] |= (capCNode32MinusRadixGuardSize & 0x1f) << 18;
    cnode_cap.words[1] |= (capCNodeGuard & 0x3ffff) << 0;
    cnode_cap.words[0] |= (capType & 0xf) << 28;
    cnode_cap.words[0] |= (capCNodeCanModify & 0x1) << 27;
    cnode_cap.words[0] |= (capCNodePtr & 0xffffffe0) >> 5;

    return cnode_cap;
}


static inline uint32_t __attribute__((__const__))
cnode_cap_get_capRightsMask(cnode_cap_t cnode_cap) {
    return (cnode_cap.words[1] & 0xe0000000) >> 29;
}

static inline cnode_cap_t __attribute__((__const__))
cnode_cap_set_capRightsMask(cnode_cap_t cnode_cap, uint32_t v) {
    cnode_cap.words[1] &= ~0xe0000000;
    cnode_cap.words[1] |= (v << 29) & 0xe0000000;
    return cnode_cap;
}

static inline uint32_t __attribute__((__pure__))
cnode_cap_ptr_get_capRightsMask(cnode_cap_t *cnode_cap_ptr) {
    return (cnode_cap_ptr->words[1] & 0xe0000000) >> 29;
}

static inline void
cnode_cap_ptr_set_capRightsMask(cnode_cap_t *cnode_cap_ptr, uint32_t v) {
    cnode_cap_ptr->words[1] &= ~0xe0000000;
    cnode_cap_ptr->words[1] |= (v << 29) & 0xe0000000;
}

static inline uint32_t __attribute__((__const__))
cnode_cap_get_capCNodeCanRead(cnode_cap_t cnode_cap) {
    return (cnode_cap.words[1] & 0x10000000) >> 28;
}

static inline cnode_cap_t __attribute__((__const__))
cnode_cap_set_capCNodeCanRead(cnode_cap_t cnode_cap, uint32_t v) {
    cnode_cap.words[1] &= ~0x10000000;
    cnode_cap.words[1] |= (v << 28) & 0x10000000;
    return cnode_cap;
}

static inline uint32_t __attribute__((__pure__))
cnode_cap_ptr_get_capCNodeCanRead(cnode_cap_t *cnode_cap_ptr) {
    return (cnode_cap_ptr->words[1] & 0x10000000) >> 28;
}

static inline void
cnode_cap_ptr_set_capCNodeCanRead(cnode_cap_t *cnode_cap_ptr, uint32_t v) {
    cnode_cap_ptr->words[1] &= ~0x10000000;
    cnode_cap_ptr->words[1] |= (v << 28) & 0x10000000;
}

static inline uint32_t __attribute__((__const__))
cnode_cap_get_capCNode32MinusGuardSize(cnode_cap_t cnode_cap) {
    return (cnode_cap.words[1] & 0xf800000) >> 23;
}

static inline cnode_cap_t __attribute__((__const__))
cnode_cap_set_capCNode32MinusGuardSize(cnode_cap_t cnode_cap, uint32_t v) {
    cnode_cap.words[1] &= ~0xf800000;
    cnode_cap.words[1] |= (v << 23) & 0xf800000;
    return cnode_cap;
}

static inline uint32_t __attribute__((__pure__))
cnode_cap_ptr_get_capCNode32MinusGuardSize(cnode_cap_t *cnode_cap_ptr) {
    return (cnode_cap_ptr->words[1] & 0xf800000) >> 23;
}

static inline void
cnode_cap_ptr_set_capCNode32MinusGuardSize(cnode_cap_t *cnode_cap_ptr, uint32_t v) {
    cnode_cap_ptr->words[1] &= ~0xf800000;
    cnode_cap_ptr->words[1] |= (v << 23) & 0xf800000;
}

static inline uint32_t __attribute__((__const__))
cnode_cap_get_capCNode32MinusRadixGuardSize(cnode_cap_t cnode_cap) {
    return (cnode_cap.words[1] & 0x7c0000) >> 18;
}

static inline cnode_cap_t __attribute__((__const__))
cnode_cap_set_capCNode32MinusRadixGuardSize(cnode_cap_t cnode_cap, uint32_t v) {
    cnode_cap.words[1] &= ~0x7c0000;
    cnode_cap.words[1] |= (v << 18) & 0x7c0000;
    return cnode_cap;
}

static inline uint32_t __attribute__((__pure__))
cnode_cap_ptr_get_capCNode32MinusRadixGuardSize(cnode_cap_t *cnode_cap_ptr) {
    return (cnode_cap_ptr->words[1] & 0x7c0000) >> 18;
}

static inline void
cnode_cap_ptr_set_capCNode32MinusRadixGuardSize(cnode_cap_t *cnode_cap_ptr, uint32_t v) {
    cnode_cap_ptr->words[1] &= ~0x7c0000;
    cnode_cap_ptr->words[1] |= (v << 18) & 0x7c0000;
}

static inline uint32_t __attribute__((__const__))
cnode_cap_get_capCNodeGuard(cnode_cap_t cnode_cap) {
    return (cnode_cap.words[1] & 0x3ffff) >> 0;
}

static inline cnode_cap_t __attribute__((__const__))
cnode_cap_set_capCNodeGuard(cnode_cap_t cnode_cap, uint32_t v) {
    cnode_cap.words[1] &= ~0x3ffff;
    cnode_cap.words[1] |= (v << 0) & 0x3ffff;
    return cnode_cap;
}

static inline uint32_t __attribute__((__pure__))
cnode_cap_ptr_get_capCNodeGuard(cnode_cap_t *cnode_cap_ptr) {
    return (cnode_cap_ptr->words[1] & 0x3ffff) >> 0;
}

static inline void
cnode_cap_ptr_set_capCNodeGuard(cnode_cap_t *cnode_cap_ptr, uint32_t v) {
    cnode_cap_ptr->words[1] &= ~0x3ffff;
    cnode_cap_ptr->words[1] |= (v << 0) & 0x3ffff;
}

static inline uint32_t __attribute__((__const__))
cnode_cap_get_capType(cnode_cap_t cnode_cap) {
    return (cnode_cap.words[0] & 0xf0000000) >> 28;
}

static inline cnode_cap_t __attribute__((__const__))
cnode_cap_set_capType(cnode_cap_t cnode_cap, uint32_t v) {
    cnode_cap.words[0] &= ~0xf0000000;
    cnode_cap.words[0] |= (v << 28) & 0xf0000000;
    return cnode_cap;
}

static inline uint32_t __attribute__((__pure__))
cnode_cap_ptr_get_capType(cnode_cap_t *cnode_cap_ptr) {
    return (cnode_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cnode_cap_ptr_set_capType(cnode_cap_t *cnode_cap_ptr, uint32_t v) {
    cnode_cap_ptr->words[0] &= ~0xf0000000;
    cnode_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cnode_cap_get_capCNodeCanModify(cnode_cap_t cnode_cap) {
    return (cnode_cap.words[0] & 0x8000000) >> 27;
}

static inline cnode_cap_t __attribute__((__const__))
cnode_cap_set_capCNodeCanModify(cnode_cap_t cnode_cap, uint32_t v) {
    cnode_cap.words[0] &= ~0x8000000;
    cnode_cap.words[0] |= (v << 27) & 0x8000000;
    return cnode_cap;
}

static inline uint32_t __attribute__((__pure__))
cnode_cap_ptr_get_capCNodeCanModify(cnode_cap_t *cnode_cap_ptr) {
    return (cnode_cap_ptr->words[0] & 0x8000000) >> 27;
}

static inline void
cnode_cap_ptr_set_capCNodeCanModify(cnode_cap_t *cnode_cap_ptr, uint32_t v) {
    cnode_cap_ptr->words[0] &= ~0x8000000;
    cnode_cap_ptr->words[0] |= (v << 27) & 0x8000000;
}

static inline uint32_t __attribute__((__const__))
cnode_cap_get_capCNodePtr(cnode_cap_t cnode_cap) {
    return (cnode_cap.words[0] & 0x7ffffff) << 5;
}

static inline cnode_cap_t __attribute__((__const__))
cnode_cap_set_capCNodePtr(cnode_cap_t cnode_cap, uint32_t v) {
    cnode_cap.words[0] &= ~0x7ffffff;
    cnode_cap.words[0] |= (v >> 5) & 0x7ffffff;
    return cnode_cap;
}

static inline uint32_t __attribute__((__pure__))
cnode_cap_ptr_get_capCNodePtr(cnode_cap_t *cnode_cap_ptr) {
    return (cnode_cap_ptr->words[0] & 0x7ffffff) << 5;
}

static inline void
cnode_cap_ptr_set_capCNodePtr(cnode_cap_t *cnode_cap_ptr, uint32_t v) {
    cnode_cap_ptr->words[0] &= ~0x7ffffff;
    cnode_cap_ptr->words[0] |= (v >> 5) & 0x7ffffff;
}

struct depth_mismatch{
    uint32_t words[2];
};
typedef struct depth_mismatch depth_mismatch_t;

static inline depth_mismatch_t __attribute__((__const__)) depth_mismatch_new(uint32_t bitsFound, uint32_t bitsLeft, uint32_t lufType) {
    depth_mismatch_t depth_mismatch;

    depth_mismatch.words[0] = 0;
    depth_mismatch.words[1] = 0;

    depth_mismatch.words[0] |= (bitsFound & 0x1f) << 7;
    depth_mismatch.words[0] |= (bitsLeft & 0x1f) << 2;
    depth_mismatch.words[0] |= (lufType & 0x3) << 0;

    return depth_mismatch;
}


static inline uint32_t __attribute__((__const__))
depth_mismatch_get_bitsFound(depth_mismatch_t depth_mismatch) {
    return (depth_mismatch.words[0] & 0xf80) >> 7;
}

static inline depth_mismatch_t __attribute__((__const__))
depth_mismatch_set_bitsFound(depth_mismatch_t depth_mismatch, uint32_t v) {
    depth_mismatch.words[0] &= ~0xf80;
    depth_mismatch.words[0] |= (v << 7) & 0xf80;
    return depth_mismatch;
}

static inline uint32_t __attribute__((__pure__))
depth_mismatch_ptr_get_bitsFound(depth_mismatch_t *depth_mismatch_ptr) {
    return (depth_mismatch_ptr->words[0] & 0xf80) >> 7;
}

static inline void
depth_mismatch_ptr_set_bitsFound(depth_mismatch_t *depth_mismatch_ptr, uint32_t v) {
    depth_mismatch_ptr->words[0] &= ~0xf80;
    depth_mismatch_ptr->words[0] |= (v << 7) & 0xf80;
}

static inline uint32_t __attribute__((__const__))
depth_mismatch_get_bitsLeft(depth_mismatch_t depth_mismatch) {
    return (depth_mismatch.words[0] & 0x7c) >> 2;
}

static inline depth_mismatch_t __attribute__((__const__))
depth_mismatch_set_bitsLeft(depth_mismatch_t depth_mismatch, uint32_t v) {
    depth_mismatch.words[0] &= ~0x7c;
    depth_mismatch.words[0] |= (v << 2) & 0x7c;
    return depth_mismatch;
}

static inline uint32_t __attribute__((__pure__))
depth_mismatch_ptr_get_bitsLeft(depth_mismatch_t *depth_mismatch_ptr) {
    return (depth_mismatch_ptr->words[0] & 0x7c) >> 2;
}

static inline void
depth_mismatch_ptr_set_bitsLeft(depth_mismatch_t *depth_mismatch_ptr, uint32_t v) {
    depth_mismatch_ptr->words[0] &= ~0x7c;
    depth_mismatch_ptr->words[0] |= (v << 2) & 0x7c;
}

static inline uint32_t __attribute__((__const__))
depth_mismatch_get_lufType(depth_mismatch_t depth_mismatch) {
    return (depth_mismatch.words[0] & 0x3) >> 0;
}

static inline depth_mismatch_t __attribute__((__const__))
depth_mismatch_set_lufType(depth_mismatch_t depth_mismatch, uint32_t v) {
    depth_mismatch.words[0] &= ~0x3;
    depth_mismatch.words[0] |= (v << 0) & 0x3;
    return depth_mismatch;
}

static inline uint32_t __attribute__((__pure__))
depth_mismatch_ptr_get_lufType(depth_mismatch_t *depth_mismatch_ptr) {
    return (depth_mismatch_ptr->words[0] & 0x3) >> 0;
}

static inline void
depth_mismatch_ptr_set_lufType(depth_mismatch_t *depth_mismatch_ptr, uint32_t v) {
    depth_mismatch_ptr->words[0] &= ~0x3;
    depth_mismatch_ptr->words[0] |= (v << 0) & 0x3;
}

struct thread_cap{
    uint32_t words[2];
};
typedef struct thread_cap thread_cap_t;

static inline thread_cap_t __attribute__((__const__)) thread_cap_new(uint32_t capTCBCanGrant, uint32_t capTCBCanWrite, uint32_t capTCBCanRead, uint32_t capType, uint32_t capTCBPtr) {
    thread_cap_t thread_cap;

    thread_cap.words[0] = 0;
    thread_cap.words[1] = 0;

    thread_cap.words[1] |= (capTCBCanGrant & 0x1) << 2;
    thread_cap.words[1] |= (capTCBCanWrite & 0x1) << 1;
    thread_cap.words[1] |= (capTCBCanRead & 0x1) << 0;
    thread_cap.words[0] |= (capType & 0xf) << 28;
    thread_cap.words[0] |= (capTCBPtr & 0xfffffff0) >> 4;

    return thread_cap;
}


static inline uint32_t __attribute__((__const__))
thread_cap_get_capTCBCanGrant(thread_cap_t thread_cap) {
    return (thread_cap.words[1] & 0x4) >> 2;
}

static inline thread_cap_t __attribute__((__const__))
thread_cap_set_capTCBCanGrant(thread_cap_t thread_cap, uint32_t v) {
    thread_cap.words[1] &= ~0x4;
    thread_cap.words[1] |= (v << 2) & 0x4;
    return thread_cap;
}

static inline uint32_t __attribute__((__pure__))
thread_cap_ptr_get_capTCBCanGrant(thread_cap_t *thread_cap_ptr) {
    return (thread_cap_ptr->words[1] & 0x4) >> 2;
}

static inline void
thread_cap_ptr_set_capTCBCanGrant(thread_cap_t *thread_cap_ptr, uint32_t v) {
    thread_cap_ptr->words[1] &= ~0x4;
    thread_cap_ptr->words[1] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
thread_cap_get_capTCBCanWrite(thread_cap_t thread_cap) {
    return (thread_cap.words[1] & 0x2) >> 1;
}

static inline thread_cap_t __attribute__((__const__))
thread_cap_set_capTCBCanWrite(thread_cap_t thread_cap, uint32_t v) {
    thread_cap.words[1] &= ~0x2;
    thread_cap.words[1] |= (v << 1) & 0x2;
    return thread_cap;
}

static inline uint32_t __attribute__((__pure__))
thread_cap_ptr_get_capTCBCanWrite(thread_cap_t *thread_cap_ptr) {
    return (thread_cap_ptr->words[1] & 0x2) >> 1;
}

static inline void
thread_cap_ptr_set_capTCBCanWrite(thread_cap_t *thread_cap_ptr, uint32_t v) {
    thread_cap_ptr->words[1] &= ~0x2;
    thread_cap_ptr->words[1] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
thread_cap_get_capTCBCanRead(thread_cap_t thread_cap) {
    return (thread_cap.words[1] & 0x1) >> 0;
}

static inline thread_cap_t __attribute__((__const__))
thread_cap_set_capTCBCanRead(thread_cap_t thread_cap, uint32_t v) {
    thread_cap.words[1] &= ~0x1;
    thread_cap.words[1] |= (v << 0) & 0x1;
    return thread_cap;
}

static inline uint32_t __attribute__((__pure__))
thread_cap_ptr_get_capTCBCanRead(thread_cap_t *thread_cap_ptr) {
    return (thread_cap_ptr->words[1] & 0x1) >> 0;
}

static inline void
thread_cap_ptr_set_capTCBCanRead(thread_cap_t *thread_cap_ptr, uint32_t v) {
    thread_cap_ptr->words[1] &= ~0x1;
    thread_cap_ptr->words[1] |= (v << 0) & 0x1;
}

static inline uint32_t __attribute__((__const__))
thread_cap_get_capType(thread_cap_t thread_cap) {
    return (thread_cap.words[0] & 0xf0000000) >> 28;
}

static inline thread_cap_t __attribute__((__const__))
thread_cap_set_capType(thread_cap_t thread_cap, uint32_t v) {
    thread_cap.words[0] &= ~0xf0000000;
    thread_cap.words[0] |= (v << 28) & 0xf0000000;
    return thread_cap;
}

static inline uint32_t __attribute__((__pure__))
thread_cap_ptr_get_capType(thread_cap_t *thread_cap_ptr) {
    return (thread_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
thread_cap_ptr_set_capType(thread_cap_t *thread_cap_ptr, uint32_t v) {
    thread_cap_ptr->words[0] &= ~0xf0000000;
    thread_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
thread_cap_get_capTCBPtr(thread_cap_t thread_cap) {
    return (thread_cap.words[0] & 0xfffffff) << 4;
}

static inline thread_cap_t __attribute__((__const__))
thread_cap_set_capTCBPtr(thread_cap_t thread_cap, uint32_t v) {
    thread_cap.words[0] &= ~0xfffffff;
    thread_cap.words[0] |= (v >> 4) & 0xfffffff;
    return thread_cap;
}

static inline uint32_t __attribute__((__pure__))
thread_cap_ptr_get_capTCBPtr(thread_cap_t *thread_cap_ptr) {
    return (thread_cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
thread_cap_ptr_set_capTCBPtr(thread_cap_t *thread_cap_ptr, uint32_t v) {
    thread_cap_ptr->words[0] &= ~0xfffffff;
    thread_cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

struct zombie_cap{
    uint32_t words[2];
};
typedef struct zombie_cap zombie_cap_t;

static inline zombie_cap_t __attribute__((__const__)) zombie_cap_new(uint32_t capNumber, uint32_t capType, uint32_t capCTEPtr) {
    zombie_cap_t zombie_cap;

    zombie_cap.words[0] = 0;
    zombie_cap.words[1] = 0;

    zombie_cap.words[1] |= capNumber << 0;
    zombie_cap.words[0] |= (capType & 0xf) << 28;
    zombie_cap.words[0] |= (capCTEPtr & 0xfffffff0) >> 4;

    return zombie_cap;
}


static inline uint32_t __attribute__((__const__))
zombie_cap_get_capNumber(zombie_cap_t zombie_cap) {
    return (zombie_cap.words[1] & 0xffffffff) >> 0;
}

static inline zombie_cap_t __attribute__((__const__))
zombie_cap_set_capNumber(zombie_cap_t zombie_cap, uint32_t v) {
    zombie_cap.words[1] &= ~0xffffffff;
    zombie_cap.words[1] |= (v << 0) & 0xffffffff;
    return zombie_cap;
}

static inline uint32_t __attribute__((__pure__))
zombie_cap_ptr_get_capNumber(zombie_cap_t *zombie_cap_ptr) {
    return (zombie_cap_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
zombie_cap_ptr_set_capNumber(zombie_cap_t *zombie_cap_ptr, uint32_t v) {
    zombie_cap_ptr->words[1] &= ~0xffffffff;
    zombie_cap_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
zombie_cap_get_capType(zombie_cap_t zombie_cap) {
    return (zombie_cap.words[0] & 0xf0000000) >> 28;
}

static inline zombie_cap_t __attribute__((__const__))
zombie_cap_set_capType(zombie_cap_t zombie_cap, uint32_t v) {
    zombie_cap.words[0] &= ~0xf0000000;
    zombie_cap.words[0] |= (v << 28) & 0xf0000000;
    return zombie_cap;
}

static inline uint32_t __attribute__((__pure__))
zombie_cap_ptr_get_capType(zombie_cap_t *zombie_cap_ptr) {
    return (zombie_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
zombie_cap_ptr_set_capType(zombie_cap_t *zombie_cap_ptr, uint32_t v) {
    zombie_cap_ptr->words[0] &= ~0xf0000000;
    zombie_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
zombie_cap_get_capCTEPtr(zombie_cap_t zombie_cap) {
    return (zombie_cap.words[0] & 0xfffffff) << 4;
}

static inline zombie_cap_t __attribute__((__const__))
zombie_cap_set_capCTEPtr(zombie_cap_t zombie_cap, uint32_t v) {
    zombie_cap.words[0] &= ~0xfffffff;
    zombie_cap.words[0] |= (v >> 4) & 0xfffffff;
    return zombie_cap;
}

static inline uint32_t __attribute__((__pure__))
zombie_cap_ptr_get_capCTEPtr(zombie_cap_t *zombie_cap_ptr) {
    return (zombie_cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
zombie_cap_ptr_set_capCTEPtr(zombie_cap_t *zombie_cap_ptr, uint32_t v) {
    zombie_cap_ptr->words[0] &= ~0xfffffff;
    zombie_cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

struct page_table_cap{
    uint32_t words[2];
};
typedef struct page_table_cap page_table_cap_t;

static inline page_table_cap_t __attribute__((__const__)) page_table_cap_new(uint32_t capPTMappedAddress, uint32_t capPTIsMapped, uint32_t capPTMappedASID, uint32_t capType, uint32_t capPTBasePtr) {
    page_table_cap_t page_table_cap;

    page_table_cap.words[0] = 0;
    page_table_cap.words[1] = 0;

    page_table_cap.words[1] |= (capPTMappedAddress & 0xfff) << 20;
    page_table_cap.words[1] |= (capPTIsMapped & 0x1) << 18;
    page_table_cap.words[1] |= (capPTMappedASID & 0x3ffff) << 0;
    page_table_cap.words[0] |= (capType & 0xf) << 28;
    page_table_cap.words[0] |= (capPTBasePtr & 0xfffffc00) >> 10;

    return page_table_cap;
}


static inline uint32_t __attribute__((__const__))
page_table_cap_get_capPTMappedAddress(page_table_cap_t page_table_cap) {
    return (page_table_cap.words[1] & 0xfff00000) >> 20;
}

static inline page_table_cap_t __attribute__((__const__))
page_table_cap_set_capPTMappedAddress(page_table_cap_t page_table_cap, uint32_t v) {
    page_table_cap.words[1] &= ~0xfff00000;
    page_table_cap.words[1] |= (v << 20) & 0xfff00000;
    return page_table_cap;
}

static inline uint32_t __attribute__((__pure__))
page_table_cap_ptr_get_capPTMappedAddress(page_table_cap_t *page_table_cap_ptr) {
    return (page_table_cap_ptr->words[1] & 0xfff00000) >> 20;
}

static inline void
page_table_cap_ptr_set_capPTMappedAddress(page_table_cap_t *page_table_cap_ptr, uint32_t v) {
    page_table_cap_ptr->words[1] &= ~0xfff00000;
    page_table_cap_ptr->words[1] |= (v << 20) & 0xfff00000;
}

static inline uint32_t __attribute__((__const__))
page_table_cap_get_capPTIsMapped(page_table_cap_t page_table_cap) {
    return (page_table_cap.words[1] & 0x40000) >> 18;
}

static inline page_table_cap_t __attribute__((__const__))
page_table_cap_set_capPTIsMapped(page_table_cap_t page_table_cap, uint32_t v) {
    page_table_cap.words[1] &= ~0x40000;
    page_table_cap.words[1] |= (v << 18) & 0x40000;
    return page_table_cap;
}

static inline uint32_t __attribute__((__pure__))
page_table_cap_ptr_get_capPTIsMapped(page_table_cap_t *page_table_cap_ptr) {
    return (page_table_cap_ptr->words[1] & 0x40000) >> 18;
}

static inline void
page_table_cap_ptr_set_capPTIsMapped(page_table_cap_t *page_table_cap_ptr, uint32_t v) {
    page_table_cap_ptr->words[1] &= ~0x40000;
    page_table_cap_ptr->words[1] |= (v << 18) & 0x40000;
}

static inline uint32_t __attribute__((__const__))
page_table_cap_get_capPTMappedASID(page_table_cap_t page_table_cap) {
    return (page_table_cap.words[1] & 0x3ffff) >> 0;
}

static inline page_table_cap_t __attribute__((__const__))
page_table_cap_set_capPTMappedASID(page_table_cap_t page_table_cap, uint32_t v) {
    page_table_cap.words[1] &= ~0x3ffff;
    page_table_cap.words[1] |= (v << 0) & 0x3ffff;
    return page_table_cap;
}

static inline uint32_t __attribute__((__pure__))
page_table_cap_ptr_get_capPTMappedASID(page_table_cap_t *page_table_cap_ptr) {
    return (page_table_cap_ptr->words[1] & 0x3ffff) >> 0;
}

static inline void
page_table_cap_ptr_set_capPTMappedASID(page_table_cap_t *page_table_cap_ptr, uint32_t v) {
    page_table_cap_ptr->words[1] &= ~0x3ffff;
    page_table_cap_ptr->words[1] |= (v << 0) & 0x3ffff;
}

static inline uint32_t __attribute__((__const__))
page_table_cap_get_capType(page_table_cap_t page_table_cap) {
    return (page_table_cap.words[0] & 0xf0000000) >> 28;
}

static inline page_table_cap_t __attribute__((__const__))
page_table_cap_set_capType(page_table_cap_t page_table_cap, uint32_t v) {
    page_table_cap.words[0] &= ~0xf0000000;
    page_table_cap.words[0] |= (v << 28) & 0xf0000000;
    return page_table_cap;
}

static inline uint32_t __attribute__((__pure__))
page_table_cap_ptr_get_capType(page_table_cap_t *page_table_cap_ptr) {
    return (page_table_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
page_table_cap_ptr_set_capType(page_table_cap_t *page_table_cap_ptr, uint32_t v) {
    page_table_cap_ptr->words[0] &= ~0xf0000000;
    page_table_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
page_table_cap_get_capPTBasePtr(page_table_cap_t page_table_cap) {
    return (page_table_cap.words[0] & 0x3fffff) << 10;
}

static inline page_table_cap_t __attribute__((__const__))
page_table_cap_set_capPTBasePtr(page_table_cap_t page_table_cap, uint32_t v) {
    page_table_cap.words[0] &= ~0x3fffff;
    page_table_cap.words[0] |= (v >> 10) & 0x3fffff;
    return page_table_cap;
}

static inline uint32_t __attribute__((__pure__))
page_table_cap_ptr_get_capPTBasePtr(page_table_cap_t *page_table_cap_ptr) {
    return (page_table_cap_ptr->words[0] & 0x3fffff) << 10;
}

static inline void
page_table_cap_ptr_set_capPTBasePtr(page_table_cap_t *page_table_cap_ptr, uint32_t v) {
    page_table_cap_ptr->words[0] &= ~0x3fffff;
    page_table_cap_ptr->words[0] |= (v >> 10) & 0x3fffff;
}

struct asid_pool_cap{
    uint32_t words[2];
};
typedef struct asid_pool_cap asid_pool_cap_t;

static inline asid_pool_cap_t __attribute__((__const__)) asid_pool_cap_new(uint32_t capASIDBase, uint32_t capType, uint32_t capASIDPool) {
    asid_pool_cap_t asid_pool_cap;

    asid_pool_cap.words[0] = 0;
    asid_pool_cap.words[1] = 0;

    asid_pool_cap.words[1] |= (capASIDBase & 0x3ffff) << 0;
    asid_pool_cap.words[0] |= (capType & 0xf) << 28;
    asid_pool_cap.words[0] |= (capASIDPool & 0xfffffff0) >> 4;

    return asid_pool_cap;
}


static inline uint32_t __attribute__((__const__))
asid_pool_cap_get_capASIDBase(asid_pool_cap_t asid_pool_cap) {
    return (asid_pool_cap.words[1] & 0x3ffff) >> 0;
}

static inline asid_pool_cap_t __attribute__((__const__))
asid_pool_cap_set_capASIDBase(asid_pool_cap_t asid_pool_cap, uint32_t v) {
    asid_pool_cap.words[1] &= ~0x3ffff;
    asid_pool_cap.words[1] |= (v << 0) & 0x3ffff;
    return asid_pool_cap;
}

static inline uint32_t __attribute__((__pure__))
asid_pool_cap_ptr_get_capASIDBase(asid_pool_cap_t *asid_pool_cap_ptr) {
    return (asid_pool_cap_ptr->words[1] & 0x3ffff) >> 0;
}

static inline void
asid_pool_cap_ptr_set_capASIDBase(asid_pool_cap_t *asid_pool_cap_ptr, uint32_t v) {
    asid_pool_cap_ptr->words[1] &= ~0x3ffff;
    asid_pool_cap_ptr->words[1] |= (v << 0) & 0x3ffff;
}

static inline uint32_t __attribute__((__const__))
asid_pool_cap_get_capType(asid_pool_cap_t asid_pool_cap) {
    return (asid_pool_cap.words[0] & 0xf0000000) >> 28;
}

static inline asid_pool_cap_t __attribute__((__const__))
asid_pool_cap_set_capType(asid_pool_cap_t asid_pool_cap, uint32_t v) {
    asid_pool_cap.words[0] &= ~0xf0000000;
    asid_pool_cap.words[0] |= (v << 28) & 0xf0000000;
    return asid_pool_cap;
}

static inline uint32_t __attribute__((__pure__))
asid_pool_cap_ptr_get_capType(asid_pool_cap_t *asid_pool_cap_ptr) {
    return (asid_pool_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
asid_pool_cap_ptr_set_capType(asid_pool_cap_t *asid_pool_cap_ptr, uint32_t v) {
    asid_pool_cap_ptr->words[0] &= ~0xf0000000;
    asid_pool_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
asid_pool_cap_get_capASIDPool(asid_pool_cap_t asid_pool_cap) {
    return (asid_pool_cap.words[0] & 0xfffffff) << 4;
}

static inline asid_pool_cap_t __attribute__((__const__))
asid_pool_cap_set_capASIDPool(asid_pool_cap_t asid_pool_cap, uint32_t v) {
    asid_pool_cap.words[0] &= ~0xfffffff;
    asid_pool_cap.words[0] |= (v >> 4) & 0xfffffff;
    return asid_pool_cap;
}

static inline uint32_t __attribute__((__pure__))
asid_pool_cap_ptr_get_capASIDPool(asid_pool_cap_t *asid_pool_cap_ptr) {
    return (asid_pool_cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
asid_pool_cap_ptr_set_capASIDPool(asid_pool_cap_t *asid_pool_cap_ptr, uint32_t v) {
    asid_pool_cap_ptr->words[0] &= ~0xfffffff;
    asid_pool_cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

struct pde_section{
    uint32_t words[1];
};
typedef struct pde_section pde_section_t;

static inline pde_section_t __attribute__((__const__)) pde_section_new(uint32_t address, uint32_t size, uint32_t nG, uint32_t S, uint32_t APX, uint32_t TEX, uint32_t AP, uint32_t P, uint32_t Domain, uint32_t XN, uint32_t C, uint32_t B, uint32_t pdeType) {
    pde_section_t pde_section;

    pde_section.words[0] = 0;

    pde_section.words[0] |= (address & 0xfff00000) >> 0;
    pde_section.words[0] |= (size & 0x1) << 18;
    pde_section.words[0] |= (nG & 0x1) << 17;
    pde_section.words[0] |= (S & 0x1) << 16;
    pde_section.words[0] |= (APX & 0x1) << 15;
    pde_section.words[0] |= (TEX & 0x7) << 12;
    pde_section.words[0] |= (AP & 0x3) << 10;
    pde_section.words[0] |= (P & 0x1) << 9;
    pde_section.words[0] |= (Domain & 0xf) << 5;
    pde_section.words[0] |= (XN & 0x1) << 4;
    pde_section.words[0] |= (C & 0x1) << 3;
    pde_section.words[0] |= (B & 0x1) << 2;
    pde_section.words[0] |= (pdeType & 0x3) << 0;

    return pde_section;
}


static inline uint32_t __attribute__((__const__))
pde_section_get_address(pde_section_t pde_section) {
    return (pde_section.words[0] & 0xfff00000) << 0;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_address(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0xfff00000;
    pde_section.words[0] |= (v >> 0) & 0xfff00000;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_address(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0xfff00000) << 0;
}

static inline void
pde_section_ptr_set_address(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0xfff00000;
    pde_section_ptr->words[0] |= (v >> 0) & 0xfff00000;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_size(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x40000) >> 18;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_size(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x40000;
    pde_section.words[0] |= (v << 18) & 0x40000;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_size(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x40000) >> 18;
}

static inline void
pde_section_ptr_set_size(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x40000;
    pde_section_ptr->words[0] |= (v << 18) & 0x40000;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_nG(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x20000) >> 17;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_nG(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x20000;
    pde_section.words[0] |= (v << 17) & 0x20000;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_nG(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x20000) >> 17;
}

static inline void
pde_section_ptr_set_nG(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x20000;
    pde_section_ptr->words[0] |= (v << 17) & 0x20000;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_S(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x10000) >> 16;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_S(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x10000;
    pde_section.words[0] |= (v << 16) & 0x10000;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_S(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x10000) >> 16;
}

static inline void
pde_section_ptr_set_S(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x10000;
    pde_section_ptr->words[0] |= (v << 16) & 0x10000;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_APX(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x8000) >> 15;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_APX(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x8000;
    pde_section.words[0] |= (v << 15) & 0x8000;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_APX(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x8000) >> 15;
}

static inline void
pde_section_ptr_set_APX(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x8000;
    pde_section_ptr->words[0] |= (v << 15) & 0x8000;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_TEX(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x7000) >> 12;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_TEX(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x7000;
    pde_section.words[0] |= (v << 12) & 0x7000;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_TEX(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x7000) >> 12;
}

static inline void
pde_section_ptr_set_TEX(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x7000;
    pde_section_ptr->words[0] |= (v << 12) & 0x7000;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_AP(pde_section_t pde_section) {
    return (pde_section.words[0] & 0xc00) >> 10;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_AP(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0xc00;
    pde_section.words[0] |= (v << 10) & 0xc00;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_AP(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0xc00) >> 10;
}

static inline void
pde_section_ptr_set_AP(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0xc00;
    pde_section_ptr->words[0] |= (v << 10) & 0xc00;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_P(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x200) >> 9;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_P(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x200;
    pde_section.words[0] |= (v << 9) & 0x200;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_P(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x200) >> 9;
}

static inline void
pde_section_ptr_set_P(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x200;
    pde_section_ptr->words[0] |= (v << 9) & 0x200;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_Domain(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x1e0) >> 5;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_Domain(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x1e0;
    pde_section.words[0] |= (v << 5) & 0x1e0;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_Domain(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x1e0) >> 5;
}

static inline void
pde_section_ptr_set_Domain(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x1e0;
    pde_section_ptr->words[0] |= (v << 5) & 0x1e0;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_XN(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x10) >> 4;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_XN(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x10;
    pde_section.words[0] |= (v << 4) & 0x10;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_XN(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x10) >> 4;
}

static inline void
pde_section_ptr_set_XN(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x10;
    pde_section_ptr->words[0] |= (v << 4) & 0x10;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_C(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x8) >> 3;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_C(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x8;
    pde_section.words[0] |= (v << 3) & 0x8;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_C(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x8) >> 3;
}

static inline void
pde_section_ptr_set_C(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x8;
    pde_section_ptr->words[0] |= (v << 3) & 0x8;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_B(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x4) >> 2;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_B(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x4;
    pde_section.words[0] |= (v << 2) & 0x4;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_B(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x4) >> 2;
}

static inline void
pde_section_ptr_set_B(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x4;
    pde_section_ptr->words[0] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
pde_section_get_pdeType(pde_section_t pde_section) {
    return (pde_section.words[0] & 0x3) >> 0;
}

static inline pde_section_t __attribute__((__const__))
pde_section_set_pdeType(pde_section_t pde_section, uint32_t v) {
    pde_section.words[0] &= ~0x3;
    pde_section.words[0] |= (v << 0) & 0x3;
    return pde_section;
}

static inline uint32_t __attribute__((__pure__))
pde_section_ptr_get_pdeType(pde_section_t *pde_section_ptr) {
    return (pde_section_ptr->words[0] & 0x3) >> 0;
}

static inline void
pde_section_ptr_set_pdeType(pde_section_t *pde_section_ptr, uint32_t v) {
    pde_section_ptr->words[0] &= ~0x3;
    pde_section_ptr->words[0] |= (v << 0) & 0x3;
}

struct endpoint{
    uint32_t words[4];
};
typedef struct endpoint endpoint_t;

static inline endpoint_t __attribute__((__const__)) endpoint_new(uint32_t epQueue_head, uint32_t epQueue_tail, uint32_t state) {
    endpoint_t endpoint;

    endpoint.words[0] = 0;
    endpoint.words[1] = 0;
    endpoint.words[2] = 0;
    endpoint.words[3] = 0;

    endpoint.words[1] |= (epQueue_head & 0xfffffff0) >> 0;
    endpoint.words[0] |= (epQueue_tail & 0xfffffff0) >> 0;
    endpoint.words[0] |= (state & 0x3) << 0;

    return endpoint;
}


static inline uint32_t __attribute__((__const__))
endpoint_get_epQueue_head(endpoint_t endpoint) {
    return (endpoint.words[1] & 0xfffffff0) << 0;
}

static inline endpoint_t __attribute__((__const__))
endpoint_set_epQueue_head(endpoint_t endpoint, uint32_t v) {
    endpoint.words[1] &= ~0xfffffff0;
    endpoint.words[1] |= (v >> 0) & 0xfffffff0;
    return endpoint;
}

static inline uint32_t __attribute__((__pure__))
endpoint_ptr_get_epQueue_head(endpoint_t *endpoint_ptr) {
    return (endpoint_ptr->words[1] & 0xfffffff0) << 0;
}

static inline void
endpoint_ptr_set_epQueue_head(endpoint_t *endpoint_ptr, uint32_t v) {
    endpoint_ptr->words[1] &= ~0xfffffff0;
    endpoint_ptr->words[1] |= (v >> 0) & 0xfffffff0;
}

static inline uint32_t __attribute__((__const__))
endpoint_get_epQueue_tail(endpoint_t endpoint) {
    return (endpoint.words[0] & 0xfffffff0) << 0;
}

static inline endpoint_t __attribute__((__const__))
endpoint_set_epQueue_tail(endpoint_t endpoint, uint32_t v) {
    endpoint.words[0] &= ~0xfffffff0;
    endpoint.words[0] |= (v >> 0) & 0xfffffff0;
    return endpoint;
}

static inline uint32_t __attribute__((__pure__))
endpoint_ptr_get_epQueue_tail(endpoint_t *endpoint_ptr) {
    return (endpoint_ptr->words[0] & 0xfffffff0) << 0;
}

static inline void
endpoint_ptr_set_epQueue_tail(endpoint_t *endpoint_ptr, uint32_t v) {
    endpoint_ptr->words[0] &= ~0xfffffff0;
    endpoint_ptr->words[0] |= (v >> 0) & 0xfffffff0;
}

static inline uint32_t __attribute__((__const__))
endpoint_get_state(endpoint_t endpoint) {
    return (endpoint.words[0] & 0x3) >> 0;
}

static inline endpoint_t __attribute__((__const__))
endpoint_set_state(endpoint_t endpoint, uint32_t v) {
    endpoint.words[0] &= ~0x3;
    endpoint.words[0] |= (v << 0) & 0x3;
    return endpoint;
}

static inline uint32_t __attribute__((__pure__))
endpoint_ptr_get_state(endpoint_t *endpoint_ptr) {
    return (endpoint_ptr->words[0] & 0x3) >> 0;
}

static inline void
endpoint_ptr_set_state(endpoint_t *endpoint_ptr, uint32_t v) {
    endpoint_ptr->words[0] &= ~0x3;
    endpoint_ptr->words[0] |= (v << 0) & 0x3;
}

struct missing_capability{
    uint32_t words[2];
};
typedef struct missing_capability missing_capability_t;

static inline missing_capability_t __attribute__((__const__)) missing_capability_new(uint32_t bitsLeft, uint32_t lufType) {
    missing_capability_t missing_capability;

    missing_capability.words[0] = 0;
    missing_capability.words[1] = 0;

    missing_capability.words[0] |= (bitsLeft & 0x1f) << 2;
    missing_capability.words[0] |= (lufType & 0x3) << 0;

    return missing_capability;
}


static inline uint32_t __attribute__((__const__))
missing_capability_get_bitsLeft(missing_capability_t missing_capability) {
    return (missing_capability.words[0] & 0x7c) >> 2;
}

static inline missing_capability_t __attribute__((__const__))
missing_capability_set_bitsLeft(missing_capability_t missing_capability, uint32_t v) {
    missing_capability.words[0] &= ~0x7c;
    missing_capability.words[0] |= (v << 2) & 0x7c;
    return missing_capability;
}

static inline uint32_t __attribute__((__pure__))
missing_capability_ptr_get_bitsLeft(missing_capability_t *missing_capability_ptr) {
    return (missing_capability_ptr->words[0] & 0x7c) >> 2;
}

static inline void
missing_capability_ptr_set_bitsLeft(missing_capability_t *missing_capability_ptr, uint32_t v) {
    missing_capability_ptr->words[0] &= ~0x7c;
    missing_capability_ptr->words[0] |= (v << 2) & 0x7c;
}

static inline uint32_t __attribute__((__const__))
missing_capability_get_lufType(missing_capability_t missing_capability) {
    return (missing_capability.words[0] & 0x3) >> 0;
}

static inline missing_capability_t __attribute__((__const__))
missing_capability_set_lufType(missing_capability_t missing_capability, uint32_t v) {
    missing_capability.words[0] &= ~0x3;
    missing_capability.words[0] |= (v << 0) & 0x3;
    return missing_capability;
}

static inline uint32_t __attribute__((__pure__))
missing_capability_ptr_get_lufType(missing_capability_t *missing_capability_ptr) {
    return (missing_capability_ptr->words[0] & 0x3) >> 0;
}

static inline void
missing_capability_ptr_set_lufType(missing_capability_t *missing_capability_ptr, uint32_t v) {
    missing_capability_ptr->words[0] &= ~0x3;
    missing_capability_ptr->words[0] |= (v << 0) & 0x3;
}

struct irq_control_cap{
    uint32_t words[2];
};
typedef struct irq_control_cap irq_control_cap_t;

static inline irq_control_cap_t __attribute__((__const__)) irq_control_cap_new(uint32_t capType) {
    irq_control_cap_t irq_control_cap;

    irq_control_cap.words[0] = 0;
    irq_control_cap.words[1] = 0;

    irq_control_cap.words[0] |= (capType & 0xf) << 28;

    return irq_control_cap;
}


static inline uint32_t __attribute__((__const__))
irq_control_cap_get_capType(irq_control_cap_t irq_control_cap) {
    return (irq_control_cap.words[0] & 0xf0000000) >> 28;
}

static inline irq_control_cap_t __attribute__((__const__))
irq_control_cap_set_capType(irq_control_cap_t irq_control_cap, uint32_t v) {
    irq_control_cap.words[0] &= ~0xf0000000;
    irq_control_cap.words[0] |= (v << 28) & 0xf0000000;
    return irq_control_cap;
}

static inline uint32_t __attribute__((__pure__))
irq_control_cap_ptr_get_capType(irq_control_cap_t *irq_control_cap_ptr) {
    return (irq_control_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
irq_control_cap_ptr_set_capType(irq_control_cap_t *irq_control_cap_ptr, uint32_t v) {
    irq_control_cap_ptr->words[0] &= ~0xf0000000;
    irq_control_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

struct async_endpoint_cap{
    uint32_t words[2];
};
typedef struct async_endpoint_cap async_endpoint_cap_t;

static inline async_endpoint_cap_t __attribute__((__const__)) async_endpoint_cap_new(uint32_t capAEPBadge, uint32_t capAEPCanSend, uint32_t capAEPCanReceive, uint32_t capType, uint32_t capAEPPtr) {
    async_endpoint_cap_t async_endpoint_cap;

    async_endpoint_cap.words[0] = 0;
    async_endpoint_cap.words[1] = 0;

    async_endpoint_cap.words[1] |= (capAEPBadge & 0x1fffffff) << 3;
    async_endpoint_cap.words[1] |= (capAEPCanSend & 0x1) << 1;
    async_endpoint_cap.words[1] |= (capAEPCanReceive & 0x1) << 0;
    async_endpoint_cap.words[0] |= (capType & 0xf) << 28;
    async_endpoint_cap.words[0] |= (capAEPPtr & 0xfffffff0) >> 4;

    return async_endpoint_cap;
}


static inline uint32_t __attribute__((__const__))
async_endpoint_cap_get_capAEPBadge(async_endpoint_cap_t async_endpoint_cap) {
    return (async_endpoint_cap.words[1] & 0xfffffff8) >> 3;
}

static inline async_endpoint_cap_t __attribute__((__const__))
async_endpoint_cap_set_capAEPBadge(async_endpoint_cap_t async_endpoint_cap, uint32_t v) {
    async_endpoint_cap.words[1] &= ~0xfffffff8;
    async_endpoint_cap.words[1] |= (v << 3) & 0xfffffff8;
    return async_endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_cap_ptr_get_capAEPBadge(async_endpoint_cap_t *async_endpoint_cap_ptr) {
    return (async_endpoint_cap_ptr->words[1] & 0xfffffff8) >> 3;
}

static inline void
async_endpoint_cap_ptr_set_capAEPBadge(async_endpoint_cap_t *async_endpoint_cap_ptr, uint32_t v) {
    async_endpoint_cap_ptr->words[1] &= ~0xfffffff8;
    async_endpoint_cap_ptr->words[1] |= (v << 3) & 0xfffffff8;
}

static inline uint32_t __attribute__((__const__))
async_endpoint_cap_get_capAEPCanSend(async_endpoint_cap_t async_endpoint_cap) {
    return (async_endpoint_cap.words[1] & 0x2) >> 1;
}

static inline async_endpoint_cap_t __attribute__((__const__))
async_endpoint_cap_set_capAEPCanSend(async_endpoint_cap_t async_endpoint_cap, uint32_t v) {
    async_endpoint_cap.words[1] &= ~0x2;
    async_endpoint_cap.words[1] |= (v << 1) & 0x2;
    return async_endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_cap_ptr_get_capAEPCanSend(async_endpoint_cap_t *async_endpoint_cap_ptr) {
    return (async_endpoint_cap_ptr->words[1] & 0x2) >> 1;
}

static inline void
async_endpoint_cap_ptr_set_capAEPCanSend(async_endpoint_cap_t *async_endpoint_cap_ptr, uint32_t v) {
    async_endpoint_cap_ptr->words[1] &= ~0x2;
    async_endpoint_cap_ptr->words[1] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
async_endpoint_cap_get_capAEPCanReceive(async_endpoint_cap_t async_endpoint_cap) {
    return (async_endpoint_cap.words[1] & 0x1) >> 0;
}

static inline async_endpoint_cap_t __attribute__((__const__))
async_endpoint_cap_set_capAEPCanReceive(async_endpoint_cap_t async_endpoint_cap, uint32_t v) {
    async_endpoint_cap.words[1] &= ~0x1;
    async_endpoint_cap.words[1] |= (v << 0) & 0x1;
    return async_endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_cap_ptr_get_capAEPCanReceive(async_endpoint_cap_t *async_endpoint_cap_ptr) {
    return (async_endpoint_cap_ptr->words[1] & 0x1) >> 0;
}

static inline void
async_endpoint_cap_ptr_set_capAEPCanReceive(async_endpoint_cap_t *async_endpoint_cap_ptr, uint32_t v) {
    async_endpoint_cap_ptr->words[1] &= ~0x1;
    async_endpoint_cap_ptr->words[1] |= (v << 0) & 0x1;
}

static inline uint32_t __attribute__((__const__))
async_endpoint_cap_get_capType(async_endpoint_cap_t async_endpoint_cap) {
    return (async_endpoint_cap.words[0] & 0xf0000000) >> 28;
}

static inline async_endpoint_cap_t __attribute__((__const__))
async_endpoint_cap_set_capType(async_endpoint_cap_t async_endpoint_cap, uint32_t v) {
    async_endpoint_cap.words[0] &= ~0xf0000000;
    async_endpoint_cap.words[0] |= (v << 28) & 0xf0000000;
    return async_endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_cap_ptr_get_capType(async_endpoint_cap_t *async_endpoint_cap_ptr) {
    return (async_endpoint_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
async_endpoint_cap_ptr_set_capType(async_endpoint_cap_t *async_endpoint_cap_ptr, uint32_t v) {
    async_endpoint_cap_ptr->words[0] &= ~0xf0000000;
    async_endpoint_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
async_endpoint_cap_get_capAEPPtr(async_endpoint_cap_t async_endpoint_cap) {
    return (async_endpoint_cap.words[0] & 0xfffffff) << 4;
}

static inline async_endpoint_cap_t __attribute__((__const__))
async_endpoint_cap_set_capAEPPtr(async_endpoint_cap_t async_endpoint_cap, uint32_t v) {
    async_endpoint_cap.words[0] &= ~0xfffffff;
    async_endpoint_cap.words[0] |= (v >> 4) & 0xfffffff;
    return async_endpoint_cap;
}

static inline uint32_t __attribute__((__pure__))
async_endpoint_cap_ptr_get_capAEPPtr(async_endpoint_cap_t *async_endpoint_cap_ptr) {
    return (async_endpoint_cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
async_endpoint_cap_ptr_set_capAEPPtr(async_endpoint_cap_t *async_endpoint_cap_ptr, uint32_t v) {
    async_endpoint_cap_ptr->words[0] &= ~0xfffffff;
    async_endpoint_cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

struct vm_attributes{
    uint32_t words[1];
};
typedef struct vm_attributes vm_attributes_t;

static inline vm_attributes_t __attribute__((__const__)) vm_attributes_new(uint32_t armParityEnabled, uint32_t armPageCacheable) {
    vm_attributes_t vm_attributes;

    vm_attributes.words[0] = 0;

    vm_attributes.words[0] |= (armParityEnabled & 0x1) << 1;
    vm_attributes.words[0] |= (armPageCacheable & 0x1) << 0;

    return vm_attributes;
}


static inline uint32_t __attribute__((__const__))
vm_attributes_get_armParityEnabled(vm_attributes_t vm_attributes) {
    return (vm_attributes.words[0] & 0x2) >> 1;
}

static inline vm_attributes_t __attribute__((__const__))
vm_attributes_set_armParityEnabled(vm_attributes_t vm_attributes, uint32_t v) {
    vm_attributes.words[0] &= ~0x2;
    vm_attributes.words[0] |= (v << 1) & 0x2;
    return vm_attributes;
}

static inline uint32_t __attribute__((__pure__))
vm_attributes_ptr_get_armParityEnabled(vm_attributes_t *vm_attributes_ptr) {
    return (vm_attributes_ptr->words[0] & 0x2) >> 1;
}

static inline void
vm_attributes_ptr_set_armParityEnabled(vm_attributes_t *vm_attributes_ptr, uint32_t v) {
    vm_attributes_ptr->words[0] &= ~0x2;
    vm_attributes_ptr->words[0] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
vm_attributes_get_armPageCacheable(vm_attributes_t vm_attributes) {
    return (vm_attributes.words[0] & 0x1) >> 0;
}

static inline vm_attributes_t __attribute__((__const__))
vm_attributes_set_armPageCacheable(vm_attributes_t vm_attributes, uint32_t v) {
    vm_attributes.words[0] &= ~0x1;
    vm_attributes.words[0] |= (v << 0) & 0x1;
    return vm_attributes;
}

static inline uint32_t __attribute__((__pure__))
vm_attributes_ptr_get_armPageCacheable(vm_attributes_t *vm_attributes_ptr) {
    return (vm_attributes_ptr->words[0] & 0x1) >> 0;
}

static inline void
vm_attributes_ptr_set_armPageCacheable(vm_attributes_t *vm_attributes_ptr, uint32_t v) {
    vm_attributes_ptr->words[0] &= ~0x1;
    vm_attributes_ptr->words[0] |= (v << 0) & 0x1;
}

struct pde_invalid{
    uint32_t words[1];
};
typedef struct pde_invalid pde_invalid_t;

static inline pde_invalid_t __attribute__((__const__)) pde_invalid_new(uint32_t pdeType) {
    pde_invalid_t pde_invalid;

    pde_invalid.words[0] = 0;

    pde_invalid.words[0] |= (pdeType & 0x3) << 0;

    return pde_invalid;
}


static inline uint32_t __attribute__((__const__))
pde_invalid_get_pdeType(pde_invalid_t pde_invalid) {
    return (pde_invalid.words[0] & 0x3) >> 0;
}

static inline pde_invalid_t __attribute__((__const__))
pde_invalid_set_pdeType(pde_invalid_t pde_invalid, uint32_t v) {
    pde_invalid.words[0] &= ~0x3;
    pde_invalid.words[0] |= (v << 0) & 0x3;
    return pde_invalid;
}

static inline uint32_t __attribute__((__pure__))
pde_invalid_ptr_get_pdeType(pde_invalid_t *pde_invalid_ptr) {
    return (pde_invalid_ptr->words[0] & 0x3) >> 0;
}

static inline void
pde_invalid_ptr_set_pdeType(pde_invalid_t *pde_invalid_ptr, uint32_t v) {
    pde_invalid_ptr->words[0] &= ~0x3;
    pde_invalid_ptr->words[0] |= (v << 0) & 0x3;
}

struct cnode_capdata{
    uint32_t words[1];
};
typedef struct cnode_capdata cnode_capdata_t;

static inline cnode_capdata_t __attribute__((__const__)) cnode_capdata_new(uint32_t guard, uint32_t guardSize, uint32_t rightsMask) {
    cnode_capdata_t cnode_capdata;

    cnode_capdata.words[0] = 0;

    cnode_capdata.words[0] |= (guard & 0x3ffff) << 8;
    cnode_capdata.words[0] |= (guardSize & 0x1f) << 3;
    cnode_capdata.words[0] |= (rightsMask & 0x7) << 0;

    return cnode_capdata;
}


static inline uint32_t __attribute__((__const__))
cnode_capdata_get_guard(cnode_capdata_t cnode_capdata) {
    return (cnode_capdata.words[0] & 0x3ffff00) >> 8;
}

static inline cnode_capdata_t __attribute__((__const__))
cnode_capdata_set_guard(cnode_capdata_t cnode_capdata, uint32_t v) {
    cnode_capdata.words[0] &= ~0x3ffff00;
    cnode_capdata.words[0] |= (v << 8) & 0x3ffff00;
    return cnode_capdata;
}

static inline uint32_t __attribute__((__pure__))
cnode_capdata_ptr_get_guard(cnode_capdata_t *cnode_capdata_ptr) {
    return (cnode_capdata_ptr->words[0] & 0x3ffff00) >> 8;
}

static inline void
cnode_capdata_ptr_set_guard(cnode_capdata_t *cnode_capdata_ptr, uint32_t v) {
    cnode_capdata_ptr->words[0] &= ~0x3ffff00;
    cnode_capdata_ptr->words[0] |= (v << 8) & 0x3ffff00;
}

static inline uint32_t __attribute__((__const__))
cnode_capdata_get_guardSize(cnode_capdata_t cnode_capdata) {
    return (cnode_capdata.words[0] & 0xf8) >> 3;
}

static inline cnode_capdata_t __attribute__((__const__))
cnode_capdata_set_guardSize(cnode_capdata_t cnode_capdata, uint32_t v) {
    cnode_capdata.words[0] &= ~0xf8;
    cnode_capdata.words[0] |= (v << 3) & 0xf8;
    return cnode_capdata;
}

static inline uint32_t __attribute__((__pure__))
cnode_capdata_ptr_get_guardSize(cnode_capdata_t *cnode_capdata_ptr) {
    return (cnode_capdata_ptr->words[0] & 0xf8) >> 3;
}

static inline void
cnode_capdata_ptr_set_guardSize(cnode_capdata_t *cnode_capdata_ptr, uint32_t v) {
    cnode_capdata_ptr->words[0] &= ~0xf8;
    cnode_capdata_ptr->words[0] |= (v << 3) & 0xf8;
}

static inline uint32_t __attribute__((__const__))
cnode_capdata_get_rightsMask(cnode_capdata_t cnode_capdata) {
    return (cnode_capdata.words[0] & 0x7) >> 0;
}

static inline cnode_capdata_t __attribute__((__const__))
cnode_capdata_set_rightsMask(cnode_capdata_t cnode_capdata, uint32_t v) {
    cnode_capdata.words[0] &= ~0x7;
    cnode_capdata.words[0] |= (v << 0) & 0x7;
    return cnode_capdata;
}

static inline uint32_t __attribute__((__pure__))
cnode_capdata_ptr_get_rightsMask(cnode_capdata_t *cnode_capdata_ptr) {
    return (cnode_capdata_ptr->words[0] & 0x7) >> 0;
}

static inline void
cnode_capdata_ptr_set_rightsMask(cnode_capdata_t *cnode_capdata_ptr, uint32_t v) {
    cnode_capdata_ptr->words[0] &= ~0x7;
    cnode_capdata_ptr->words[0] |= (v << 0) & 0x7;
}

struct thread_state{
    uint32_t words[3];
};
typedef struct thread_state thread_state_t;

static inline thread_state_t __attribute__((__const__)) thread_state_new(uint32_t blockingIPCBadge, uint32_t blockingIPCCanGrant, uint32_t blockingIPCIsCall, uint32_t tcbQueued, uint32_t blockingIPCEndpoint, uint32_t blockingIPCDiminishCaps, uint32_t tsType) {
    thread_state_t thread_state;

    thread_state.words[0] = 0;
    thread_state.words[1] = 0;
    thread_state.words[2] = 0;

    thread_state.words[2] |= (blockingIPCBadge & 0x1fffffff) << 3;
    thread_state.words[2] |= (blockingIPCCanGrant & 0x1) << 2;
    thread_state.words[2] |= (blockingIPCIsCall & 0x1) << 1;
    thread_state.words[2] |= (tcbQueued & 0x1) << 0;
    thread_state.words[1] |= (blockingIPCEndpoint & 0xfffffff) << 4;
    thread_state.words[1] |= (blockingIPCDiminishCaps & 0x1) << 3;
    thread_state.words[0] |= (tsType & 0xf) << 0;

    return thread_state;
}


static inline uint32_t __attribute__((__const__))
thread_state_get_blockingIPCBadge(thread_state_t thread_state) {
    return (thread_state.words[2] & 0xfffffff8) >> 3;
}

static inline thread_state_t __attribute__((__const__))
thread_state_set_blockingIPCBadge(thread_state_t thread_state, uint32_t v) {
    thread_state.words[2] &= ~0xfffffff8;
    thread_state.words[2] |= (v << 3) & 0xfffffff8;
    return thread_state;
}

static inline uint32_t __attribute__((__pure__))
thread_state_ptr_get_blockingIPCBadge(thread_state_t *thread_state_ptr) {
    return (thread_state_ptr->words[2] & 0xfffffff8) >> 3;
}

static inline void
thread_state_ptr_set_blockingIPCBadge(thread_state_t *thread_state_ptr, uint32_t v) {
    thread_state_ptr->words[2] &= ~0xfffffff8;
    thread_state_ptr->words[2] |= (v << 3) & 0xfffffff8;
}

static inline uint32_t __attribute__((__const__))
thread_state_get_blockingIPCCanGrant(thread_state_t thread_state) {
    return (thread_state.words[2] & 0x4) >> 2;
}

static inline thread_state_t __attribute__((__const__))
thread_state_set_blockingIPCCanGrant(thread_state_t thread_state, uint32_t v) {
    thread_state.words[2] &= ~0x4;
    thread_state.words[2] |= (v << 2) & 0x4;
    return thread_state;
}

static inline uint32_t __attribute__((__pure__))
thread_state_ptr_get_blockingIPCCanGrant(thread_state_t *thread_state_ptr) {
    return (thread_state_ptr->words[2] & 0x4) >> 2;
}

static inline void
thread_state_ptr_set_blockingIPCCanGrant(thread_state_t *thread_state_ptr, uint32_t v) {
    thread_state_ptr->words[2] &= ~0x4;
    thread_state_ptr->words[2] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
thread_state_get_blockingIPCIsCall(thread_state_t thread_state) {
    return (thread_state.words[2] & 0x2) >> 1;
}

static inline thread_state_t __attribute__((__const__))
thread_state_set_blockingIPCIsCall(thread_state_t thread_state, uint32_t v) {
    thread_state.words[2] &= ~0x2;
    thread_state.words[2] |= (v << 1) & 0x2;
    return thread_state;
}

static inline uint32_t __attribute__((__pure__))
thread_state_ptr_get_blockingIPCIsCall(thread_state_t *thread_state_ptr) {
    return (thread_state_ptr->words[2] & 0x2) >> 1;
}

static inline void
thread_state_ptr_set_blockingIPCIsCall(thread_state_t *thread_state_ptr, uint32_t v) {
    thread_state_ptr->words[2] &= ~0x2;
    thread_state_ptr->words[2] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
thread_state_get_tcbQueued(thread_state_t thread_state) {
    return (thread_state.words[2] & 0x1) >> 0;
}

static inline thread_state_t __attribute__((__const__))
thread_state_set_tcbQueued(thread_state_t thread_state, uint32_t v) {
    thread_state.words[2] &= ~0x1;
    thread_state.words[2] |= (v << 0) & 0x1;
    return thread_state;
}

static inline uint32_t __attribute__((__pure__))
thread_state_ptr_get_tcbQueued(thread_state_t *thread_state_ptr) {
    return (thread_state_ptr->words[2] & 0x1) >> 0;
}

static inline void
thread_state_ptr_set_tcbQueued(thread_state_t *thread_state_ptr, uint32_t v) {
    thread_state_ptr->words[2] &= ~0x1;
    thread_state_ptr->words[2] |= (v << 0) & 0x1;
}

static inline uint32_t __attribute__((__const__))
thread_state_get_blockingIPCEndpoint(thread_state_t thread_state) {
    return (thread_state.words[1] & 0xfffffff0) >> 4;
}

static inline thread_state_t __attribute__((__const__))
thread_state_set_blockingIPCEndpoint(thread_state_t thread_state, uint32_t v) {
    thread_state.words[1] &= ~0xfffffff0;
    thread_state.words[1] |= (v << 4) & 0xfffffff0;
    return thread_state;
}

static inline uint32_t __attribute__((__pure__))
thread_state_ptr_get_blockingIPCEndpoint(thread_state_t *thread_state_ptr) {
    return (thread_state_ptr->words[1] & 0xfffffff0) >> 4;
}

static inline void
thread_state_ptr_set_blockingIPCEndpoint(thread_state_t *thread_state_ptr, uint32_t v) {
    thread_state_ptr->words[1] &= ~0xfffffff0;
    thread_state_ptr->words[1] |= (v << 4) & 0xfffffff0;
}

static inline uint32_t __attribute__((__const__))
thread_state_get_blockingIPCDiminishCaps(thread_state_t thread_state) {
    return (thread_state.words[1] & 0x8) >> 3;
}

static inline thread_state_t __attribute__((__const__))
thread_state_set_blockingIPCDiminishCaps(thread_state_t thread_state, uint32_t v) {
    thread_state.words[1] &= ~0x8;
    thread_state.words[1] |= (v << 3) & 0x8;
    return thread_state;
}

static inline uint32_t __attribute__((__pure__))
thread_state_ptr_get_blockingIPCDiminishCaps(thread_state_t *thread_state_ptr) {
    return (thread_state_ptr->words[1] & 0x8) >> 3;
}

static inline void
thread_state_ptr_set_blockingIPCDiminishCaps(thread_state_t *thread_state_ptr, uint32_t v) {
    thread_state_ptr->words[1] &= ~0x8;
    thread_state_ptr->words[1] |= (v << 3) & 0x8;
}

static inline uint32_t __attribute__((__const__))
thread_state_get_tsType(thread_state_t thread_state) {
    return (thread_state.words[0] & 0xf) >> 0;
}

static inline thread_state_t __attribute__((__const__))
thread_state_set_tsType(thread_state_t thread_state, uint32_t v) {
    thread_state.words[0] &= ~0xf;
    thread_state.words[0] |= (v << 0) & 0xf;
    return thread_state;
}

static inline uint32_t __attribute__((__pure__))
thread_state_ptr_get_tsType(thread_state_t *thread_state_ptr) {
    return (thread_state_ptr->words[0] & 0xf) >> 0;
}

static inline void
thread_state_ptr_set_tsType(thread_state_t *thread_state_ptr, uint32_t v) {
    thread_state_ptr->words[0] &= ~0xf;
    thread_state_ptr->words[0] |= (v << 0) & 0xf;
}

struct reply_cap{
    uint32_t words[2];
};
typedef struct reply_cap reply_cap_t;

static inline reply_cap_t __attribute__((__const__)) reply_cap_new(uint32_t capType, uint32_t capTCBPtr) {
    reply_cap_t reply_cap;

    reply_cap.words[0] = 0;
    reply_cap.words[1] = 0;

    reply_cap.words[0] |= (capType & 0xf) << 28;
    reply_cap.words[0] |= (capTCBPtr & 0xfffffff0) >> 4;

    return reply_cap;
}


static inline uint32_t __attribute__((__const__))
reply_cap_get_capType(reply_cap_t reply_cap) {
    return (reply_cap.words[0] & 0xf0000000) >> 28;
}

static inline reply_cap_t __attribute__((__const__))
reply_cap_set_capType(reply_cap_t reply_cap, uint32_t v) {
    reply_cap.words[0] &= ~0xf0000000;
    reply_cap.words[0] |= (v << 28) & 0xf0000000;
    return reply_cap;
}

static inline uint32_t __attribute__((__pure__))
reply_cap_ptr_get_capType(reply_cap_t *reply_cap_ptr) {
    return (reply_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
reply_cap_ptr_set_capType(reply_cap_t *reply_cap_ptr, uint32_t v) {
    reply_cap_ptr->words[0] &= ~0xf0000000;
    reply_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
reply_cap_get_capTCBPtr(reply_cap_t reply_cap) {
    return (reply_cap.words[0] & 0xfffffff) << 4;
}

static inline reply_cap_t __attribute__((__const__))
reply_cap_set_capTCBPtr(reply_cap_t reply_cap, uint32_t v) {
    reply_cap.words[0] &= ~0xfffffff;
    reply_cap.words[0] |= (v >> 4) & 0xfffffff;
    return reply_cap;
}

static inline uint32_t __attribute__((__pure__))
reply_cap_ptr_get_capTCBPtr(reply_cap_t *reply_cap_ptr) {
    return (reply_cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
reply_cap_ptr_set_capTCBPtr(reply_cap_t *reply_cap_ptr, uint32_t v) {
    reply_cap_ptr->words[0] &= ~0xfffffff;
    reply_cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

struct irq_handler_cap{
    uint32_t words[2];
};
typedef struct irq_handler_cap irq_handler_cap_t;

static inline irq_handler_cap_t __attribute__((__const__)) irq_handler_cap_new(uint32_t capIRQ, uint32_t capType) {
    irq_handler_cap_t irq_handler_cap;

    irq_handler_cap.words[0] = 0;
    irq_handler_cap.words[1] = 0;

    irq_handler_cap.words[1] |= (capIRQ & 0xff) << 0;
    irq_handler_cap.words[0] |= (capType & 0xf) << 28;

    return irq_handler_cap;
}


static inline uint32_t __attribute__((__const__))
irq_handler_cap_get_capIRQ(irq_handler_cap_t irq_handler_cap) {
    return (irq_handler_cap.words[1] & 0xff) >> 0;
}

static inline irq_handler_cap_t __attribute__((__const__))
irq_handler_cap_set_capIRQ(irq_handler_cap_t irq_handler_cap, uint32_t v) {
    irq_handler_cap.words[1] &= ~0xff;
    irq_handler_cap.words[1] |= (v << 0) & 0xff;
    return irq_handler_cap;
}

static inline uint32_t __attribute__((__pure__))
irq_handler_cap_ptr_get_capIRQ(irq_handler_cap_t *irq_handler_cap_ptr) {
    return (irq_handler_cap_ptr->words[1] & 0xff) >> 0;
}

static inline void
irq_handler_cap_ptr_set_capIRQ(irq_handler_cap_t *irq_handler_cap_ptr, uint32_t v) {
    irq_handler_cap_ptr->words[1] &= ~0xff;
    irq_handler_cap_ptr->words[1] |= (v << 0) & 0xff;
}

static inline uint32_t __attribute__((__const__))
irq_handler_cap_get_capType(irq_handler_cap_t irq_handler_cap) {
    return (irq_handler_cap.words[0] & 0xf0000000) >> 28;
}

static inline irq_handler_cap_t __attribute__((__const__))
irq_handler_cap_set_capType(irq_handler_cap_t irq_handler_cap, uint32_t v) {
    irq_handler_cap.words[0] &= ~0xf0000000;
    irq_handler_cap.words[0] |= (v << 28) & 0xf0000000;
    return irq_handler_cap;
}

static inline uint32_t __attribute__((__pure__))
irq_handler_cap_ptr_get_capType(irq_handler_cap_t *irq_handler_cap_ptr) {
    return (irq_handler_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
irq_handler_cap_ptr_set_capType(irq_handler_cap_t *irq_handler_cap_ptr, uint32_t v) {
    irq_handler_cap_ptr->words[0] &= ~0xf0000000;
    irq_handler_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

struct pte_invalid{
    uint32_t words[1];
};
typedef struct pte_invalid pte_invalid_t;

static inline pte_invalid_t __attribute__((__const__)) pte_invalid_new(uint32_t pteType) {
    pte_invalid_t pte_invalid;

    pte_invalid.words[0] = 0;

    pte_invalid.words[0] |= (pteType & 0x3) << 0;

    return pte_invalid;
}


static inline uint32_t __attribute__((__const__))
pte_invalid_get_pteType(pte_invalid_t pte_invalid) {
    return (pte_invalid.words[0] & 0x3) >> 0;
}

static inline pte_invalid_t __attribute__((__const__))
pte_invalid_set_pteType(pte_invalid_t pte_invalid, uint32_t v) {
    pte_invalid.words[0] &= ~0x3;
    pte_invalid.words[0] |= (v << 0) & 0x3;
    return pte_invalid;
}

static inline uint32_t __attribute__((__pure__))
pte_invalid_ptr_get_pteType(pte_invalid_t *pte_invalid_ptr) {
    return (pte_invalid_ptr->words[0] & 0x3) >> 0;
}

static inline void
pte_invalid_ptr_set_pteType(pte_invalid_t *pte_invalid_ptr, uint32_t v) {
    pte_invalid_ptr->words[0] &= ~0x3;
    pte_invalid_ptr->words[0] |= (v << 0) & 0x3;
}

struct asid_control_cap{
    uint32_t words[2];
};
typedef struct asid_control_cap asid_control_cap_t;

static inline asid_control_cap_t __attribute__((__const__)) asid_control_cap_new(uint32_t capType) {
    asid_control_cap_t asid_control_cap;

    asid_control_cap.words[0] = 0;
    asid_control_cap.words[1] = 0;

    asid_control_cap.words[0] |= (capType & 0xf) << 28;

    return asid_control_cap;
}


static inline uint32_t __attribute__((__const__))
asid_control_cap_get_capType(asid_control_cap_t asid_control_cap) {
    return (asid_control_cap.words[0] & 0xf0000000) >> 28;
}

static inline asid_control_cap_t __attribute__((__const__))
asid_control_cap_set_capType(asid_control_cap_t asid_control_cap, uint32_t v) {
    asid_control_cap.words[0] &= ~0xf0000000;
    asid_control_cap.words[0] |= (v << 28) & 0xf0000000;
    return asid_control_cap;
}

static inline uint32_t __attribute__((__pure__))
asid_control_cap_ptr_get_capType(asid_control_cap_t *asid_control_cap_ptr) {
    return (asid_control_cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
asid_control_cap_ptr_set_capType(asid_control_cap_t *asid_control_cap_ptr, uint32_t v) {
    asid_control_cap_ptr->words[0] &= ~0xf0000000;
    asid_control_cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

struct pte_small{
    uint32_t words[1];
};
typedef struct pte_small pte_small_t;

static inline pte_small_t __attribute__((__const__)) pte_small_new(uint32_t address, uint32_t nG, uint32_t S, uint32_t APX, uint32_t TEX, uint32_t AP, uint32_t C, uint32_t B, uint32_t pteType, uint32_t XN) {
    pte_small_t pte_small;

    pte_small.words[0] = 0;

    pte_small.words[0] |= (address & 0xfffff000) >> 0;
    pte_small.words[0] |= (nG & 0x1) << 11;
    pte_small.words[0] |= (S & 0x1) << 10;
    pte_small.words[0] |= (APX & 0x1) << 9;
    pte_small.words[0] |= (TEX & 0x7) << 6;
    pte_small.words[0] |= (AP & 0x3) << 4;
    pte_small.words[0] |= (C & 0x1) << 3;
    pte_small.words[0] |= (B & 0x1) << 2;
    pte_small.words[0] |= (pteType & 0x1) << 1;
    pte_small.words[0] |= (XN & 0x1) << 0;

    return pte_small;
}


static inline uint32_t __attribute__((__const__))
pte_small_get_address(pte_small_t pte_small) {
    return (pte_small.words[0] & 0xfffff000) << 0;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_address(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0xfffff000;
    pte_small.words[0] |= (v >> 0) & 0xfffff000;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_address(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0xfffff000) << 0;
}

static inline void
pte_small_ptr_set_address(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0xfffff000;
    pte_small_ptr->words[0] |= (v >> 0) & 0xfffff000;
}

static inline uint32_t __attribute__((__const__))
pte_small_get_nG(pte_small_t pte_small) {
    return (pte_small.words[0] & 0x800) >> 11;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_nG(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0x800;
    pte_small.words[0] |= (v << 11) & 0x800;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_nG(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0x800) >> 11;
}

static inline void
pte_small_ptr_set_nG(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0x800;
    pte_small_ptr->words[0] |= (v << 11) & 0x800;
}

static inline uint32_t __attribute__((__const__))
pte_small_get_S(pte_small_t pte_small) {
    return (pte_small.words[0] & 0x400) >> 10;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_S(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0x400;
    pte_small.words[0] |= (v << 10) & 0x400;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_S(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0x400) >> 10;
}

static inline void
pte_small_ptr_set_S(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0x400;
    pte_small_ptr->words[0] |= (v << 10) & 0x400;
}

static inline uint32_t __attribute__((__const__))
pte_small_get_APX(pte_small_t pte_small) {
    return (pte_small.words[0] & 0x200) >> 9;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_APX(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0x200;
    pte_small.words[0] |= (v << 9) & 0x200;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_APX(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0x200) >> 9;
}

static inline void
pte_small_ptr_set_APX(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0x200;
    pte_small_ptr->words[0] |= (v << 9) & 0x200;
}

static inline uint32_t __attribute__((__const__))
pte_small_get_TEX(pte_small_t pte_small) {
    return (pte_small.words[0] & 0x1c0) >> 6;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_TEX(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0x1c0;
    pte_small.words[0] |= (v << 6) & 0x1c0;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_TEX(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0x1c0) >> 6;
}

static inline void
pte_small_ptr_set_TEX(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0x1c0;
    pte_small_ptr->words[0] |= (v << 6) & 0x1c0;
}

static inline uint32_t __attribute__((__const__))
pte_small_get_AP(pte_small_t pte_small) {
    return (pte_small.words[0] & 0x30) >> 4;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_AP(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0x30;
    pte_small.words[0] |= (v << 4) & 0x30;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_AP(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0x30) >> 4;
}

static inline void
pte_small_ptr_set_AP(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0x30;
    pte_small_ptr->words[0] |= (v << 4) & 0x30;
}

static inline uint32_t __attribute__((__const__))
pte_small_get_C(pte_small_t pte_small) {
    return (pte_small.words[0] & 0x8) >> 3;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_C(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0x8;
    pte_small.words[0] |= (v << 3) & 0x8;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_C(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0x8) >> 3;
}

static inline void
pte_small_ptr_set_C(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0x8;
    pte_small_ptr->words[0] |= (v << 3) & 0x8;
}

static inline uint32_t __attribute__((__const__))
pte_small_get_B(pte_small_t pte_small) {
    return (pte_small.words[0] & 0x4) >> 2;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_B(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0x4;
    pte_small.words[0] |= (v << 2) & 0x4;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_B(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0x4) >> 2;
}

static inline void
pte_small_ptr_set_B(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0x4;
    pte_small_ptr->words[0] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
pte_small_get_pteType(pte_small_t pte_small) {
    return (pte_small.words[0] & 0x2) >> 1;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_pteType(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0x2;
    pte_small.words[0] |= (v << 1) & 0x2;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_pteType(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0x2) >> 1;
}

static inline void
pte_small_ptr_set_pteType(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0x2;
    pte_small_ptr->words[0] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
pte_small_get_XN(pte_small_t pte_small) {
    return (pte_small.words[0] & 0x1) >> 0;
}

static inline pte_small_t __attribute__((__const__))
pte_small_set_XN(pte_small_t pte_small, uint32_t v) {
    pte_small.words[0] &= ~0x1;
    pte_small.words[0] |= (v << 0) & 0x1;
    return pte_small;
}

static inline uint32_t __attribute__((__pure__))
pte_small_ptr_get_XN(pte_small_t *pte_small_ptr) {
    return (pte_small_ptr->words[0] & 0x1) >> 0;
}

static inline void
pte_small_ptr_set_XN(pte_small_t *pte_small_ptr, uint32_t v) {
    pte_small_ptr->words[0] &= ~0x1;
    pte_small_ptr->words[0] |= (v << 0) & 0x1;
}

struct pde_reserved{
    uint32_t words[1];
};
typedef struct pde_reserved pde_reserved_t;

static inline pde_reserved_t __attribute__((__const__)) pde_reserved_new(uint32_t pdeType) {
    pde_reserved_t pde_reserved;

    pde_reserved.words[0] = 0;

    pde_reserved.words[0] |= (pdeType & 0x3) << 0;

    return pde_reserved;
}


static inline uint32_t __attribute__((__const__))
pde_reserved_get_pdeType(pde_reserved_t pde_reserved) {
    return (pde_reserved.words[0] & 0x3) >> 0;
}

static inline pde_reserved_t __attribute__((__const__))
pde_reserved_set_pdeType(pde_reserved_t pde_reserved, uint32_t v) {
    pde_reserved.words[0] &= ~0x3;
    pde_reserved.words[0] |= (v << 0) & 0x3;
    return pde_reserved;
}

static inline uint32_t __attribute__((__pure__))
pde_reserved_ptr_get_pdeType(pde_reserved_t *pde_reserved_ptr) {
    return (pde_reserved_ptr->words[0] & 0x3) >> 0;
}

static inline void
pde_reserved_ptr_set_pdeType(pde_reserved_t *pde_reserved_ptr, uint32_t v) {
    pde_reserved_ptr->words[0] &= ~0x3;
    pde_reserved_ptr->words[0] |= (v << 0) & 0x3;
}

struct mdb_node{
    uint32_t words[2];
};
typedef struct mdb_node mdb_node_t;

static inline mdb_node_t __attribute__((__const__)) mdb_node_new(uint32_t mdbNext, uint32_t mdbRevocable, uint32_t mdbFirstBadged, uint32_t mdbPrev) {
    mdb_node_t mdb_node;

    mdb_node.words[0] = 0;
    mdb_node.words[1] = 0;

    mdb_node.words[1] |= (mdbNext & 0xfffffff8) >> 0;
    mdb_node.words[1] |= (mdbRevocable & 0x1) << 1;
    mdb_node.words[1] |= (mdbFirstBadged & 0x1) << 0;
    mdb_node.words[0] |= (mdbPrev & 0xfffffff8) >> 0;

    return mdb_node;
}


static inline uint32_t __attribute__((__const__))
mdb_node_get_mdbNext(mdb_node_t mdb_node) {
    return (mdb_node.words[1] & 0xfffffff8) << 0;
}

static inline mdb_node_t __attribute__((__const__))
mdb_node_set_mdbNext(mdb_node_t mdb_node, uint32_t v) {
    mdb_node.words[1] &= ~0xfffffff8;
    mdb_node.words[1] |= (v >> 0) & 0xfffffff8;
    return mdb_node;
}

static inline uint32_t __attribute__((__pure__))
mdb_node_ptr_get_mdbNext(mdb_node_t *mdb_node_ptr) {
    return (mdb_node_ptr->words[1] & 0xfffffff8) << 0;
}

static inline void
mdb_node_ptr_set_mdbNext(mdb_node_t *mdb_node_ptr, uint32_t v) {
    mdb_node_ptr->words[1] &= ~0xfffffff8;
    mdb_node_ptr->words[1] |= (v >> 0) & 0xfffffff8;
}

static inline uint32_t __attribute__((__const__))
mdb_node_get_mdbRevocable(mdb_node_t mdb_node) {
    return (mdb_node.words[1] & 0x2) >> 1;
}

static inline mdb_node_t __attribute__((__const__))
mdb_node_set_mdbRevocable(mdb_node_t mdb_node, uint32_t v) {
    mdb_node.words[1] &= ~0x2;
    mdb_node.words[1] |= (v << 1) & 0x2;
    return mdb_node;
}

static inline uint32_t __attribute__((__pure__))
mdb_node_ptr_get_mdbRevocable(mdb_node_t *mdb_node_ptr) {
    return (mdb_node_ptr->words[1] & 0x2) >> 1;
}

static inline void
mdb_node_ptr_set_mdbRevocable(mdb_node_t *mdb_node_ptr, uint32_t v) {
    mdb_node_ptr->words[1] &= ~0x2;
    mdb_node_ptr->words[1] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
mdb_node_get_mdbFirstBadged(mdb_node_t mdb_node) {
    return (mdb_node.words[1] & 0x1) >> 0;
}

static inline mdb_node_t __attribute__((__const__))
mdb_node_set_mdbFirstBadged(mdb_node_t mdb_node, uint32_t v) {
    mdb_node.words[1] &= ~0x1;
    mdb_node.words[1] |= (v << 0) & 0x1;
    return mdb_node;
}

static inline uint32_t __attribute__((__pure__))
mdb_node_ptr_get_mdbFirstBadged(mdb_node_t *mdb_node_ptr) {
    return (mdb_node_ptr->words[1] & 0x1) >> 0;
}

static inline void
mdb_node_ptr_set_mdbFirstBadged(mdb_node_t *mdb_node_ptr, uint32_t v) {
    mdb_node_ptr->words[1] &= ~0x1;
    mdb_node_ptr->words[1] |= (v << 0) & 0x1;
}

static inline uint32_t __attribute__((__const__))
mdb_node_get_mdbPrev(mdb_node_t mdb_node) {
    return (mdb_node.words[0] & 0xfffffff8) << 0;
}

static inline mdb_node_t __attribute__((__const__))
mdb_node_set_mdbPrev(mdb_node_t mdb_node, uint32_t v) {
    mdb_node.words[0] &= ~0xfffffff8;
    mdb_node.words[0] |= (v >> 0) & 0xfffffff8;
    return mdb_node;
}

static inline uint32_t __attribute__((__pure__))
mdb_node_ptr_get_mdbPrev(mdb_node_t *mdb_node_ptr) {
    return (mdb_node_ptr->words[0] & 0xfffffff8) << 0;
}

static inline void
mdb_node_ptr_set_mdbPrev(mdb_node_t *mdb_node_ptr, uint32_t v) {
    mdb_node_ptr->words[0] &= ~0xfffffff8;
    mdb_node_ptr->words[0] |= (v >> 0) & 0xfffffff8;
}

struct unknown_syscall{
    uint32_t words[2];
};
typedef struct unknown_syscall unknown_syscall_t;

static inline unknown_syscall_t __attribute__((__const__)) unknown_syscall_new(uint32_t syscallNumber, uint32_t faultType) {
    unknown_syscall_t unknown_syscall;

    unknown_syscall.words[0] = 0;
    unknown_syscall.words[1] = 0;

    unknown_syscall.words[1] |= syscallNumber << 0;
    unknown_syscall.words[0] |= (faultType & 0x7) << 0;

    return unknown_syscall;
}


static inline uint32_t __attribute__((__const__))
unknown_syscall_get_syscallNumber(unknown_syscall_t unknown_syscall) {
    return (unknown_syscall.words[1] & 0xffffffff) >> 0;
}

static inline unknown_syscall_t __attribute__((__const__))
unknown_syscall_set_syscallNumber(unknown_syscall_t unknown_syscall, uint32_t v) {
    unknown_syscall.words[1] &= ~0xffffffff;
    unknown_syscall.words[1] |= (v << 0) & 0xffffffff;
    return unknown_syscall;
}

static inline uint32_t __attribute__((__pure__))
unknown_syscall_ptr_get_syscallNumber(unknown_syscall_t *unknown_syscall_ptr) {
    return (unknown_syscall_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
unknown_syscall_ptr_set_syscallNumber(unknown_syscall_t *unknown_syscall_ptr, uint32_t v) {
    unknown_syscall_ptr->words[1] &= ~0xffffffff;
    unknown_syscall_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
unknown_syscall_get_faultType(unknown_syscall_t unknown_syscall) {
    return (unknown_syscall.words[0] & 0x7) >> 0;
}

static inline unknown_syscall_t __attribute__((__const__))
unknown_syscall_set_faultType(unknown_syscall_t unknown_syscall, uint32_t v) {
    unknown_syscall.words[0] &= ~0x7;
    unknown_syscall.words[0] |= (v << 0) & 0x7;
    return unknown_syscall;
}

static inline uint32_t __attribute__((__pure__))
unknown_syscall_ptr_get_faultType(unknown_syscall_t *unknown_syscall_ptr) {
    return (unknown_syscall_ptr->words[0] & 0x7) >> 0;
}

static inline void
unknown_syscall_ptr_set_faultType(unknown_syscall_t *unknown_syscall_ptr, uint32_t v) {
    unknown_syscall_ptr->words[0] &= ~0x7;
    unknown_syscall_ptr->words[0] |= (v << 0) & 0x7;
}

struct fault{
    uint32_t words[2];
};
typedef struct fault fault_t;

enum fault_tag {
    fault_null_fault = 0,
    fault_cap_fault = 1,
    fault_vm_fault = 2,
    fault_unknown_syscall = 3,
    fault_user_exception = 4
};
typedef enum fault_tag fault_tag_t;

static inline uint32_t __attribute__((__const__))
fault_get_faultType(fault_t fault) {
    return (fault.words[0] >> 0) & 0x7;
}

static inline fault_t __attribute__((__const__))
fault_set_faultType(fault_t fault, uint32_t v) {
    fault.words[0] &= ~0x7;
    fault.words[0] |= (v << 0) & 0x7;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_ptr_get_faultType(fault_t *fault_ptr) {
    return (fault_ptr->words[0] >> 0) & 0x7;
}

static inline void
fault_ptr_set_faultType(fault_t *fault_ptr, uint32_t v) {
    fault_ptr->words[0] &= ~0x7;
    fault_ptr->words[0] |= (v << 0) & 0x7;
}

static inline fault_t __attribute__((__const__)) fault_null_fault_new(void) {
    fault_t fault;

    fault.words[0] = 0;
    fault.words[1] = 0;

    fault.words[0] |= (0 & 0x7) << 0;

    return fault;
}


static inline uint32_t __attribute__((__const__))
fault_null_fault_get_faultType(fault_t fault) {
    ;


    return (fault.words[0] & 0x7) >> 0;
}

static inline fault_t __attribute__((__const__))
fault_null_fault_set_faultType(fault_t fault, uint32_t v) {
    ;


    fault.words[0] &= ~0x7;
    fault.words[0] |= (v << 0) & 0x7;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_null_fault_ptr_get_faultType(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[0] & 0x7) >> 0;
}

static inline void
fault_null_fault_ptr_set_faultType(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[0] &= ~0x7;
    fault_ptr->words[0] |= (v << 0) & 0x7;
}

static inline fault_t __attribute__((__const__)) fault_cap_fault_new(uint32_t address, uint32_t inReceivePhase) {
    fault_t fault;

    fault.words[0] = 0;
    fault.words[1] = 0;

    fault.words[1] |= address << 0;
    fault.words[0] |= (inReceivePhase & 0x1) << 31;
    fault.words[0] |= (1 & 0x7) << 0;

    return fault;
}


static inline uint32_t __attribute__((__const__))
fault_cap_fault_get_address(fault_t fault) {
    ;


    return (fault.words[1] & 0xffffffff) >> 0;
}

static inline fault_t __attribute__((__const__))
fault_cap_fault_set_address(fault_t fault, uint32_t v) {
    ;


    fault.words[1] &= ~0xffffffff;
    fault.words[1] |= (v << 0) & 0xffffffff;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_cap_fault_ptr_get_address(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
fault_cap_fault_ptr_set_address(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[1] &= ~0xffffffff;
    fault_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
fault_cap_fault_get_inReceivePhase(fault_t fault) {
    ;


    return (fault.words[0] & 0x80000000) >> 31;
}

static inline fault_t __attribute__((__const__))
fault_cap_fault_set_inReceivePhase(fault_t fault, uint32_t v) {
    ;


    fault.words[0] &= ~0x80000000;
    fault.words[0] |= (v << 31) & 0x80000000;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_cap_fault_ptr_get_inReceivePhase(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[0] & 0x80000000) >> 31;
}

static inline void
fault_cap_fault_ptr_set_inReceivePhase(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[0] &= ~0x80000000;
    fault_ptr->words[0] |= (v << 31) & 0x80000000;
}

static inline uint32_t __attribute__((__const__))
fault_cap_fault_get_faultType(fault_t fault) {
    ;


    return (fault.words[0] & 0x7) >> 0;
}

static inline fault_t __attribute__((__const__))
fault_cap_fault_set_faultType(fault_t fault, uint32_t v) {
    ;


    fault.words[0] &= ~0x7;
    fault.words[0] |= (v << 0) & 0x7;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_cap_fault_ptr_get_faultType(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[0] & 0x7) >> 0;
}

static inline void
fault_cap_fault_ptr_set_faultType(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[0] &= ~0x7;
    fault_ptr->words[0] |= (v << 0) & 0x7;
}

static inline fault_t __attribute__((__const__)) fault_vm_fault_new(uint32_t address, uint32_t FSR, uint32_t instructionFault) {
    fault_t fault;

    fault.words[0] = 0;
    fault.words[1] = 0;

    fault.words[1] |= address << 0;
    fault.words[0] |= (FSR & 0xfff) << 20;
    fault.words[0] |= (instructionFault & 0x1) << 19;
    fault.words[0] |= (2 & 0x7) << 0;

    return fault;
}


static inline uint32_t __attribute__((__const__))
fault_vm_fault_get_address(fault_t fault) {
    ;


    return (fault.words[1] & 0xffffffff) >> 0;
}

static inline fault_t __attribute__((__const__))
fault_vm_fault_set_address(fault_t fault, uint32_t v) {
    ;


    fault.words[1] &= ~0xffffffff;
    fault.words[1] |= (v << 0) & 0xffffffff;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_vm_fault_ptr_get_address(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
fault_vm_fault_ptr_set_address(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[1] &= ~0xffffffff;
    fault_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
fault_vm_fault_get_FSR(fault_t fault) {
    ;


    return (fault.words[0] & 0xfff00000) >> 20;
}

static inline fault_t __attribute__((__const__))
fault_vm_fault_set_FSR(fault_t fault, uint32_t v) {
    ;


    fault.words[0] &= ~0xfff00000;
    fault.words[0] |= (v << 20) & 0xfff00000;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_vm_fault_ptr_get_FSR(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[0] & 0xfff00000) >> 20;
}

static inline void
fault_vm_fault_ptr_set_FSR(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[0] &= ~0xfff00000;
    fault_ptr->words[0] |= (v << 20) & 0xfff00000;
}

static inline uint32_t __attribute__((__const__))
fault_vm_fault_get_instructionFault(fault_t fault) {
    ;


    return (fault.words[0] & 0x80000) >> 19;
}

static inline fault_t __attribute__((__const__))
fault_vm_fault_set_instructionFault(fault_t fault, uint32_t v) {
    ;


    fault.words[0] &= ~0x80000;
    fault.words[0] |= (v << 19) & 0x80000;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_vm_fault_ptr_get_instructionFault(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[0] & 0x80000) >> 19;
}

static inline void
fault_vm_fault_ptr_set_instructionFault(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[0] &= ~0x80000;
    fault_ptr->words[0] |= (v << 19) & 0x80000;
}

static inline uint32_t __attribute__((__const__))
fault_vm_fault_get_faultType(fault_t fault) {
    ;


    return (fault.words[0] & 0x7) >> 0;
}

static inline fault_t __attribute__((__const__))
fault_vm_fault_set_faultType(fault_t fault, uint32_t v) {
    ;


    fault.words[0] &= ~0x7;
    fault.words[0] |= (v << 0) & 0x7;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_vm_fault_ptr_get_faultType(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[0] & 0x7) >> 0;
}

static inline void
fault_vm_fault_ptr_set_faultType(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[0] &= ~0x7;
    fault_ptr->words[0] |= (v << 0) & 0x7;
}

static inline fault_t __attribute__((__const__)) fault_unknown_syscall_new(uint32_t syscallNumber) {
    fault_t fault;

    fault.words[0] = 0;
    fault.words[1] = 0;

    fault.words[1] |= syscallNumber << 0;
    fault.words[0] |= (3 & 0x7) << 0;

    return fault;
}


static inline uint32_t __attribute__((__const__))
fault_unknown_syscall_get_syscallNumber(fault_t fault) {
    ;


    return (fault.words[1] & 0xffffffff) >> 0;
}

static inline fault_t __attribute__((__const__))
fault_unknown_syscall_set_syscallNumber(fault_t fault, uint32_t v) {
    ;


    fault.words[1] &= ~0xffffffff;
    fault.words[1] |= (v << 0) & 0xffffffff;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_unknown_syscall_ptr_get_syscallNumber(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
fault_unknown_syscall_ptr_set_syscallNumber(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[1] &= ~0xffffffff;
    fault_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
fault_unknown_syscall_get_faultType(fault_t fault) {
    ;


    return (fault.words[0] & 0x7) >> 0;
}

static inline fault_t __attribute__((__const__))
fault_unknown_syscall_set_faultType(fault_t fault, uint32_t v) {
    ;


    fault.words[0] &= ~0x7;
    fault.words[0] |= (v << 0) & 0x7;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_unknown_syscall_ptr_get_faultType(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[0] & 0x7) >> 0;
}

static inline void
fault_unknown_syscall_ptr_set_faultType(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[0] &= ~0x7;
    fault_ptr->words[0] |= (v << 0) & 0x7;
}

static inline fault_t __attribute__((__const__)) fault_user_exception_new(uint32_t number, uint32_t code) {
    fault_t fault;

    fault.words[0] = 0;
    fault.words[1] = 0;

    fault.words[1] |= number << 0;
    fault.words[0] |= (code & 0x1fffffff) << 3;
    fault.words[0] |= (4 & 0x7) << 0;

    return fault;
}


static inline uint32_t __attribute__((__const__))
fault_user_exception_get_number(fault_t fault) {
    ;


    return (fault.words[1] & 0xffffffff) >> 0;
}

static inline fault_t __attribute__((__const__))
fault_user_exception_set_number(fault_t fault, uint32_t v) {
    ;


    fault.words[1] &= ~0xffffffff;
    fault.words[1] |= (v << 0) & 0xffffffff;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_user_exception_ptr_get_number(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
fault_user_exception_ptr_set_number(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[1] &= ~0xffffffff;
    fault_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
fault_user_exception_get_code(fault_t fault) {
    ;


    return (fault.words[0] & 0xfffffff8) >> 3;
}

static inline fault_t __attribute__((__const__))
fault_user_exception_set_code(fault_t fault, uint32_t v) {
    ;


    fault.words[0] &= ~0xfffffff8;
    fault.words[0] |= (v << 3) & 0xfffffff8;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_user_exception_ptr_get_code(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[0] & 0xfffffff8) >> 3;
}

static inline void
fault_user_exception_ptr_set_code(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[0] &= ~0xfffffff8;
    fault_ptr->words[0] |= (v << 3) & 0xfffffff8;
}

static inline uint32_t __attribute__((__const__))
fault_user_exception_get_faultType(fault_t fault) {
    ;


    return (fault.words[0] & 0x7) >> 0;
}

static inline fault_t __attribute__((__const__))
fault_user_exception_set_faultType(fault_t fault, uint32_t v) {
    ;


    fault.words[0] &= ~0x7;
    fault.words[0] |= (v << 0) & 0x7;
    return fault;
}

static inline uint32_t __attribute__((__pure__))
fault_user_exception_ptr_get_faultType(fault_t *fault_ptr) {
    ;


    return (fault_ptr->words[0] & 0x7) >> 0;
}

static inline void
fault_user_exception_ptr_set_faultType(fault_t *fault_ptr,
                                      uint32_t v) {
    ;


    fault_ptr->words[0] &= ~0x7;
    fault_ptr->words[0] |= (v << 0) & 0x7;
}

struct pde{
    uint32_t words[1];
};
typedef struct pde pde_t;

enum pde_tag {
    pde_pde_invalid = 0,
    pde_pde_coarse = 1,
    pde_pde_section = 2,
    pde_pde_reserved = 3
};
typedef enum pde_tag pde_tag_t;

static inline uint32_t __attribute__((__const__))
pde_get_pdeType(pde_t pde) {
    return (pde.words[0] >> 0) & 0x3;
}

static inline pde_t __attribute__((__const__))
pde_set_pdeType(pde_t pde, uint32_t v) {
    pde.words[0] &= ~0x3;
    pde.words[0] |= (v << 0) & 0x3;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_ptr_get_pdeType(pde_t *pde_ptr) {
    return (pde_ptr->words[0] >> 0) & 0x3;
}

static inline void
pde_ptr_set_pdeType(pde_t *pde_ptr, uint32_t v) {
    pde_ptr->words[0] &= ~0x3;
    pde_ptr->words[0] |= (v << 0) & 0x3;
}

static inline pde_t __attribute__((__const__)) pde_pde_invalid_new(void) {
    pde_t pde;

    pde.words[0] = 0;

    pde.words[0] |= (0 & 0x3) << 0;

    return pde;
}


static inline uint32_t __attribute__((__const__))
pde_pde_invalid_get_pdeType(pde_t pde) {
    ;


    return (pde.words[0] & 0x3) >> 0;
}

static inline pde_t __attribute__((__const__))
pde_pde_invalid_set_pdeType(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x3;
    pde.words[0] |= (v << 0) & 0x3;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_invalid_ptr_get_pdeType(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x3) >> 0;
}

static inline void
pde_pde_invalid_ptr_set_pdeType(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x3;
    pde_ptr->words[0] |= (v << 0) & 0x3;
}

static inline pde_t __attribute__((__const__)) pde_pde_coarse_new(uint32_t address, uint32_t P, uint32_t Domain) {
    pde_t pde;

    pde.words[0] = 0;

    pde.words[0] |= (address & 0xfffffc00) >> 0;
    pde.words[0] |= (P & 0x1) << 9;
    pde.words[0] |= (Domain & 0xf) << 5;
    pde.words[0] |= (1 & 0x3) << 0;

    return pde;
}


static inline uint32_t __attribute__((__const__))
pde_pde_coarse_get_address(pde_t pde) {
    ;


    return (pde.words[0] & 0xfffffc00) << 0;
}

static inline pde_t __attribute__((__const__))
pde_pde_coarse_set_address(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0xfffffc00;
    pde.words[0] |= (v >> 0) & 0xfffffc00;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_coarse_ptr_get_address(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0xfffffc00) << 0;
}

static inline void
pde_pde_coarse_ptr_set_address(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0xfffffc00;
    pde_ptr->words[0] |= (v >> 0) & 0xfffffc00;
}

static inline uint32_t __attribute__((__const__))
pde_pde_coarse_get_P(pde_t pde) {
    ;


    return (pde.words[0] & 0x200) >> 9;
}

static inline pde_t __attribute__((__const__))
pde_pde_coarse_set_P(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x200;
    pde.words[0] |= (v << 9) & 0x200;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_coarse_ptr_get_P(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x200) >> 9;
}

static inline void
pde_pde_coarse_ptr_set_P(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x200;
    pde_ptr->words[0] |= (v << 9) & 0x200;
}

static inline uint32_t __attribute__((__const__))
pde_pde_coarse_get_Domain(pde_t pde) {
    ;


    return (pde.words[0] & 0x1e0) >> 5;
}

static inline pde_t __attribute__((__const__))
pde_pde_coarse_set_Domain(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x1e0;
    pde.words[0] |= (v << 5) & 0x1e0;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_coarse_ptr_get_Domain(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x1e0) >> 5;
}

static inline void
pde_pde_coarse_ptr_set_Domain(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x1e0;
    pde_ptr->words[0] |= (v << 5) & 0x1e0;
}

static inline uint32_t __attribute__((__const__))
pde_pde_coarse_get_pdeType(pde_t pde) {
    ;


    return (pde.words[0] & 0x3) >> 0;
}

static inline pde_t __attribute__((__const__))
pde_pde_coarse_set_pdeType(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x3;
    pde.words[0] |= (v << 0) & 0x3;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_coarse_ptr_get_pdeType(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x3) >> 0;
}

static inline void
pde_pde_coarse_ptr_set_pdeType(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x3;
    pde_ptr->words[0] |= (v << 0) & 0x3;
}

static inline pde_t __attribute__((__const__)) pde_pde_section_new(uint32_t address, uint32_t size, uint32_t nG, uint32_t S, uint32_t APX, uint32_t TEX, uint32_t AP, uint32_t P, uint32_t Domain, uint32_t XN, uint32_t C, uint32_t B) {
    pde_t pde;

    pde.words[0] = 0;

    pde.words[0] |= (address & 0xfff00000) >> 0;
    pde.words[0] |= (size & 0x1) << 18;
    pde.words[0] |= (nG & 0x1) << 17;
    pde.words[0] |= (S & 0x1) << 16;
    pde.words[0] |= (APX & 0x1) << 15;
    pde.words[0] |= (TEX & 0x7) << 12;
    pde.words[0] |= (AP & 0x3) << 10;
    pde.words[0] |= (P & 0x1) << 9;
    pde.words[0] |= (Domain & 0xf) << 5;
    pde.words[0] |= (XN & 0x1) << 4;
    pde.words[0] |= (C & 0x1) << 3;
    pde.words[0] |= (B & 0x1) << 2;
    pde.words[0] |= (2 & 0x3) << 0;

    return pde;
}


static inline uint32_t __attribute__((__const__))
pde_pde_section_get_address(pde_t pde) {
    ;


    return (pde.words[0] & 0xfff00000) << 0;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_address(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0xfff00000;
    pde.words[0] |= (v >> 0) & 0xfff00000;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_address(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0xfff00000) << 0;
}

static inline void
pde_pde_section_ptr_set_address(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0xfff00000;
    pde_ptr->words[0] |= (v >> 0) & 0xfff00000;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_size(pde_t pde) {
    ;


    return (pde.words[0] & 0x40000) >> 18;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_size(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x40000;
    pde.words[0] |= (v << 18) & 0x40000;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_size(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x40000) >> 18;
}

static inline void
pde_pde_section_ptr_set_size(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x40000;
    pde_ptr->words[0] |= (v << 18) & 0x40000;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_nG(pde_t pde) {
    ;


    return (pde.words[0] & 0x20000) >> 17;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_nG(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x20000;
    pde.words[0] |= (v << 17) & 0x20000;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_nG(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x20000) >> 17;
}

static inline void
pde_pde_section_ptr_set_nG(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x20000;
    pde_ptr->words[0] |= (v << 17) & 0x20000;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_S(pde_t pde) {
    ;


    return (pde.words[0] & 0x10000) >> 16;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_S(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x10000;
    pde.words[0] |= (v << 16) & 0x10000;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_S(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x10000) >> 16;
}

static inline void
pde_pde_section_ptr_set_S(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x10000;
    pde_ptr->words[0] |= (v << 16) & 0x10000;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_APX(pde_t pde) {
    ;


    return (pde.words[0] & 0x8000) >> 15;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_APX(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x8000;
    pde.words[0] |= (v << 15) & 0x8000;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_APX(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x8000) >> 15;
}

static inline void
pde_pde_section_ptr_set_APX(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x8000;
    pde_ptr->words[0] |= (v << 15) & 0x8000;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_TEX(pde_t pde) {
    ;


    return (pde.words[0] & 0x7000) >> 12;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_TEX(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x7000;
    pde.words[0] |= (v << 12) & 0x7000;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_TEX(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x7000) >> 12;
}

static inline void
pde_pde_section_ptr_set_TEX(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x7000;
    pde_ptr->words[0] |= (v << 12) & 0x7000;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_AP(pde_t pde) {
    ;


    return (pde.words[0] & 0xc00) >> 10;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_AP(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0xc00;
    pde.words[0] |= (v << 10) & 0xc00;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_AP(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0xc00) >> 10;
}

static inline void
pde_pde_section_ptr_set_AP(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0xc00;
    pde_ptr->words[0] |= (v << 10) & 0xc00;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_P(pde_t pde) {
    ;


    return (pde.words[0] & 0x200) >> 9;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_P(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x200;
    pde.words[0] |= (v << 9) & 0x200;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_P(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x200) >> 9;
}

static inline void
pde_pde_section_ptr_set_P(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x200;
    pde_ptr->words[0] |= (v << 9) & 0x200;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_Domain(pde_t pde) {
    ;


    return (pde.words[0] & 0x1e0) >> 5;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_Domain(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x1e0;
    pde.words[0] |= (v << 5) & 0x1e0;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_Domain(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x1e0) >> 5;
}

static inline void
pde_pde_section_ptr_set_Domain(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x1e0;
    pde_ptr->words[0] |= (v << 5) & 0x1e0;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_XN(pde_t pde) {
    ;


    return (pde.words[0] & 0x10) >> 4;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_XN(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x10;
    pde.words[0] |= (v << 4) & 0x10;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_XN(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x10) >> 4;
}

static inline void
pde_pde_section_ptr_set_XN(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x10;
    pde_ptr->words[0] |= (v << 4) & 0x10;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_C(pde_t pde) {
    ;


    return (pde.words[0] & 0x8) >> 3;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_C(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x8;
    pde.words[0] |= (v << 3) & 0x8;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_C(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x8) >> 3;
}

static inline void
pde_pde_section_ptr_set_C(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x8;
    pde_ptr->words[0] |= (v << 3) & 0x8;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_B(pde_t pde) {
    ;


    return (pde.words[0] & 0x4) >> 2;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_B(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x4;
    pde.words[0] |= (v << 2) & 0x4;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_B(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x4) >> 2;
}

static inline void
pde_pde_section_ptr_set_B(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x4;
    pde_ptr->words[0] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
pde_pde_section_get_pdeType(pde_t pde) {
    ;


    return (pde.words[0] & 0x3) >> 0;
}

static inline pde_t __attribute__((__const__))
pde_pde_section_set_pdeType(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x3;
    pde.words[0] |= (v << 0) & 0x3;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_section_ptr_get_pdeType(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x3) >> 0;
}

static inline void
pde_pde_section_ptr_set_pdeType(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x3;
    pde_ptr->words[0] |= (v << 0) & 0x3;
}

static inline pde_t __attribute__((__const__)) pde_pde_reserved_new(void) {
    pde_t pde;

    pde.words[0] = 0;

    pde.words[0] |= (3 & 0x3) << 0;

    return pde;
}


static inline uint32_t __attribute__((__const__))
pde_pde_reserved_get_pdeType(pde_t pde) {
    ;


    return (pde.words[0] & 0x3) >> 0;
}

static inline pde_t __attribute__((__const__))
pde_pde_reserved_set_pdeType(pde_t pde, uint32_t v) {
    ;


    pde.words[0] &= ~0x3;
    pde.words[0] |= (v << 0) & 0x3;
    return pde;
}

static inline uint32_t __attribute__((__pure__))
pde_pde_reserved_ptr_get_pdeType(pde_t *pde_ptr) {
    ;


    return (pde_ptr->words[0] & 0x3) >> 0;
}

static inline void
pde_pde_reserved_ptr_set_pdeType(pde_t *pde_ptr,
                                      uint32_t v) {
    ;


    pde_ptr->words[0] &= ~0x3;
    pde_ptr->words[0] |= (v << 0) & 0x3;
}

struct cap{
    uint32_t words[2];
};
typedef struct cap cap_t;

enum cap_tag {
    cap_null_cap = 0,
    cap_untyped_cap = 1,
    cap_endpoint_cap = 2,
    cap_async_endpoint_cap = 3,
    cap_reply_cap = 4,
    cap_cnode_cap = 5,
    cap_thread_cap = 6,
    cap_irq_control_cap = 7,
    cap_irq_handler_cap = 8,
    cap_zombie_cap = 9,
    cap_small_frame_cap = 10,
    cap_frame_cap = 11,
    cap_page_table_cap = 12,
    cap_page_directory_cap = 13,
    cap_asid_control_cap = 14,
    cap_asid_pool_cap = 15
};
typedef enum cap_tag cap_tag_t;

static inline uint32_t __attribute__((__const__))
cap_get_capType(cap_t cap) {
    return (cap.words[0] >> 28) & 0xf;
}

static inline cap_t __attribute__((__const__))
cap_set_capType(cap_t cap, uint32_t v) {
    cap.words[0] &= ~0xf;
    cap.words[0] |= (v << 28) & 0xf;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_ptr_get_capType(cap_t *cap_ptr) {
    return (cap_ptr->words[0] >> 28) & 0xf;
}

static inline void
cap_ptr_set_capType(cap_t *cap_ptr, uint32_t v) {
    cap_ptr->words[0] &= ~0xf;
    cap_ptr->words[0] |= (v << 28) & 0xf;
}

static inline cap_t __attribute__((__const__)) cap_null_cap_new(void) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[0] |= (0 & 0xf) << 28;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_null_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_null_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_null_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_null_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline cap_t __attribute__((__const__)) cap_untyped_cap_new(uint32_t capBlockSize, uint32_t capPtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capBlockSize & 0x1f) << 0;
    cap.words[0] |= (1 & 0xf) << 28;
    cap.words[0] |= (capPtr & 0xfffffff0) >> 4;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_untyped_cap_get_capBlockSize(cap_t cap) {
    ;


    return (cap.words[1] & 0x1f) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_untyped_cap_set_capBlockSize(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x1f;
    cap.words[1] |= (v << 0) & 0x1f;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_untyped_cap_ptr_get_capBlockSize(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x1f) >> 0;
}

static inline void
cap_untyped_cap_ptr_set_capBlockSize(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x1f;
    cap_ptr->words[1] |= (v << 0) & 0x1f;
}

static inline uint32_t __attribute__((__const__))
cap_untyped_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_untyped_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_untyped_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_untyped_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_untyped_cap_get_capPtr(cap_t cap) {
    ;


    return (cap.words[0] & 0xfffffff) << 4;
}

static inline cap_t __attribute__((__const__))
cap_untyped_cap_set_capPtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xfffffff;
    cap.words[0] |= (v >> 4) & 0xfffffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_untyped_cap_ptr_get_capPtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
cap_untyped_cap_ptr_set_capPtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xfffffff;
    cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

static inline cap_t __attribute__((__const__)) cap_endpoint_cap_new(uint32_t capEPBadge, uint32_t capCanGrant, uint32_t capCanSend, uint32_t capCanReceive, uint32_t capEPPtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capEPBadge & 0x1fffffff) << 3;
    cap.words[1] |= (capCanGrant & 0x1) << 2;
    cap.words[1] |= (capCanSend & 0x1) << 1;
    cap.words[1] |= (capCanReceive & 0x1) << 0;
    cap.words[0] |= (2 & 0xf) << 28;
    cap.words[0] |= (capEPPtr & 0xfffffff0) >> 4;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_endpoint_cap_get_capEPBadge(cap_t cap) {
    ;


    return (cap.words[1] & 0xfffffff8) >> 3;
}

static inline cap_t __attribute__((__const__))
cap_endpoint_cap_set_capEPBadge(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xfffffff8;
    cap.words[1] |= (v << 3) & 0xfffffff8;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_endpoint_cap_ptr_get_capEPBadge(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xfffffff8) >> 3;
}

static inline void
cap_endpoint_cap_ptr_set_capEPBadge(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xfffffff8;
    cap_ptr->words[1] |= (v << 3) & 0xfffffff8;
}

static inline uint32_t __attribute__((__const__))
cap_endpoint_cap_get_capCanGrant(cap_t cap) {
    ;


    return (cap.words[1] & 0x4) >> 2;
}

static inline cap_t __attribute__((__const__))
cap_endpoint_cap_set_capCanGrant(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x4;
    cap.words[1] |= (v << 2) & 0x4;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_endpoint_cap_ptr_get_capCanGrant(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x4) >> 2;
}

static inline void
cap_endpoint_cap_ptr_set_capCanGrant(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x4;
    cap_ptr->words[1] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
cap_endpoint_cap_get_capCanSend(cap_t cap) {
    ;


    return (cap.words[1] & 0x2) >> 1;
}

static inline cap_t __attribute__((__const__))
cap_endpoint_cap_set_capCanSend(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x2;
    cap.words[1] |= (v << 1) & 0x2;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_endpoint_cap_ptr_get_capCanSend(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x2) >> 1;
}

static inline void
cap_endpoint_cap_ptr_set_capCanSend(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x2;
    cap_ptr->words[1] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
cap_endpoint_cap_get_capCanReceive(cap_t cap) {
    ;


    return (cap.words[1] & 0x1) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_endpoint_cap_set_capCanReceive(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x1;
    cap.words[1] |= (v << 0) & 0x1;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_endpoint_cap_ptr_get_capCanReceive(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x1) >> 0;
}

static inline void
cap_endpoint_cap_ptr_set_capCanReceive(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x1;
    cap_ptr->words[1] |= (v << 0) & 0x1;
}

static inline uint32_t __attribute__((__const__))
cap_endpoint_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_endpoint_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_endpoint_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_endpoint_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_endpoint_cap_get_capEPPtr(cap_t cap) {
    ;


    return (cap.words[0] & 0xfffffff) << 4;
}

static inline cap_t __attribute__((__const__))
cap_endpoint_cap_set_capEPPtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xfffffff;
    cap.words[0] |= (v >> 4) & 0xfffffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_endpoint_cap_ptr_get_capEPPtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
cap_endpoint_cap_ptr_set_capEPPtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xfffffff;
    cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

static inline cap_t __attribute__((__const__)) cap_async_endpoint_cap_new(uint32_t capAEPBadge, uint32_t capAEPCanSend, uint32_t capAEPCanReceive, uint32_t capAEPPtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capAEPBadge & 0x1fffffff) << 3;
    cap.words[1] |= (capAEPCanSend & 0x1) << 1;
    cap.words[1] |= (capAEPCanReceive & 0x1) << 0;
    cap.words[0] |= (3 & 0xf) << 28;
    cap.words[0] |= (capAEPPtr & 0xfffffff0) >> 4;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_async_endpoint_cap_get_capAEPBadge(cap_t cap) {
    ;


    return (cap.words[1] & 0xfffffff8) >> 3;
}

static inline cap_t __attribute__((__const__))
cap_async_endpoint_cap_set_capAEPBadge(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xfffffff8;
    cap.words[1] |= (v << 3) & 0xfffffff8;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_async_endpoint_cap_ptr_get_capAEPBadge(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xfffffff8) >> 3;
}

static inline void
cap_async_endpoint_cap_ptr_set_capAEPBadge(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xfffffff8;
    cap_ptr->words[1] |= (v << 3) & 0xfffffff8;
}

static inline uint32_t __attribute__((__const__))
cap_async_endpoint_cap_get_capAEPCanSend(cap_t cap) {
    ;


    return (cap.words[1] & 0x2) >> 1;
}

static inline cap_t __attribute__((__const__))
cap_async_endpoint_cap_set_capAEPCanSend(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x2;
    cap.words[1] |= (v << 1) & 0x2;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_async_endpoint_cap_ptr_get_capAEPCanSend(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x2) >> 1;
}

static inline void
cap_async_endpoint_cap_ptr_set_capAEPCanSend(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x2;
    cap_ptr->words[1] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
cap_async_endpoint_cap_get_capAEPCanReceive(cap_t cap) {
    ;


    return (cap.words[1] & 0x1) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_async_endpoint_cap_set_capAEPCanReceive(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x1;
    cap.words[1] |= (v << 0) & 0x1;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_async_endpoint_cap_ptr_get_capAEPCanReceive(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x1) >> 0;
}

static inline void
cap_async_endpoint_cap_ptr_set_capAEPCanReceive(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x1;
    cap_ptr->words[1] |= (v << 0) & 0x1;
}

static inline uint32_t __attribute__((__const__))
cap_async_endpoint_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_async_endpoint_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_async_endpoint_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_async_endpoint_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_async_endpoint_cap_get_capAEPPtr(cap_t cap) {
    ;


    return (cap.words[0] & 0xfffffff) << 4;
}

static inline cap_t __attribute__((__const__))
cap_async_endpoint_cap_set_capAEPPtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xfffffff;
    cap.words[0] |= (v >> 4) & 0xfffffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_async_endpoint_cap_ptr_get_capAEPPtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
cap_async_endpoint_cap_ptr_set_capAEPPtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xfffffff;
    cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

static inline cap_t __attribute__((__const__)) cap_reply_cap_new(uint32_t capTCBPtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[0] |= (4 & 0xf) << 28;
    cap.words[0] |= (capTCBPtr & 0xfffffff0) >> 4;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_reply_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_reply_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_reply_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_reply_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_reply_cap_get_capTCBPtr(cap_t cap) {
    ;


    return (cap.words[0] & 0xfffffff) << 4;
}

static inline cap_t __attribute__((__const__))
cap_reply_cap_set_capTCBPtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xfffffff;
    cap.words[0] |= (v >> 4) & 0xfffffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_reply_cap_ptr_get_capTCBPtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
cap_reply_cap_ptr_set_capTCBPtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xfffffff;
    cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

static inline cap_t __attribute__((__const__)) cap_cnode_cap_new(uint32_t capRightsMask, uint32_t capCNodeCanRead, uint32_t capCNode32MinusGuardSize, uint32_t capCNode32MinusRadixGuardSize, uint32_t capCNodeGuard, uint32_t capCNodeCanModify, uint32_t capCNodePtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capRightsMask & 0x7) << 29;
    cap.words[1] |= (capCNodeCanRead & 0x1) << 28;
    cap.words[1] |= (capCNode32MinusGuardSize & 0x1f) << 23;
    cap.words[1] |= (capCNode32MinusRadixGuardSize & 0x1f) << 18;
    cap.words[1] |= (capCNodeGuard & 0x3ffff) << 0;
    cap.words[0] |= (5 & 0xf) << 28;
    cap.words[0] |= (capCNodeCanModify & 0x1) << 27;
    cap.words[0] |= (capCNodePtr & 0xffffffe0) >> 5;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capRightsMask(cap_t cap) {
    ;


    return (cap.words[1] & 0xe0000000) >> 29;
}

static inline cap_t __attribute__((__const__))
cap_cnode_cap_set_capRightsMask(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xe0000000;
    cap.words[1] |= (v << 29) & 0xe0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_cnode_cap_ptr_get_capRightsMask(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xe0000000) >> 29;
}

static inline void
cap_cnode_cap_ptr_set_capRightsMask(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xe0000000;
    cap_ptr->words[1] |= (v << 29) & 0xe0000000;
}

static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capCNodeCanRead(cap_t cap) {
    ;


    return (cap.words[1] & 0x10000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_cnode_cap_set_capCNodeCanRead(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x10000000;
    cap.words[1] |= (v << 28) & 0x10000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_cnode_cap_ptr_get_capCNodeCanRead(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x10000000) >> 28;
}

static inline void
cap_cnode_cap_ptr_set_capCNodeCanRead(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x10000000;
    cap_ptr->words[1] |= (v << 28) & 0x10000000;
}

static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capCNode32MinusGuardSize(cap_t cap) {
    ;


    return (cap.words[1] & 0xf800000) >> 23;
}

static inline cap_t __attribute__((__const__))
cap_cnode_cap_set_capCNode32MinusGuardSize(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xf800000;
    cap.words[1] |= (v << 23) & 0xf800000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_cnode_cap_ptr_get_capCNode32MinusGuardSize(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xf800000) >> 23;
}

static inline void
cap_cnode_cap_ptr_set_capCNode32MinusGuardSize(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xf800000;
    cap_ptr->words[1] |= (v << 23) & 0xf800000;
}

static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capCNode32MinusRadixGuardSize(cap_t cap) {
    ;


    return (cap.words[1] & 0x7c0000) >> 18;
}

static inline cap_t __attribute__((__const__))
cap_cnode_cap_set_capCNode32MinusRadixGuardSize(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x7c0000;
    cap.words[1] |= (v << 18) & 0x7c0000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_cnode_cap_ptr_get_capCNode32MinusRadixGuardSize(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x7c0000) >> 18;
}

static inline void
cap_cnode_cap_ptr_set_capCNode32MinusRadixGuardSize(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x7c0000;
    cap_ptr->words[1] |= (v << 18) & 0x7c0000;
}

static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capCNodeGuard(cap_t cap) {
    ;


    return (cap.words[1] & 0x3ffff) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_cnode_cap_set_capCNodeGuard(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x3ffff;
    cap.words[1] |= (v << 0) & 0x3ffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_cnode_cap_ptr_get_capCNodeGuard(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x3ffff) >> 0;
}

static inline void
cap_cnode_cap_ptr_set_capCNodeGuard(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x3ffff;
    cap_ptr->words[1] |= (v << 0) & 0x3ffff;
}

static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_cnode_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_cnode_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_cnode_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capCNodeCanModify(cap_t cap) {
    ;


    return (cap.words[0] & 0x8000000) >> 27;
}

static inline cap_t __attribute__((__const__))
cap_cnode_cap_set_capCNodeCanModify(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0x8000000;
    cap.words[0] |= (v << 27) & 0x8000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_cnode_cap_ptr_get_capCNodeCanModify(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0x8000000) >> 27;
}

static inline void
cap_cnode_cap_ptr_set_capCNodeCanModify(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0x8000000;
    cap_ptr->words[0] |= (v << 27) & 0x8000000;
}

static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capCNodePtr(cap_t cap) {
    ;


    return (cap.words[0] & 0x7ffffff) << 5;
}

static inline cap_t __attribute__((__const__))
cap_cnode_cap_set_capCNodePtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0x7ffffff;
    cap.words[0] |= (v >> 5) & 0x7ffffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_cnode_cap_ptr_get_capCNodePtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0x7ffffff) << 5;
}

static inline void
cap_cnode_cap_ptr_set_capCNodePtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0x7ffffff;
    cap_ptr->words[0] |= (v >> 5) & 0x7ffffff;
}

static inline cap_t __attribute__((__const__)) cap_thread_cap_new(uint32_t capTCBCanGrant, uint32_t capTCBCanWrite, uint32_t capTCBCanRead, uint32_t capTCBPtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capTCBCanGrant & 0x1) << 2;
    cap.words[1] |= (capTCBCanWrite & 0x1) << 1;
    cap.words[1] |= (capTCBCanRead & 0x1) << 0;
    cap.words[0] |= (6 & 0xf) << 28;
    cap.words[0] |= (capTCBPtr & 0xfffffff0) >> 4;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_thread_cap_get_capTCBCanGrant(cap_t cap) {
    ;


    return (cap.words[1] & 0x4) >> 2;
}

static inline cap_t __attribute__((__const__))
cap_thread_cap_set_capTCBCanGrant(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x4;
    cap.words[1] |= (v << 2) & 0x4;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_thread_cap_ptr_get_capTCBCanGrant(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x4) >> 2;
}

static inline void
cap_thread_cap_ptr_set_capTCBCanGrant(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x4;
    cap_ptr->words[1] |= (v << 2) & 0x4;
}

static inline uint32_t __attribute__((__const__))
cap_thread_cap_get_capTCBCanWrite(cap_t cap) {
    ;


    return (cap.words[1] & 0x2) >> 1;
}

static inline cap_t __attribute__((__const__))
cap_thread_cap_set_capTCBCanWrite(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x2;
    cap.words[1] |= (v << 1) & 0x2;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_thread_cap_ptr_get_capTCBCanWrite(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x2) >> 1;
}

static inline void
cap_thread_cap_ptr_set_capTCBCanWrite(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x2;
    cap_ptr->words[1] |= (v << 1) & 0x2;
}

static inline uint32_t __attribute__((__const__))
cap_thread_cap_get_capTCBCanRead(cap_t cap) {
    ;


    return (cap.words[1] & 0x1) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_thread_cap_set_capTCBCanRead(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x1;
    cap.words[1] |= (v << 0) & 0x1;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_thread_cap_ptr_get_capTCBCanRead(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x1) >> 0;
}

static inline void
cap_thread_cap_ptr_set_capTCBCanRead(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x1;
    cap_ptr->words[1] |= (v << 0) & 0x1;
}

static inline uint32_t __attribute__((__const__))
cap_thread_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_thread_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_thread_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_thread_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_thread_cap_get_capTCBPtr(cap_t cap) {
    ;


    return (cap.words[0] & 0xfffffff) << 4;
}

static inline cap_t __attribute__((__const__))
cap_thread_cap_set_capTCBPtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xfffffff;
    cap.words[0] |= (v >> 4) & 0xfffffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_thread_cap_ptr_get_capTCBPtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
cap_thread_cap_ptr_set_capTCBPtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xfffffff;
    cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

static inline cap_t __attribute__((__const__)) cap_irq_control_cap_new(void) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[0] |= (7 & 0xf) << 28;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_irq_control_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_irq_control_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_irq_control_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_irq_control_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline cap_t __attribute__((__const__)) cap_irq_handler_cap_new(uint32_t capIRQ) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capIRQ & 0xff) << 0;
    cap.words[0] |= (8 & 0xf) << 28;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_irq_handler_cap_get_capIRQ(cap_t cap) {
    ;


    return (cap.words[1] & 0xff) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_irq_handler_cap_set_capIRQ(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xff;
    cap.words[1] |= (v << 0) & 0xff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_irq_handler_cap_ptr_get_capIRQ(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xff) >> 0;
}

static inline void
cap_irq_handler_cap_ptr_set_capIRQ(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xff;
    cap_ptr->words[1] |= (v << 0) & 0xff;
}

static inline uint32_t __attribute__((__const__))
cap_irq_handler_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_irq_handler_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_irq_handler_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_irq_handler_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline cap_t __attribute__((__const__)) cap_zombie_cap_new(uint32_t capNumber, uint32_t capCTEPtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= capNumber << 0;
    cap.words[0] |= (9 & 0xf) << 28;
    cap.words[0] |= (capCTEPtr & 0xfffffff0) >> 4;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_zombie_cap_get_capNumber(cap_t cap) {
    ;


    return (cap.words[1] & 0xffffffff) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_zombie_cap_set_capNumber(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xffffffff;
    cap.words[1] |= (v << 0) & 0xffffffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_zombie_cap_ptr_get_capNumber(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
cap_zombie_cap_ptr_set_capNumber(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xffffffff;
    cap_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
cap_zombie_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_zombie_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_zombie_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_zombie_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_zombie_cap_get_capCTEPtr(cap_t cap) {
    ;


    return (cap.words[0] & 0xfffffff) << 4;
}

static inline cap_t __attribute__((__const__))
cap_zombie_cap_set_capCTEPtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xfffffff;
    cap.words[0] |= (v >> 4) & 0xfffffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_zombie_cap_ptr_get_capCTEPtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
cap_zombie_cap_ptr_set_capCTEPtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xfffffff;
    cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

static inline cap_t __attribute__((__const__)) cap_small_frame_cap_new(uint32_t capFMappedAddress, uint32_t capFMappedASIDLow, uint32_t capFVMRights, uint32_t capFMappedASIDHigh, uint32_t capFBasePtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capFMappedAddress & 0xfffff) << 12;
    cap.words[1] |= (capFMappedASIDLow & 0x3ff) << 2;
    cap.words[1] |= (capFVMRights & 0x3) << 0;
    cap.words[0] |= (10 & 0xf) << 28;
    cap.words[0] |= (capFMappedASIDHigh & 0xff) << 20;
    cap.words[0] |= (capFBasePtr & 0xfffff000) >> 12;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_small_frame_cap_get_capFMappedAddress(cap_t cap) {
    ;


    return (cap.words[1] & 0xfffff000) >> 12;
}

static inline cap_t __attribute__((__const__))
cap_small_frame_cap_set_capFMappedAddress(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xfffff000;
    cap.words[1] |= (v << 12) & 0xfffff000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_small_frame_cap_ptr_get_capFMappedAddress(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xfffff000) >> 12;
}

static inline void
cap_small_frame_cap_ptr_set_capFMappedAddress(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xfffff000;
    cap_ptr->words[1] |= (v << 12) & 0xfffff000;
}

static inline uint32_t __attribute__((__const__))
cap_small_frame_cap_get_capFMappedASIDLow(cap_t cap) {
    ;


    return (cap.words[1] & 0xffc) >> 2;
}

static inline cap_t __attribute__((__const__))
cap_small_frame_cap_set_capFMappedASIDLow(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xffc;
    cap.words[1] |= (v << 2) & 0xffc;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_small_frame_cap_ptr_get_capFMappedASIDLow(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xffc) >> 2;
}

static inline void
cap_small_frame_cap_ptr_set_capFMappedASIDLow(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xffc;
    cap_ptr->words[1] |= (v << 2) & 0xffc;
}

static inline uint32_t __attribute__((__const__))
cap_small_frame_cap_get_capFVMRights(cap_t cap) {
    ;


    return (cap.words[1] & 0x3) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_small_frame_cap_set_capFVMRights(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x3;
    cap.words[1] |= (v << 0) & 0x3;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_small_frame_cap_ptr_get_capFVMRights(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x3) >> 0;
}

static inline void
cap_small_frame_cap_ptr_set_capFVMRights(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x3;
    cap_ptr->words[1] |= (v << 0) & 0x3;
}

static inline uint32_t __attribute__((__const__))
cap_small_frame_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_small_frame_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_small_frame_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_small_frame_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_small_frame_cap_get_capFMappedASIDHigh(cap_t cap) {
    ;


    return (cap.words[0] & 0xff00000) >> 20;
}

static inline cap_t __attribute__((__const__))
cap_small_frame_cap_set_capFMappedASIDHigh(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xff00000;
    cap.words[0] |= (v << 20) & 0xff00000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_small_frame_cap_ptr_get_capFMappedASIDHigh(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xff00000) >> 20;
}

static inline void
cap_small_frame_cap_ptr_set_capFMappedASIDHigh(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xff00000;
    cap_ptr->words[0] |= (v << 20) & 0xff00000;
}

static inline uint32_t __attribute__((__const__))
cap_small_frame_cap_get_capFBasePtr(cap_t cap) {
    ;


    return (cap.words[0] & 0xfffff) << 12;
}

static inline cap_t __attribute__((__const__))
cap_small_frame_cap_set_capFBasePtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xfffff;
    cap.words[0] |= (v >> 12) & 0xfffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_small_frame_cap_ptr_get_capFBasePtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xfffff) << 12;
}

static inline void
cap_small_frame_cap_ptr_set_capFBasePtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xfffff;
    cap_ptr->words[0] |= (v >> 12) & 0xfffff;
}

static inline cap_t __attribute__((__const__)) cap_frame_cap_new(uint32_t capFMappedAddress, uint32_t capFSize, uint32_t capFMappedASIDLow, uint32_t capFVMRights, uint32_t capFMappedASIDHigh, uint32_t capFBasePtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capFMappedAddress & 0x3ffff) << 14;
    cap.words[1] |= (capFSize & 0x3) << 12;
    cap.words[1] |= (capFMappedASIDLow & 0x3ff) << 2;
    cap.words[1] |= (capFVMRights & 0x3) << 0;
    cap.words[0] |= (11 & 0xf) << 28;
    cap.words[0] |= (capFMappedASIDHigh & 0xff) << 18;
    cap.words[0] |= (capFBasePtr & 0xffffc000) >> 14;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_frame_cap_get_capFMappedAddress(cap_t cap) {
    ;


    return (cap.words[1] & 0xffffc000) >> 14;
}

static inline cap_t __attribute__((__const__))
cap_frame_cap_set_capFMappedAddress(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xffffc000;
    cap.words[1] |= (v << 14) & 0xffffc000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_frame_cap_ptr_get_capFMappedAddress(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xffffc000) >> 14;
}

static inline void
cap_frame_cap_ptr_set_capFMappedAddress(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xffffc000;
    cap_ptr->words[1] |= (v << 14) & 0xffffc000;
}

static inline uint32_t __attribute__((__const__))
cap_frame_cap_get_capFSize(cap_t cap) {
    ;


    return (cap.words[1] & 0x3000) >> 12;
}

static inline cap_t __attribute__((__const__))
cap_frame_cap_set_capFSize(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x3000;
    cap.words[1] |= (v << 12) & 0x3000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_frame_cap_ptr_get_capFSize(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x3000) >> 12;
}

static inline void
cap_frame_cap_ptr_set_capFSize(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x3000;
    cap_ptr->words[1] |= (v << 12) & 0x3000;
}

static inline uint32_t __attribute__((__const__))
cap_frame_cap_get_capFMappedASIDLow(cap_t cap) {
    ;


    return (cap.words[1] & 0xffc) >> 2;
}

static inline cap_t __attribute__((__const__))
cap_frame_cap_set_capFMappedASIDLow(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xffc;
    cap.words[1] |= (v << 2) & 0xffc;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_frame_cap_ptr_get_capFMappedASIDLow(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xffc) >> 2;
}

static inline void
cap_frame_cap_ptr_set_capFMappedASIDLow(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xffc;
    cap_ptr->words[1] |= (v << 2) & 0xffc;
}

static inline uint32_t __attribute__((__const__))
cap_frame_cap_get_capFVMRights(cap_t cap) {
    ;


    return (cap.words[1] & 0x3) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_frame_cap_set_capFVMRights(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x3;
    cap.words[1] |= (v << 0) & 0x3;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_frame_cap_ptr_get_capFVMRights(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x3) >> 0;
}

static inline void
cap_frame_cap_ptr_set_capFVMRights(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x3;
    cap_ptr->words[1] |= (v << 0) & 0x3;
}

static inline uint32_t __attribute__((__const__))
cap_frame_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_frame_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_frame_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_frame_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_frame_cap_get_capFMappedASIDHigh(cap_t cap) {
    ;


    return (cap.words[0] & 0x3fc0000) >> 18;
}

static inline cap_t __attribute__((__const__))
cap_frame_cap_set_capFMappedASIDHigh(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0x3fc0000;
    cap.words[0] |= (v << 18) & 0x3fc0000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_frame_cap_ptr_get_capFMappedASIDHigh(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0x3fc0000) >> 18;
}

static inline void
cap_frame_cap_ptr_set_capFMappedASIDHigh(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0x3fc0000;
    cap_ptr->words[0] |= (v << 18) & 0x3fc0000;
}

static inline uint32_t __attribute__((__const__))
cap_frame_cap_get_capFBasePtr(cap_t cap) {
    ;


    return (cap.words[0] & 0x3ffff) << 14;
}

static inline cap_t __attribute__((__const__))
cap_frame_cap_set_capFBasePtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0x3ffff;
    cap.words[0] |= (v >> 14) & 0x3ffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_frame_cap_ptr_get_capFBasePtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0x3ffff) << 14;
}

static inline void
cap_frame_cap_ptr_set_capFBasePtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0x3ffff;
    cap_ptr->words[0] |= (v >> 14) & 0x3ffff;
}

static inline cap_t __attribute__((__const__)) cap_page_table_cap_new(uint32_t capPTMappedAddress, uint32_t capPTIsMapped, uint32_t capPTMappedASID, uint32_t capPTBasePtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capPTMappedAddress & 0xfff) << 20;
    cap.words[1] |= (capPTIsMapped & 0x1) << 18;
    cap.words[1] |= (capPTMappedASID & 0x3ffff) << 0;
    cap.words[0] |= (12 & 0xf) << 28;
    cap.words[0] |= (capPTBasePtr & 0xfffffc00) >> 10;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_page_table_cap_get_capPTMappedAddress(cap_t cap) {
    ;


    return (cap.words[1] & 0xfff00000) >> 20;
}

static inline cap_t __attribute__((__const__))
cap_page_table_cap_set_capPTMappedAddress(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0xfff00000;
    cap.words[1] |= (v << 20) & 0xfff00000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_page_table_cap_ptr_get_capPTMappedAddress(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0xfff00000) >> 20;
}

static inline void
cap_page_table_cap_ptr_set_capPTMappedAddress(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0xfff00000;
    cap_ptr->words[1] |= (v << 20) & 0xfff00000;
}

static inline uint32_t __attribute__((__const__))
cap_page_table_cap_get_capPTIsMapped(cap_t cap) {
    ;


    return (cap.words[1] & 0x40000) >> 18;
}

static inline cap_t __attribute__((__const__))
cap_page_table_cap_set_capPTIsMapped(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x40000;
    cap.words[1] |= (v << 18) & 0x40000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_page_table_cap_ptr_get_capPTIsMapped(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x40000) >> 18;
}

static inline void
cap_page_table_cap_ptr_set_capPTIsMapped(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x40000;
    cap_ptr->words[1] |= (v << 18) & 0x40000;
}

static inline uint32_t __attribute__((__const__))
cap_page_table_cap_get_capPTMappedASID(cap_t cap) {
    ;


    return (cap.words[1] & 0x3ffff) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_page_table_cap_set_capPTMappedASID(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x3ffff;
    cap.words[1] |= (v << 0) & 0x3ffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_page_table_cap_ptr_get_capPTMappedASID(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x3ffff) >> 0;
}

static inline void
cap_page_table_cap_ptr_set_capPTMappedASID(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x3ffff;
    cap_ptr->words[1] |= (v << 0) & 0x3ffff;
}

static inline uint32_t __attribute__((__const__))
cap_page_table_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_page_table_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_page_table_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_page_table_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_page_table_cap_get_capPTBasePtr(cap_t cap) {
    ;


    return (cap.words[0] & 0x3fffff) << 10;
}

static inline cap_t __attribute__((__const__))
cap_page_table_cap_set_capPTBasePtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0x3fffff;
    cap.words[0] |= (v >> 10) & 0x3fffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_page_table_cap_ptr_get_capPTBasePtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0x3fffff) << 10;
}

static inline void
cap_page_table_cap_ptr_set_capPTBasePtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0x3fffff;
    cap_ptr->words[0] |= (v >> 10) & 0x3fffff;
}

static inline cap_t __attribute__((__const__)) cap_page_directory_cap_new(uint32_t capPDIsMapped, uint32_t capPDMappedASID, uint32_t capPDBasePtr) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capPDIsMapped & 0x1) << 18;
    cap.words[1] |= (capPDMappedASID & 0x3ffff) << 0;
    cap.words[0] |= (13 & 0xf) << 28;
    cap.words[0] |= (capPDBasePtr & 0xffffc000) >> 14;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_page_directory_cap_get_capPDIsMapped(cap_t cap) {
    ;


    return (cap.words[1] & 0x40000) >> 18;
}

static inline cap_t __attribute__((__const__))
cap_page_directory_cap_set_capPDIsMapped(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x40000;
    cap.words[1] |= (v << 18) & 0x40000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_page_directory_cap_ptr_get_capPDIsMapped(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x40000) >> 18;
}

static inline void
cap_page_directory_cap_ptr_set_capPDIsMapped(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x40000;
    cap_ptr->words[1] |= (v << 18) & 0x40000;
}

static inline uint32_t __attribute__((__const__))
cap_page_directory_cap_get_capPDMappedASID(cap_t cap) {
    ;


    return (cap.words[1] & 0x3ffff) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_page_directory_cap_set_capPDMappedASID(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x3ffff;
    cap.words[1] |= (v << 0) & 0x3ffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_page_directory_cap_ptr_get_capPDMappedASID(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x3ffff) >> 0;
}

static inline void
cap_page_directory_cap_ptr_set_capPDMappedASID(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x3ffff;
    cap_ptr->words[1] |= (v << 0) & 0x3ffff;
}

static inline uint32_t __attribute__((__const__))
cap_page_directory_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_page_directory_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_page_directory_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_page_directory_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_page_directory_cap_get_capPDBasePtr(cap_t cap) {
    ;


    return (cap.words[0] & 0x3ffff) << 14;
}

static inline cap_t __attribute__((__const__))
cap_page_directory_cap_set_capPDBasePtr(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0x3ffff;
    cap.words[0] |= (v >> 14) & 0x3ffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_page_directory_cap_ptr_get_capPDBasePtr(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0x3ffff) << 14;
}

static inline void
cap_page_directory_cap_ptr_set_capPDBasePtr(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0x3ffff;
    cap_ptr->words[0] |= (v >> 14) & 0x3ffff;
}

static inline cap_t __attribute__((__const__)) cap_asid_control_cap_new(void) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[0] |= (14 & 0xf) << 28;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_asid_control_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_asid_control_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_asid_control_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_asid_control_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline cap_t __attribute__((__const__)) cap_asid_pool_cap_new(uint32_t capASIDBase, uint32_t capASIDPool) {
    cap_t cap;

    cap.words[0] = 0;
    cap.words[1] = 0;

    cap.words[1] |= (capASIDBase & 0x3ffff) << 0;
    cap.words[0] |= (15 & 0xf) << 28;
    cap.words[0] |= (capASIDPool & 0xfffffff0) >> 4;

    return cap;
}


static inline uint32_t __attribute__((__const__))
cap_asid_pool_cap_get_capASIDBase(cap_t cap) {
    ;


    return (cap.words[1] & 0x3ffff) >> 0;
}

static inline cap_t __attribute__((__const__))
cap_asid_pool_cap_set_capASIDBase(cap_t cap, uint32_t v) {
    ;


    cap.words[1] &= ~0x3ffff;
    cap.words[1] |= (v << 0) & 0x3ffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_asid_pool_cap_ptr_get_capASIDBase(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[1] & 0x3ffff) >> 0;
}

static inline void
cap_asid_pool_cap_ptr_set_capASIDBase(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[1] &= ~0x3ffff;
    cap_ptr->words[1] |= (v << 0) & 0x3ffff;
}

static inline uint32_t __attribute__((__const__))
cap_asid_pool_cap_get_capType(cap_t cap) {
    ;


    return (cap.words[0] & 0xf0000000) >> 28;
}

static inline cap_t __attribute__((__const__))
cap_asid_pool_cap_set_capType(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xf0000000;
    cap.words[0] |= (v << 28) & 0xf0000000;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_asid_pool_cap_ptr_get_capType(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xf0000000) >> 28;
}

static inline void
cap_asid_pool_cap_ptr_set_capType(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xf0000000;
    cap_ptr->words[0] |= (v << 28) & 0xf0000000;
}

static inline uint32_t __attribute__((__const__))
cap_asid_pool_cap_get_capASIDPool(cap_t cap) {
    ;


    return (cap.words[0] & 0xfffffff) << 4;
}

static inline cap_t __attribute__((__const__))
cap_asid_pool_cap_set_capASIDPool(cap_t cap, uint32_t v) {
    ;


    cap.words[0] &= ~0xfffffff;
    cap.words[0] |= (v >> 4) & 0xfffffff;
    return cap;
}

static inline uint32_t __attribute__((__pure__))
cap_asid_pool_cap_ptr_get_capASIDPool(cap_t *cap_ptr) {
    ;


    return (cap_ptr->words[0] & 0xfffffff) << 4;
}

static inline void
cap_asid_pool_cap_ptr_set_capASIDPool(cap_t *cap_ptr,
                                      uint32_t v) {
    ;


    cap_ptr->words[0] &= ~0xfffffff;
    cap_ptr->words[0] |= (v >> 4) & 0xfffffff;
}

struct lookup_fault{
    uint32_t words[2];
};
typedef struct lookup_fault lookup_fault_t;

enum lookup_fault_tag {
    lookup_fault_invalid_root = 0,
    lookup_fault_missing_capability = 1,
    lookup_fault_depth_mismatch = 2,
    lookup_fault_guard_mismatch = 3
};
typedef enum lookup_fault_tag lookup_fault_tag_t;

static inline uint32_t __attribute__((__const__))
lookup_fault_get_lufType(lookup_fault_t lookup_fault) {
    return (lookup_fault.words[0] >> 0) & 0x3;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_set_lufType(lookup_fault_t lookup_fault, uint32_t v) {
    lookup_fault.words[0] &= ~0x3;
    lookup_fault.words[0] |= (v << 0) & 0x3;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_ptr_get_lufType(lookup_fault_t *lookup_fault_ptr) {
    return (lookup_fault_ptr->words[0] >> 0) & 0x3;
}

static inline void
lookup_fault_ptr_set_lufType(lookup_fault_t *lookup_fault_ptr, uint32_t v) {
    lookup_fault_ptr->words[0] &= ~0x3;
    lookup_fault_ptr->words[0] |= (v << 0) & 0x3;
}

static inline lookup_fault_t __attribute__((__const__)) lookup_fault_invalid_root_new(void) {
    lookup_fault_t lookup_fault;

    lookup_fault.words[0] = 0;
    lookup_fault.words[1] = 0;

    lookup_fault.words[0] |= (0 & 0x3) << 0;

    return lookup_fault;
}


static inline uint32_t __attribute__((__const__))
lookup_fault_invalid_root_get_lufType(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[0] & 0x3) >> 0;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_invalid_root_set_lufType(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[0] &= ~0x3;
    lookup_fault.words[0] |= (v << 0) & 0x3;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_invalid_root_ptr_get_lufType(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[0] & 0x3) >> 0;
}

static inline void
lookup_fault_invalid_root_ptr_set_lufType(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[0] &= ~0x3;
    lookup_fault_ptr->words[0] |= (v << 0) & 0x3;
}

static inline lookup_fault_t __attribute__((__const__)) lookup_fault_missing_capability_new(uint32_t bitsLeft) {
    lookup_fault_t lookup_fault;

    lookup_fault.words[0] = 0;
    lookup_fault.words[1] = 0;

    lookup_fault.words[0] |= (bitsLeft & 0x1f) << 2;
    lookup_fault.words[0] |= (1 & 0x3) << 0;

    return lookup_fault;
}


static inline uint32_t __attribute__((__const__))
lookup_fault_missing_capability_get_bitsLeft(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[0] & 0x7c) >> 2;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_missing_capability_set_bitsLeft(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[0] &= ~0x7c;
    lookup_fault.words[0] |= (v << 2) & 0x7c;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_missing_capability_ptr_get_bitsLeft(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[0] & 0x7c) >> 2;
}

static inline void
lookup_fault_missing_capability_ptr_set_bitsLeft(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[0] &= ~0x7c;
    lookup_fault_ptr->words[0] |= (v << 2) & 0x7c;
}

static inline uint32_t __attribute__((__const__))
lookup_fault_missing_capability_get_lufType(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[0] & 0x3) >> 0;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_missing_capability_set_lufType(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[0] &= ~0x3;
    lookup_fault.words[0] |= (v << 0) & 0x3;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_missing_capability_ptr_get_lufType(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[0] & 0x3) >> 0;
}

static inline void
lookup_fault_missing_capability_ptr_set_lufType(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[0] &= ~0x3;
    lookup_fault_ptr->words[0] |= (v << 0) & 0x3;
}

static inline lookup_fault_t __attribute__((__const__)) lookup_fault_depth_mismatch_new(uint32_t bitsFound, uint32_t bitsLeft) {
    lookup_fault_t lookup_fault;

    lookup_fault.words[0] = 0;
    lookup_fault.words[1] = 0;

    lookup_fault.words[0] |= (bitsFound & 0x1f) << 7;
    lookup_fault.words[0] |= (bitsLeft & 0x1f) << 2;
    lookup_fault.words[0] |= (2 & 0x3) << 0;

    return lookup_fault;
}


static inline uint32_t __attribute__((__const__))
lookup_fault_depth_mismatch_get_bitsFound(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[0] & 0xf80) >> 7;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_depth_mismatch_set_bitsFound(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[0] &= ~0xf80;
    lookup_fault.words[0] |= (v << 7) & 0xf80;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_depth_mismatch_ptr_get_bitsFound(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[0] & 0xf80) >> 7;
}

static inline void
lookup_fault_depth_mismatch_ptr_set_bitsFound(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[0] &= ~0xf80;
    lookup_fault_ptr->words[0] |= (v << 7) & 0xf80;
}

static inline uint32_t __attribute__((__const__))
lookup_fault_depth_mismatch_get_bitsLeft(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[0] & 0x7c) >> 2;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_depth_mismatch_set_bitsLeft(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[0] &= ~0x7c;
    lookup_fault.words[0] |= (v << 2) & 0x7c;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_depth_mismatch_ptr_get_bitsLeft(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[0] & 0x7c) >> 2;
}

static inline void
lookup_fault_depth_mismatch_ptr_set_bitsLeft(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[0] &= ~0x7c;
    lookup_fault_ptr->words[0] |= (v << 2) & 0x7c;
}

static inline uint32_t __attribute__((__const__))
lookup_fault_depth_mismatch_get_lufType(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[0] & 0x3) >> 0;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_depth_mismatch_set_lufType(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[0] &= ~0x3;
    lookup_fault.words[0] |= (v << 0) & 0x3;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_depth_mismatch_ptr_get_lufType(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[0] & 0x3) >> 0;
}

static inline void
lookup_fault_depth_mismatch_ptr_set_lufType(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[0] &= ~0x3;
    lookup_fault_ptr->words[0] |= (v << 0) & 0x3;
}

static inline lookup_fault_t __attribute__((__const__)) lookup_fault_guard_mismatch_new(uint32_t guardFound, uint32_t bitsLeft, uint32_t bitsFound) {
    lookup_fault_t lookup_fault;

    lookup_fault.words[0] = 0;
    lookup_fault.words[1] = 0;

    lookup_fault.words[1] |= guardFound << 0;
    lookup_fault.words[0] |= (bitsLeft & 0x1f) << 7;
    lookup_fault.words[0] |= (bitsFound & 0x1f) << 2;
    lookup_fault.words[0] |= (3 & 0x3) << 0;

    return lookup_fault;
}


static inline uint32_t __attribute__((__const__))
lookup_fault_guard_mismatch_get_guardFound(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[1] & 0xffffffff) >> 0;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_guard_mismatch_set_guardFound(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[1] &= ~0xffffffff;
    lookup_fault.words[1] |= (v << 0) & 0xffffffff;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_guard_mismatch_ptr_get_guardFound(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[1] & 0xffffffff) >> 0;
}

static inline void
lookup_fault_guard_mismatch_ptr_set_guardFound(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[1] &= ~0xffffffff;
    lookup_fault_ptr->words[1] |= (v << 0) & 0xffffffff;
}

static inline uint32_t __attribute__((__const__))
lookup_fault_guard_mismatch_get_bitsLeft(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[0] & 0xf80) >> 7;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_guard_mismatch_set_bitsLeft(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[0] &= ~0xf80;
    lookup_fault.words[0] |= (v << 7) & 0xf80;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_guard_mismatch_ptr_get_bitsLeft(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[0] & 0xf80) >> 7;
}

static inline void
lookup_fault_guard_mismatch_ptr_set_bitsLeft(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[0] &= ~0xf80;
    lookup_fault_ptr->words[0] |= (v << 7) & 0xf80;
}

static inline uint32_t __attribute__((__const__))
lookup_fault_guard_mismatch_get_bitsFound(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[0] & 0x7c) >> 2;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_guard_mismatch_set_bitsFound(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[0] &= ~0x7c;
    lookup_fault.words[0] |= (v << 2) & 0x7c;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_guard_mismatch_ptr_get_bitsFound(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[0] & 0x7c) >> 2;
}

static inline void
lookup_fault_guard_mismatch_ptr_set_bitsFound(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[0] &= ~0x7c;
    lookup_fault_ptr->words[0] |= (v << 2) & 0x7c;
}

static inline uint32_t __attribute__((__const__))
lookup_fault_guard_mismatch_get_lufType(lookup_fault_t lookup_fault) {
    ;


    return (lookup_fault.words[0] & 0x3) >> 0;
}

static inline lookup_fault_t __attribute__((__const__))
lookup_fault_guard_mismatch_set_lufType(lookup_fault_t lookup_fault, uint32_t v) {
    ;


    lookup_fault.words[0] &= ~0x3;
    lookup_fault.words[0] |= (v << 0) & 0x3;
    return lookup_fault;
}

static inline uint32_t __attribute__((__pure__))
lookup_fault_guard_mismatch_ptr_get_lufType(lookup_fault_t *lookup_fault_ptr) {
    ;


    return (lookup_fault_ptr->words[0] & 0x3) >> 0;
}

static inline void
lookup_fault_guard_mismatch_ptr_set_lufType(lookup_fault_t *lookup_fault_ptr,
                                      uint32_t v) {
    ;


    lookup_fault_ptr->words[0] &= ~0x3;
    lookup_fault_ptr->words[0] |= (v << 0) & 0x3;
}
# 10 "../../c-kernel/include/arch/arm/arch/object/structures.h" 2
# 1 "../../c-kernel/include/arch/arm/arch/machine/hardware.h" 1





enum vm_fault_type {
    ARMDataAbort = 0,
    ARMPrefetchAbort = 1
};
typedef enum vm_fault_type vm_fault_type_t;

enum vm_page_size {
    ARMSmallPage,
    ARMLargePage,
    ARMSection,
    ARMSuperSection
};
typedef enum vm_page_size vm_page_size_t;

enum frameSizeConstants {
    ARMSmallPageBits = 12,
    ARMLargePageBits = 16,
    ARMSectionBits = 20,
    ARMSuperSectionBits = 24
};



static inline unsigned int
pageBitsForSize(vm_page_size_t pagesize) {
    switch(pagesize) {
        case ARMSmallPage:
            return ARMSmallPageBits;

        case ARMLargePage:
            return ARMLargePageBits;

        case ARMSection:
            return ARMSectionBits;

        case ARMSuperSection:
            return ARMSuperSectionBits;

        default:
            halt();
    }
}
# 11 "../../c-kernel/include/arch/arm/arch/object/structures.h" 2
# 1 "../../c-kernel/include/arch/arm/arch/machine/registerset.h" 1
# 11 "../../c-kernel/include/arch/arm/arch/machine/registerset.h"
enum _register {
    R0 = 0,
    capRegister = 0,
    badgeRegister = 0,

    R1 = 1,
    msgInfoRegister = 1,

    R2 = 2,
    R3 = 3,
    R4 = 4,
    R5 = 5,
    R6 = 6,
    R7 = 7,
    R8 = 8,
    R9 = 9,
    R10 = 10,
    R11 = 11,
    R12 = 12,

    R13 = 13,
    SP = 13,

    R14 = 14,
    LR = 14,



    LR_svc = 15,
    CPSR = 16,

    FaultInstruction = 17,
    n_contextRegisters = 18,
};

typedef enum _register register_t;

enum messageSizes {
    n_msgRegisters = 6,
    n_frameRegisters = 11,
    n_gpRegisters = 6,
    n_exceptionMessage = 3,
    n_syscallMessage = 12,
};

extern register_t msgRegisters[];
extern register_t frameRegisters[];
extern register_t gpRegisters[];
extern register_t exceptionMessage[];
extern register_t syscallMessage[];


struct user_context {
    word_t registers[n_contextRegisters];
};
typedef struct user_context user_context_t;

static inline void Arch_initContext(user_context_t* context) {
    context->registers[CPSR] = 0x10;
}

static inline word_t
sanitiseRegister(register_t reg, word_t v) {
    if(reg == CPSR) {
        return (v & 0xf8000000) | 0x10;
    }
    else {
        return v;
    }
}
# 12 "../../c-kernel/include/arch/arm/arch/object/structures.h" 2



enum endpoint_state {
    EPState_Idle = 0,
    EPState_Send = 1,
    EPState_Recv = 2
};
typedef enum endpoint_state endpoint_state_t;





enum async_endpoint_state {
    AEPState_Idle = 0,
    AEPState_Waiting = 1,
    AEPState_Active = 2
};
typedef enum async_endpoint_state async_endpoint_state_t;
# 45 "../../c-kernel/include/arch/arm/arch/object/structures.h"
static inline cap_t __attribute__((__const__)) CNodeCap_new(uint32_t capRightsMask,
        uint32_t capCNodeCanRead, uint32_t capCNodeRadix,
        uint32_t capCNodeGuardSize, uint32_t capCNodeGuard,
        uint32_t capCNodeCanModify, uint32_t capCNodePtr)
{
    return cap_cnode_cap_new(capRightsMask, capCNodeCanRead,
        32 - capCNodeGuardSize, 32 - capCNodeRadix - capCNodeGuardSize,
        capCNodeGuard, capCNodeCanModify, capCNodePtr);
}

static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capCNodeRadix(cap_t cap) {
    ;

    return (cap_cnode_cap_get_capCNode32MinusGuardSize(cap) -
           cap_cnode_cap_get_capCNode32MinusRadixGuardSize(cap)) % 32;
}

static inline uint32_t __attribute__((__const__))
cap_cnode_cap_get_capCNodeGuardSize(cap_t cap) {
    ;

    return (32 - cap_cnode_cap_get_capCNode32MinusGuardSize(cap)) % 32;
}

static inline cap_t __attribute__((__const__))
cap_cnode_cap_set_capCNodeGuardSize(cap_t cap, uint32_t size) {
    uint32_t radix = cap_cnode_cap_get_capCNodeRadix(cap);
    return cap_cnode_cap_set_capCNode32MinusRadixGuardSize(
        cap_cnode_cap_set_capCNode32MinusGuardSize(cap, 32 - size),
        32 - radix - size);
}


struct cte {
    cap_t cap;

    mdb_node_t cteMDBNode;
};
typedef struct cte cte_t;




enum _thread_state {
    ThreadState_Inactive = 0,
    ThreadState_Running,
    ThreadState_Restart,
    ThreadState_BlockedOnReceive,
    ThreadState_BlockedOnSend,
    ThreadState_BlockedOnReply,
    ThreadState_BlockedOnFault,
    ThreadState_BlockedOnAsyncEvent,
    ThreadState_IdleThreadState
};
typedef enum _thread_state _thread_state_t;
# 118 "../../c-kernel/include/arch/arm/arch/object/structures.h"
enum tcb_cnode_index {

    tcbCTable = 0,


    tcbVTable = 1,


    tcbReply = 2,


    tcbCaller = 3,


    tcbBuffer = 4
};
typedef enum tcb_cnode_index tcb_cnode_index_t;





struct tcb {

    user_context_t tcbContext;


    thread_state_t tcbState;


    fault_t tcbFault;


    lookup_fault_t tcbLookupFailure;


    uint32_t tcbPriority;


    word_t tcbTimeSlice;


    cptr_t tcbFaultHandler;


    word_t tcbIPCBuffer;


    struct tcb *tcbSchedNext, *tcbSchedPrev, *tcbEPNext, *tcbEPPrev;
};
typedef struct tcb tcb_t;



enum vm_rights {
    VMNoAccess = 0,
    VMKernelOnly = 1,
    VMReadOnly = 2,
    VMReadWrite = 3
};
typedef enum vm_rights vm_rights_t;

static inline word_t __attribute__((__const__))
wordFromVMRights(vm_rights_t vm_rights) {
    return (word_t)vm_rights;
}

static inline vm_rights_t __attribute__((__const__))
vmRightsFromWord(word_t w) {
    return (vm_rights_t)w;
}
# 202 "../../c-kernel/include/arch/arm/arch/object/structures.h"
enum pde_type {
    PDEInvalid = 0,
    PDECoarse = 1,
    PDEMapping = 2
};
typedef enum pde_type pde_type_t;
# 218 "../../c-kernel/include/arch/arm/arch/object/structures.h"
struct pte {
    uint32_t words[1];
};
typedef struct pte pte_t;

enum pte_tag {
    pte_pte_invalid,
    pte_pte_large,
    pte_pte_small
};
typedef enum pte_tag pte_tag_t;

static inline pte_tag_t __attribute__((__const__))
pte_get_pteType(pte_t pte) {

    if((pte.words[0] >> 1) & ((1<<(1))-1)) {
        return pte_pte_small;
    }


    if(pte.words[0] & ((1<<(1))-1)) {
        return pte_pte_large;
    }

    return pte_pte_invalid;
}

static inline pte_tag_t __attribute__((__pure__))
pte_ptr_get_pteType(pte_t *pte_ptr) {
    return pte_get_pteType(*pte_ptr);
}

static inline pte_t __attribute__((__const__))
pte_set_pteType(pte_t pte, pte_tag_t tag) {
    ;



    switch(tag) {
        case pte_pte_invalid:
            pte.words[0] &= ~((1<<(2))-1);
            break;

        case pte_pte_large:
            pte.words[0] &= ~((1<<(2))-1);
            pte.words[0] |= (1<<(0));
            break;

        case pte_pte_small:
            pte.words[0] |= (1<<(1));
            break;
    }

    return pte;
}

static inline void
pte_ptr_set_pteType(pte_t *pte_ptr, pte_tag_t tag) {
    *pte_ptr = pte_set_pteType(*pte_ptr, tag);
}

static inline pte_t __attribute__((__const__))
pte_pte_invalid_new(void) {
    pte_t pte;

    pte.words[0] = 0;
    pte = pte_set_pteType(pte, pte_pte_invalid);
    return pte;
}





enum asidSizeConstants {
    asidHighBits = 8,
    asidLowBits = 10
};
# 311 "../../c-kernel/include/arch/arm/arch/object/structures.h"
static inline cap_t __attribute__((__const__))
cap_small_frame_cap_set_capFMappedASID(cap_t cap, word_t asid) {
    cap = cap_small_frame_cap_set_capFMappedASIDLow(cap,
        asid & ((1<<(asidLowBits))-1));
    return cap_small_frame_cap_set_capFMappedASIDHigh(cap,
        (asid >> asidLowBits) & ((1<<(asidHighBits))-1));
}

static inline word_t __attribute__((__const__))
cap_small_frame_cap_get_capFMappedASID(cap_t cap) {
    return (cap_small_frame_cap_get_capFMappedASIDHigh(cap) << asidLowBits) +
           cap_small_frame_cap_get_capFMappedASIDLow(cap);
}

static inline cap_t __attribute__((__const__))
cap_frame_cap_set_capFMappedASID(cap_t cap, word_t asid) {
    cap = cap_frame_cap_set_capFMappedASIDLow(cap,
        asid & ((1<<(asidLowBits))-1));
    return cap_frame_cap_set_capFMappedASIDHigh(cap,
        (asid >> asidLowBits) & ((1<<(asidHighBits))-1));
}

static inline word_t __attribute__((__const__))
cap_frame_cap_get_capFMappedASID(cap_t cap) {
    return (cap_frame_cap_get_capFMappedASIDHigh(cap) << asidLowBits) +
           cap_frame_cap_get_capFMappedASIDLow(cap);
}

static inline word_t __attribute__((__const__))
generic_frame_cap_get_capFMappedASID(cap_t cap) {
    cap_tag_t ctag;

    ctag = cap_get_capType(cap);
    ;


    switch(ctag) {
        case cap_small_frame_cap:
            return cap_small_frame_cap_get_capFMappedASID(cap);

        case cap_frame_cap:
            return cap_frame_cap_get_capFMappedASID(cap);

        default:


            return asidInvalid;
    }
}

static inline cap_t __attribute__((__const__))
generic_frame_cap_set_capFMappedAddress(cap_t cap, word_t asid, word_t addr) {
    cap_tag_t ctag;

    ctag = cap_get_capType(cap);
    ;


    switch(ctag) {
        case cap_small_frame_cap:
            cap = cap_small_frame_cap_set_capFMappedASID(cap, asid);
            cap = cap_small_frame_cap_set_capFMappedAddress(cap, addr);
            return cap;

        case cap_frame_cap:
            cap = cap_frame_cap_set_capFMappedASID(cap, asid);
            cap = cap_frame_cap_set_capFMappedAddress(cap, addr);
            return cap;

        default:
            return cap_null_cap_new();
    }
}

static inline void
generic_frame_cap_ptr_set_capFMappedAddress(cap_t *cap_ptr, word_t asid,
    word_t addr)
{
    *cap_ptr = generic_frame_cap_set_capFMappedAddress(*cap_ptr, asid, addr);
}

static inline vm_rights_t __attribute__((__const__))
generic_frame_cap_get_capFVMRights(cap_t cap) {
    cap_tag_t ctag;

    ctag = cap_get_capType(cap);
    ;


    switch(ctag) {
        case cap_small_frame_cap:
            return cap_small_frame_cap_get_capFVMRights(cap);

        case cap_frame_cap:
            return cap_frame_cap_get_capFVMRights(cap);

        default:
            return VMNoAccess;
    }
}

static inline word_t __attribute__((__const__))
generic_frame_cap_get_capFBasePtr(cap_t cap) {
    cap_tag_t ctag;

    ctag = cap_get_capType(cap);
    ;


    switch(ctag) {
        case cap_small_frame_cap:
            return cap_small_frame_cap_get_capFBasePtr(cap);

        case cap_frame_cap:
            return cap_frame_cap_get_capFBasePtr(cap);

        default:
            return 0;
    }
}

static inline word_t __attribute__((__const__))
generic_frame_cap_get_capFSize(cap_t cap) {
    cap_tag_t ctag;

    ctag = cap_get_capType(cap);
    ;


    switch(ctag) {
        case cap_small_frame_cap:
            return ARMSmallPage;

        case cap_frame_cap:
            return cap_frame_cap_get_capFSize(cap);

        default:
            return 0;
    }
}

static inline word_t __attribute__((__const__))
generic_frame_cap_get_capFIsMapped(cap_t cap) {
    return generic_frame_cap_get_capFMappedASID(cap) != 0;
}

static inline word_t __attribute__((__const__))
generic_frame_cap_get_capFMappedAddress(cap_t cap) {
    cap_tag_t ctag;

    ctag = cap_get_capType(cap);
    ;


    switch(ctag) {
        case cap_small_frame_cap:
            return cap_small_frame_cap_get_capFMappedAddress(cap);

        case cap_frame_cap:
            return cap_frame_cap_get_capFMappedAddress(cap);

        default:
            return 0;
    }
}

static inline unsigned int __attribute__((__const__))
cap_get_capSizeBits(cap_t cap) {
    cap_tag_t ctag;

    ctag = cap_get_capType(cap);

    switch(ctag) {
        case cap_untyped_cap:
            return cap_untyped_cap_get_capBlockSize(cap);

        case cap_endpoint_cap:
            return 4;

        case cap_async_endpoint_cap:
            return 4;

        case cap_cnode_cap:
            return cap_cnode_cap_get_capCNodeRadix(cap) + 4;

        case cap_thread_cap:
            return 9;

        case cap_small_frame_cap:
        case cap_frame_cap:
            return generic_frame_cap_get_capFSize(cap);

        case cap_page_table_cap:
            return (12 +2);

        case cap_page_directory_cap:
            return (8 +2);

        case cap_null_cap:
        case cap_reply_cap:
        case cap_irq_control_cap:
        case cap_irq_handler_cap:
        case cap_zombie_cap:
        case cap_asid_control_cap:
        case cap_asid_pool_cap:
            return 0;

        default:

            return 0;
    }
}

static inline void * __attribute__((__const__))
cap_get_capPtr(cap_t cap) {
    cap_tag_t ctag;

    ctag = cap_get_capType(cap);

    switch(ctag) {
        case cap_untyped_cap:
            return ((word_t *)(cap_untyped_cap_get_capPtr(cap)));

        case cap_endpoint_cap:
            return ((endpoint_t *)cap_endpoint_cap_get_capEPPtr(cap));

        case cap_async_endpoint_cap:
            return ((async_endpoint_t *)cap_endpoint_cap_get_capEPPtr(cap));

        case cap_cnode_cap:
            return ((cte_t *)(cap_cnode_cap_get_capCNodePtr(cap)));

        case cap_thread_cap:
            return ((tcb_t *)(cap_thread_cap_get_capTCBPtr(cap)));

        case cap_small_frame_cap:
        case cap_frame_cap:
            return (void *)(generic_frame_cap_get_capFBasePtr(cap) <<
                pageBitsForSize(generic_frame_cap_get_capFSize(cap)));

        case cap_page_table_cap:
            return ((pde_t *)(cap_page_table_cap_get_capPTBasePtr(cap)));

        case cap_page_directory_cap:
            return ((pte_t *)cap_page_directory_cap_get_capPDBasePtr(cap));

        case cap_null_cap:
        case cap_reply_cap:
        case cap_irq_control_cap:
        case cap_irq_handler_cap:
        case cap_zombie_cap:
        case cap_asid_control_cap:
        case cap_asid_pool_cap:
            return ((void *)0);

        default:

            return ((void *)0);
    }
}

static inline vm_attributes_t __attribute__((__const__))
vmAttributesFromWord(word_t w) {
    vm_attributes_t attr;

    attr.words[0] = w;
    return attr;
}
# 12 "../../c-kernel/include/arch/arm/arch/machine.h" 2


word_t getRestartPC(tcb_t *thread);
void setNextPC(tcb_t *thread, word_t v);




void setCurrentPD(paddr_t addr);
void setHardwareASID(hw_asid_t hw_asid);


void invalidateTLB(void);
void invalidateHWASID(hw_asid_t hw_asid);
void invalidateMVA(word_t mva_plus_asid);
void lockTLBEntry(word_t vaddr);


void cleanCacheMVA(word_t vaddr);
void cleanCacheRange(word_t start, word_t end);
void cleanCache(void);
void invalidateCacheRange(word_t start, word_t end);


word_t getIFSR(void);
word_t getDFSR(void);
word_t getFAR(void);
# 5 "../../c-kernel/include/machine.h" 2
# 1 "../../c-kernel/include/plat/imx31/plat/machine.h" 1



enum IRQConstants {
    INTERRUPT_EPIT1 = 28,
    maxIRQ = 63
} platform_interrupt_t;
# 6 "../../c-kernel/include/machine.h" 2
# 1 "../../c-kernel/include/machine/registerset.h" 1







static inline void
setRegister(tcb_t *thread, register_t reg, word_t w) {
    thread->tcbContext.registers[reg] = w;
}

static inline word_t __attribute__((__pure__))
getRegister(tcb_t *thread, register_t reg) {
    return thread->tcbContext.registers[reg];
}
# 7 "../../c-kernel/include/machine.h" 2
# 1 "../../c-kernel/include/machine/hardware.h" 1



# 1 "../../c-kernel/include/types.h" 1
# 5 "../../c-kernel/include/machine/hardware.h" 2

# 1 "../../c-kernel/include/plat/imx31/plat/machine/hardware.h" 1
# 13 "../../c-kernel/include/plat/imx31/plat/machine/hardware.h"
typedef uint8_t irq_t;

enum irqNumbers {
    irqInvalid = 255
};

static inline void* __attribute__((__const__))
ptrFromPAddr(paddr_t paddr) {
    return (void*)(paddr + (0xf0000000 - 0x80000000));
}

static inline paddr_t __attribute__((__const__))
addrFromPPtr(void* pptr) {
    return (paddr_t)pptr - (0xf0000000 - 0x80000000);
}

void *getMemorySize(void);
const region_list_t *getMemoryRegions(void);
const device_list_t *getDeviceRegions(void);
const kernel_devices_t *getKernelDevices(void);
void maskInterrupt(bool_t enable, irq_t irq);
void ackInterrupt(irq_t irq);
bool_t getInterruptState(void);
irq_t getActiveIRQ(void);
irq_t configureTimer(void);
void resetTimer(void);
# 7 "../../c-kernel/include/machine/hardware.h" 2

static inline void clearMemory(word_t *w_ptr, unsigned int n_bits) {
    memset(w_ptr, 0, (1<<(n_bits)));
}
# 8 "../../c-kernel/include/machine.h" 2
# 5 "../../c-kernel/include/new_types.h" 2
# 1 "../../c-kernel/include/object/structures.h" 1



enum irq_state {
    IRQInactive = 0,
    IRQNotifyAEP = 1,
    IRQTimer = 2
};
typedef enum irq_state irq_state_t;
# 6 "../../c-kernel/include/new_types.h" 2

enum globalInlineSizes {
    maxSyscallArgs = 6,
    maxExtraCaps = 2,
    inlineMessageMax = n_contextRegisters
};

struct inline_message {
    bool_t valid;
    unsigned int length;
    word_t label;
    word_t words[inlineMessageMax];
};
typedef struct inline_message inline_message_t;

extern inline_message_t current_message;

struct pde_range {
    pde_t *base;
    unsigned int offset;
    unsigned int length;
};
typedef struct pde_range pde_range_t;

struct pte_range {
    pte_t *base;
    unsigned int offset;
    unsigned int length;
};
typedef struct pte_range pte_range_t;

struct syscall_args {
    unsigned int length;
    word_t words[maxSyscallArgs];
};
typedef struct syscall_args syscall_args_t;

struct extra_caps {
    unsigned int length;
    cte_t *slots[maxExtraCaps];
};
typedef struct extra_caps extra_caps_t;
# 10 "../../c-kernel/include/types.h" 2
# 5 "../../c-kernel/include/model/statedata.h" 2

# 1 "../../c-kernel/include/object/tcb.h" 1




# 1 "../../c-kernel/include/api/failures.h" 1
# 9 "../../c-kernel/include/api/failures.h"
enum exception {
    EXCEPTION_NONE,
    EXCEPTION_FAULT,
    EXCEPTION_LOOKUP_FAULT,
    EXCEPTION_SYSCALL_ERROR,
    EXCEPTION_PREEMPTED
};
typedef enum exception exception_t;

enum syscall_error_type {
    SyscallError_InvalidArgument = 0,
    SyscallError_InvalidCapability = 1,
    SyscallError_IllegalOperation = 2,
    SyscallError_RangeError = 3,
    SyscallError_AlignmentError = 4,
    SyscallError_FailedLookup = 5,
    SyscallError_TruncatedMessage = 6,
    SyscallError_DeleteFirst = 7,
    SyscallError_RevokeFirst = 8,
    SyscallError_RequirePinnedPage = 9
};
typedef enum syscall_error_type syscall_error_type_t;

struct syscall_error {
    unsigned int invalidArgumentNumber;
    unsigned int invalidCapNumber;
    word_t rangeErrorMin;
    word_t rangeErrorMax;
    bool_t failedLookupWasSource;
    void *requirePinnedAddress;
    bool_t requirePinnedWritable;

    syscall_error_type_t type;
};
typedef struct syscall_error syscall_error_t;

extern lookup_fault_t current_lookup_fault;
extern fault_t current_fault;
extern syscall_error_t current_syscall_error;



void msgFromSyscallError(void);
void msgFromLookupFailure(unsigned int offset, lookup_fault_t f);
# 6 "../../c-kernel/include/object/tcb.h" 2


# 1 "../../c-kernel/include/arch/arm/arch/object/tcb.h" 1







unsigned int setMRs_kernel(tcb_t *thread, word_t *receiveIPCBuffer);
word_t Arch_decodeTransfer(word_t flags);
exception_t Arch_performTransfer(word_t arch, tcb_t *tcb_src, tcb_t *tcb_dest);
# 9 "../../c-kernel/include/object/tcb.h" 2

struct tcb_queue {
    tcb_t *head;
    tcb_t *end;
};
typedef struct tcb_queue tcb_queue_t;

tcb_queue_t tcbSchedEnqueue(tcb_t *tcb, tcb_queue_t queue);
tcb_queue_t tcbSchedAppend(tcb_t *tcb, tcb_queue_t queue);
tcb_queue_t tcbSchedDequeue(tcb_t *tcb, tcb_queue_t queue);

tcb_queue_t tcbEPAppend(tcb_t *tcb, tcb_queue_t queue);
tcb_queue_t tcbEPDequeue(tcb_t *tcb, tcb_queue_t queue);

void setupCallerCap(tcb_t *sender, fault_t fault, tcb_t *receiver);
void deleteCallerCap(tcb_t *receiver);

unsigned int setMRs_thread(tcb_t *thread, word_t *bufferPtr, tcb_t *source_thread,
                           word_t *source_bufferPtr, unsigned int n);
exception_t decodeTCBInvocation(word_t label, unsigned int length,
                                cap_t cap, cte_t* slot, extra_caps_t extraCaps);
exception_t decodeCopyRegisters(cap_t cap, unsigned int length,
                                extra_caps_t extraCaps);
exception_t decodeReadRegisters(cap_t cap, unsigned int length);
exception_t decodeWriteRegisters(cap_t cap, unsigned int length);
exception_t decodeTCBConfigure(cap_t cap, unsigned int length,
                               cte_t* slot, extra_caps_t rootCaps);
exception_t decodeSetPriority(cap_t cap, unsigned int length);
exception_t decodeSetIPCBuffer(cap_t cap, unsigned int length,
                               extra_caps_t extraCaps);
exception_t decodeSetSpace(cap_t cap, unsigned int length,
                           cte_t* slot, extra_caps_t extraCaps);

exception_t invokeTCB_YieldTo(tcb_t *thread);
exception_t invokeTCB_Suspend(tcb_t *thread);
exception_t invokeTCB_Resume(tcb_t *thread);
exception_t invokeTCB_ThreadControl(tcb_t *target, cte_t* slot, cptr_t faultep,
                                    prio_t priority, cap_t cRoot_newCap,
                                    cte_t *cRoot_srcSlot, cap_t vRoot_newCap,
                                    cte_t *vRoot_srcSlot, word_t bufferAddr,
                                    cap_t bufferCap, cte_t *bufferSrcSlot,
                                    bool_t updateBuffer);
exception_t invokeTCB_CopyRegisters(tcb_t *dest, tcb_t *src,
                                    bool_t suspendSource, bool_t resumeTarget,
                                    bool_t transferFrame, bool_t transferInteger,
                                    word_t transferArch);
exception_t invokeTCB_ReadRegisters(tcb_t *src, bool_t suspendSource,
                                    unsigned int n, word_t arch);
exception_t invokeTCB_WriteRegisters(tcb_t *dest, bool_t resumeTarget,
                                     unsigned int length, unsigned int n,
                                     word_t arch);

cptr_t getExtraCPtr(word_t *bufferPtr, unsigned int i);
void clearBufferFlags(word_t *bufferPtr);
void setBufferFlag(word_t *bufferPtr, unsigned int i);
void setExtraBadge(word_t *bufferPtr, word_t badge, unsigned int i);

struct lookupExtraCaps_ret {
    exception_t status;
    extra_caps_t extra_caps;
};
typedef struct lookupExtraCaps_ret lookupExtraCaps_ret_t;

lookupExtraCaps_ret_t lookupExtraCaps(word_t *bufferPtr, message_info_t info);
# 7 "../../c-kernel/include/model/statedata.h" 2
# 1 "../../c-kernel/include/arch/arm/arch/model/statedata.h" 1
# 11 "../../c-kernel/include/arch/arm/arch/model/statedata.h"
extern word_t armKSGlobalsFrame[(1<<(ARMSmallPageBits)) / sizeof(word_t)];
extern pte_t armKSGlobalPTs[4][(1<<(8))];
extern int armKSGlobalPTsOffset;
extern pde_t **armKSASIDTable[(1<<(asidHighBits))];
extern asid_t armKSHWASIDTable[(1<<(hwASIDBits))];
extern hw_asid_t armKSNextASID;
extern pde_t armKSGlobalPD[(1<<(12))];
# 8 "../../c-kernel/include/model/statedata.h" 2


extern tcb_queue_t ksReadyQueues[];


extern tcb_t *ksCurThread;


extern tcb_t ksIdleThread;


extern tcb_t *ksSchedulerAction;


extern irq_state_t intStateIRQTable[];


extern cte_t intStateIRQNode[];
# 1 "include_model.c" 2
