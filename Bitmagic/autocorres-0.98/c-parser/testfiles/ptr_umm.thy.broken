(*
 * Copyright (C) 2014 NICTA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions, and the following disclaimer,
 *    without modification.
 *
 * 2. Redistributions in binary form must reproduce at minimum a disclaimer
 *    substantially similar to the "NO WARRANTY" disclaimer below
 *    ("Disclaimer") and any redistribution must be conditioned upon
 *    including a substantially similar Disclaimer requirement for further
 *    binary redistribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGES.
 *)

theory ptr_umm imports "../CTranslation" begin

declare sep_conj_ac [simp add]
install_C_file "ptr_umm.c"

thm swap_body_def

lemma
  "\<forall>\<sigma>. \<Gamma>\<turnstile>
    \<lbrace>\<sigma>. \<turnstile>\<^sub>t \<acute>j \<and> \<turnstile>\<^sub>t \<acute>i \<rbrace>
      swap_body
    \<lbrace> \<star>\<acute>i = \<^bsup>\<sigma>\<^esup>\<star>\<^bsup>\<sigma>\<^esup>j \<and> \<star>\<acute>j = \<^bsup>\<sigma>\<^esup>\<star>\<^bsup>\<sigma>\<^esup>i \<rbrace>"
apply(unfold swap_body_def)
by vcgp


lemma
  "\<forall>x y. \<Gamma>\<turnstile>
    \<lbrace>(\<acute>i \<mapsto> x \<and>\<^sup>* \<acute>j \<mapsto> y)\<^bsup>sep\<^esup>\<rbrace>
      swap_body
    \<lbrace>(\<acute>i \<mapsto> y \<and>\<^sup>* \<acute>j \<mapsto> x)\<^bsup>sep\<^esup> \<rbrace>"
apply(unfold swap_body_def)
apply vcg
apply clarsimp
apply(rule sep_heap_update_global, assumption)
 apply(rule_tac d=t_d in sep_map'_lift)
 apply(erule sep_map'_conjE2)
 apply(simp add: sep_map_sep_map')
apply(subst sep_conj_com)
apply(rule sep_heap_update_global, assumption)
 apply(rule_tac d=t_d in sep_map'_lift)
 apply(erule sep_map'_conjE1)
 apply(simp add: sep_map_sep_map')
apply simp
apply(erule sep_conj_impl)
apply simp+
done

end




