
text{*in doubt allow closure*}
value(code) "rmMatchFalse (((optimize_matches opt_MatchAny_match_expr)^^10) (optimize_matches_a upper_closure_matchexpr simple_example_firewall2))"

"[Rule (Match (Src (Ip4AddrNetmask (0, 0, 0, 0) 8))) Drop, Rule (Match (Src (Ip4AddrNetmask (10, 0, 0, 0) 8))) Drop,
  Rule (Match (Src (Ip4AddrNetmask (127, 0, 0, 0) 8))) Drop, Rule (Match (Src (Ip4AddrNetmask (169, 254, 0, 0) 16))) Drop,
  Rule (Match (Src (Ip4AddrNetmask (172, 16, 0, 0) 12))) Drop, Rule (Match (Src (Ip4AddrNetmask (224, 0, 0, 0) 3))) Drop,
  Rule (Match (Src (Ip4AddrNetmask (240, 0, 0, 0) 8))) Drop, Rule (Match (Src (Ip4AddrNetmask (160, 86, 0, 0) 16))) Accept, Rule MatchAny Drop, Rule MatchAny Accept,
  Rule MatchAny Accept, Rule MatchAny Accept, Rule MatchAny Accept, Rule (Match (Prot ProtTCP)) Accept, Rule (Match (Prot ProtTCP)) Accept,
  Rule (Match (Prot ProtTCP)) Accept, Rule (Match (Prot ProtUDP)) Accept, Rule (Match (Prot ProtUDP)) Accept, Rule (Match (Prot ProtTCP)) Accept,
  Rule (Match (Prot ProtUDP)) Accept, Rule (Match (Prot ProtTCP)) Accept, Rule (Match (Prot ProtUDP)) Accept, Rule (Match (Prot ProtTCP)) Accept,
  Rule (Match (Prot ProtUDP)) Accept, Rule MatchAny Drop, Rule MatchAny Accept]"
  :: "iptrule_match rule list"
  


text{*in doubt deny closure*}
value(code) "rmMatchFalse (((optimize_matches opt_MatchAny_match_expr)^^10) (optimize_matches_a lower_closure_matchexpr simple_example_firewall2))"

"[Rule (MatchAnd (Match (Src (Ip4AddrNetmask (0, 0, 0, 0) 8))) (Match (Prot ProtTCP))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (0, 0, 0, 0) 8))) (Match (Prot ProtUDP))) Drop, Rule (Match (Src (Ip4AddrNetmask (0, 0, 0, 0) 8))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (10, 0, 0, 0) 8))) (Match (Prot ProtTCP))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (10, 0, 0, 0) 8))) (Match (Prot ProtUDP))) Drop, Rule (Match (Src (Ip4AddrNetmask (10, 0, 0, 0) 8))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (127, 0, 0, 0) 8))) (Match (Prot ProtTCP))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (127, 0, 0, 0) 8))) (Match (Prot ProtUDP))) Drop, Rule (Match (Src (Ip4AddrNetmask (127, 0, 0, 0) 8))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (169, 254, 0, 0) 16))) (Match (Prot ProtTCP))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (169, 254, 0, 0) 16))) (Match (Prot ProtUDP))) Drop, Rule (Match (Src (Ip4AddrNetmask (169, 254, 0, 0) 16))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (172, 16, 0, 0) 12))) (Match (Prot ProtTCP))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (172, 16, 0, 0) 12))) (Match (Prot ProtUDP))) Drop, Rule (Match (Src (Ip4AddrNetmask (172, 16, 0, 0) 12))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (224, 0, 0, 0) 3))) (Match (Prot ProtTCP))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (224, 0, 0, 0) 3))) (Match (Prot ProtUDP))) Drop, Rule (Match (Src (Ip4AddrNetmask (224, 0, 0, 0) 3))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (240, 0, 0, 0) 8))) (Match (Prot ProtTCP))) Drop,
  Rule (MatchAnd (Match (Src (Ip4AddrNetmask (240, 0, 0, 0) 8))) (Match (Prot ProtUDP))) Drop, Rule (Match (Src (Ip4AddrNetmask (240, 0, 0, 0) 8))) Drop,
  Rule (Match (Src (Ip4AddrNetmask (160, 86, 0, 0) 16))) Accept, Rule MatchAny Drop, Rule (Match (Prot ProtTCP)) Drop, Rule (Match (Prot ProtTCP)) Drop,
  Rule (Match (Prot ProtUDP)) Drop, Rule (Match (Prot ProtTCP)) Drop, Rule (Match (Prot ProtUDP)) Drop, Rule (Match (Prot ProtTCP)) Drop, Rule (Match (Prot ProtUDP)) Drop,
  Rule MatchAny Drop, Rule MatchAny Accept]"
  :: "iptrule_match rule list"
